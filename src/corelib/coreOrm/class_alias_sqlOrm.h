// generated by sqlpp11-ddl2cpp 004-class_alias.sql class_alias_sqlOrm doodle
#ifndef DOODLE_CLASS_ALIAS_SQLORM_H
#define DOODLE_CLASS_ALIAS_SQLORM_H

#include <sqlpp11/table.h>
#include <sqlpp11/data_types.h>
#include <sqlpp11/char_sequence.h>

namespace doodle
{
  namespace ClassAlias_
  {
    struct Id
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "id";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T id;
            T& operator()() { return id; }
            const T& operator()() const { return id; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer, sqlpp::tag::can_be_null>;
    };
    struct DoodleClassName
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "doodleClassName";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T doodleClassName;
            T& operator()() { return doodleClassName; }
            const T& operator()() const { return doodleClassName; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::text, sqlpp::tag::require_insert>;
    };
    struct DoodleAlias
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "doodleAlias";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T doodleAlias;
            T& operator()() { return doodleAlias; }
            const T& operator()() const { return doodleAlias; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::text, sqlpp::tag::require_insert>;
    };
    struct ClassIndex
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "classIndex";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T classIndex;
            T& operator()() { return classIndex; }
            const T& operator()() const { return classIndex; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer, sqlpp::tag::require_insert>;
    };
  } // namespace ClassAlias_

  struct ClassAlias: sqlpp::table_t<ClassAlias,
               ClassAlias_::Id,
               ClassAlias_::DoodleClassName,
               ClassAlias_::DoodleAlias,
               ClassAlias_::ClassIndex>
  {
    struct _alias_t
    {
      static constexpr const char _literal[] =  "class_alias";
      using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
      template<typename T>
      struct _member_t
      {
        T classAlias;
        T& operator()() { return classAlias; }
        const T& operator()() const { return classAlias; }
      };
    };
  };
} // namespace doodle
#endif
