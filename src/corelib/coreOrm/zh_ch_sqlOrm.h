// generated by sqlpp11-ddl2cpp 002-zh_ch.sql zh_ch_sqlOrm doodle
#ifndef DOODLE_ZH_CH_SQLORM_H
#define DOODLE_ZH_CH_SQLORM_H

#include <sqlpp11/table.h>
#include <sqlpp11/data_types.h>
#include <sqlpp11/char_sequence.h>

namespace doodle
{
  namespace ZhCh_
  {
    struct Id
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "id";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T id;
            T& operator()() { return id; }
            const T& operator()() const { return id; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer, sqlpp::tag::can_be_null>;
    };
    struct Znch
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "znch";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T znch;
            T& operator()() { return znch; }
            const T& operator()() const { return znch; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::text, sqlpp::tag::require_insert>;
    };
    struct Enus
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "enus";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T enus;
            T& operator()() { return enus; }
            const T& operator()() const { return enus; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::text, sqlpp::tag::require_insert>;
    };
  } // namespace ZhCh_

  struct ZhCh: sqlpp::table_t<ZhCh,
               ZhCh_::Id,
               ZhCh_::Znch,
               ZhCh_::Enus>
  {
    struct _alias_t
    {
      static constexpr const char _literal[] =  "zh_ch";
      using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
      template<typename T>
      struct _member_t
      {
        T zhCh;
        T& operator()() { return zhCh; }
        const T& operator()() const { return zhCh; }
      };
    };
  };
} // namespace doodle
#endif
