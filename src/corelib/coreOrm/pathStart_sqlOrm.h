// generated by sqlpp11-ddl2cpp 003-pathStart.sql pathStart_sqlOrm doodle
#ifndef DOODLE_PATHSTART_SQLORM_H
#define DOODLE_PATHSTART_SQLORM_H

#include <sqlpp11/table.h>
#include <sqlpp11/data_types.h>
#include <sqlpp11/char_sequence.h>

namespace doodle
{
  namespace PathStart_
  {
    struct Id
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "id";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T id;
            T& operator()() { return id; }
            const T& operator()() const { return id; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer, sqlpp::tag::can_be_null>;
    };
    struct RootKey
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "rootKey";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T rootKey;
            T& operator()() { return rootKey; }
            const T& operator()() const { return rootKey; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::text, sqlpp::tag::require_insert>;
    };
    struct Root
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "root";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T root;
            T& operator()() { return root; }
            const T& operator()() const { return root; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::text, sqlpp::tag::require_insert>;
    };
    struct Parser
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "Parser";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T Parser;
            T& operator()() { return Parser; }
            const T& operator()() const { return Parser; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer, sqlpp::tag::can_be_null>;
    };
  } // namespace PathStart_

  struct PathStart: sqlpp::table_t<PathStart,
               PathStart_::Id,
               PathStart_::RootKey,
               PathStart_::Root,
               PathStart_::Parser>
  {
    struct _alias_t
    {
      static constexpr const char _literal[] =  "pathStart";
      using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
      template<typename T>
      struct _member_t
      {
        T pathStart;
        T& operator()() { return pathStart; }
        const T& operator()() const { return pathStart; }
      };
    };
  };
} // namespace doodle
#endif
