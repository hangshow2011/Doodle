// generated by sqlpp11-ddl2cpp 000-PathParser.sql PathParser_sqlOrm doodle
#ifndef DOODLE_PATHPARSER_SQLORM_H
#define DOODLE_PATHPARSER_SQLORM_H

#include <sqlpp11/table.h>
#include <sqlpp11/data_types.h>
#include <sqlpp11/char_sequence.h>

namespace doodle
{
  namespace PathParser_
  {
    struct Id
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "id";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T id;
            T& operator()() { return id; }
            const T& operator()() const { return id; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer, sqlpp::tag::require_insert>;
    };
    struct ClassPath
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "ClassPath";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T ClassPath;
            T& operator()() { return ClassPath; }
            const T& operator()() const { return ClassPath; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::text, sqlpp::tag::require_insert>;
    };
    struct RefClass
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "refClass";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T refClass;
            T& operator()() { return refClass; }
            const T& operator()() const { return refClass; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::text, sqlpp::tag::require_insert>;
    };
    struct Regex
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "regex";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T regex;
            T& operator()() { return regex; }
            const T& operator()() const { return regex; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::text, sqlpp::tag::require_insert>;
    };
    struct Prefix
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "prefix";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T prefix;
            T& operator()() { return prefix; }
            const T& operator()() const { return prefix; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::text, sqlpp::tag::can_be_null>;
    };
    struct Suffix
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "suffix";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T suffix;
            T& operator()() { return suffix; }
            const T& operator()() const { return suffix; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::text, sqlpp::tag::can_be_null>;
    };
    struct Format
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "format";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T format;
            T& operator()() { return format; }
            const T& operator()() const { return format; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::text, sqlpp::tag::require_insert>;
    };
  } // namespace PathParser_

  struct PathParser: sqlpp::table_t<PathParser,
               PathParser_::Id,
               PathParser_::ClassPath,
               PathParser_::RefClass,
               PathParser_::Regex,
               PathParser_::Prefix,
               PathParser_::Suffix,
               PathParser_::Format>
  {
    struct _alias_t
    {
      static constexpr const char _literal[] =  "PathParser";
      using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
      template<typename T>
      struct _member_t
      {
        T PathParser;
        T& operator()() { return PathParser; }
        const T& operator()() const { return PathParser; }
      };
    };
  };
} // namespace doodle
#endif
