// generated by E:/Doodle/build/Ninja_debug/vcpkg_installed/x64-windows/scripts/sqlpp11-ddl2cpp E:/Doodle/src/doodle_core/core/sql_file.sql E:/Doodle/src/doodle_core/generate/core/sql_sql doodle_database
#ifndef DOODLE_DATABASE_SQL_SQL_H
#define DOODLE_DATABASE_SQL_SQL_H

#include <sqlpp11/table.h>
#include <sqlpp11/data_types.h>
#include <sqlpp11/char_sequence.h>

namespace doodle_database
{
  namespace Context_
  {
    struct Id
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "id";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T id;
            T& operator()() { return id; }
            const T& operator()() const { return id; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer, sqlpp::tag::can_be_null>;
    };
    struct ComHash
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "com_hash";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T comHash;
            T& operator()() { return comHash; }
            const T& operator()() const { return comHash; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer, sqlpp::tag::can_be_null>;
    };
    struct JsonData
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "json_data";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T jsonData;
            T& operator()() { return jsonData; }
            const T& operator()() const { return jsonData; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::text, sqlpp::tag::can_be_null>;
    };
  } // namespace Context_

  struct Context: sqlpp::table_t<Context,
               Context_::Id,
               Context_::ComHash,
               Context_::JsonData>
  {
    struct _alias_t
    {
      static constexpr const char _literal[] =  "context";
      using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
      template<typename T>
      struct _member_t
      {
        T context;
        T& operator()() { return context; }
        const T& operator()() const { return context; }
      };
    };
  };
  namespace Entity_
  {
    struct Id
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "id";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T id;
            T& operator()() { return id; }
            const T& operator()() const { return id; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer, sqlpp::tag::can_be_null>;
    };
    struct UuidData
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "uuid_data";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T uuidData;
            T& operator()() { return uuidData; }
            const T& operator()() const { return uuidData; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::text, sqlpp::tag::can_be_null>;
    };
    struct UpdateTime
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "update_time";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T updateTime;
            T& operator()() { return updateTime; }
            const T& operator()() const { return updateTime; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::time_point, sqlpp::tag::can_be_null>;
    };
  } // namespace Entity_

  struct Entity: sqlpp::table_t<Entity,
               Entity_::Id,
               Entity_::UuidData,
               Entity_::UpdateTime>
  {
    struct _alias_t
    {
      static constexpr const char _literal[] =  "entity";
      using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
      template<typename T>
      struct _member_t
      {
        T entity;
        T& operator()() { return entity; }
        const T& operator()() const { return entity; }
      };
    };
  };
  namespace ComEntity_
  {
    struct Id
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "id";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T id;
            T& operator()() { return id; }
            const T& operator()() const { return id; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer, sqlpp::tag::can_be_null>;
    };
    struct EntityId
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "entity_id";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T entityId;
            T& operator()() { return entityId; }
            const T& operator()() const { return entityId; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer, sqlpp::tag::can_be_null>;
    };
    struct ComHash
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "com_hash";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T comHash;
            T& operator()() { return comHash; }
            const T& operator()() const { return comHash; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer, sqlpp::tag::can_be_null>;
    };
    struct JsonData
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "json_data";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T jsonData;
            T& operator()() { return jsonData; }
            const T& operator()() const { return jsonData; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::text, sqlpp::tag::can_be_null>;
    };
  } // namespace ComEntity_

  struct ComEntity: sqlpp::table_t<ComEntity,
               ComEntity_::Id,
               ComEntity_::EntityId,
               ComEntity_::ComHash,
               ComEntity_::JsonData>
  {
    struct _alias_t
    {
      static constexpr const char _literal[] =  "com_entity";
      using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
      template<typename T>
      struct _member_t
      {
        T comEntity;
        T& operator()() { return comEntity; }
        const T& operator()() const { return comEntity; }
      };
    };
  };
  namespace DoodleInfo_
  {
    struct VersionMajor
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "version_major";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T versionMajor;
            T& operator()() { return versionMajor; }
            const T& operator()() const { return versionMajor; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer, sqlpp::tag::require_insert>;
    };
    struct VersionMinor
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "version_minor";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T versionMinor;
            T& operator()() { return versionMinor; }
            const T& operator()() const { return versionMinor; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer, sqlpp::tag::require_insert>;
    };
  } // namespace DoodleInfo_

  struct DoodleInfo: sqlpp::table_t<DoodleInfo,
               DoodleInfo_::VersionMajor,
               DoodleInfo_::VersionMinor>
  {
    struct _alias_t
    {
      static constexpr const char _literal[] =  "doodle_info";
      using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
      template<typename T>
      struct _member_t
      {
        T doodleInfo;
        T& operator()() { return doodleInfo; }
        const T& operator()() const { return doodleInfo; }
      };
    };
  };
  namespace Usertab_
  {
    struct Id
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "id";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T id;
            T& operator()() { return id; }
            const T& operator()() const { return id; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer, sqlpp::tag::can_be_null>;
    };
    struct EntityId
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "entity_id";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T entityId;
            T& operator()() { return entityId; }
            const T& operator()() const { return entityId; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer, sqlpp::tag::can_be_null>;
    };
    struct UserName
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "user_name";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T userName;
            T& operator()() { return userName; }
            const T& operator()() const { return userName; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::text, sqlpp::tag::require_insert>;
    };
    struct PermissionGroup
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "permission_group";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T permissionGroup;
            T& operator()() { return permissionGroup; }
            const T& operator()() const { return permissionGroup; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer, sqlpp::tag::can_be_null>;
    };
  } // namespace Usertab_

  struct Usertab: sqlpp::table_t<Usertab,
               Usertab_::Id,
               Usertab_::EntityId,
               Usertab_::UserName,
               Usertab_::PermissionGroup>
  {
    struct _alias_t
    {
      static constexpr const char _literal[] =  "usertab";
      using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
      template<typename T>
      struct _member_t
      {
        T usertab;
        T& operator()() { return usertab; }
        const T& operator()() const { return usertab; }
      };
    };
  };
  namespace WorkTaskInfo_
  {
    struct Id
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "id";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T id;
            T& operator()() { return id; }
            const T& operator()() const { return id; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer, sqlpp::tag::can_be_null>;
    };
    struct EntityId
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "entity_id";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T entityId;
            T& operator()() { return entityId; }
            const T& operator()() const { return entityId; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer, sqlpp::tag::can_be_null>;
    };
    struct UserId
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "user_id";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T userId;
            T& operator()() { return userId; }
            const T& operator()() const { return userId; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::text, sqlpp::tag::can_be_null>;
    };
    struct TaskName
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "task_name";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T taskName;
            T& operator()() { return taskName; }
            const T& operator()() const { return taskName; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::text, sqlpp::tag::can_be_null>;
    };
    struct Region
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "region";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T region;
            T& operator()() { return region; }
            const T& operator()() const { return region; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::text, sqlpp::tag::can_be_null>;
    };
    struct Abstract
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "abstract";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T abstract;
            T& operator()() { return abstract; }
            const T& operator()() const { return abstract; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::text, sqlpp::tag::can_be_null>;
    };
    struct TimePoint
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "time_point";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T timePoint;
            T& operator()() { return timePoint; }
            const T& operator()() const { return timePoint; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::time_point, sqlpp::tag::can_be_null>;
    };
  } // namespace WorkTaskInfo_

  struct WorkTaskInfo: sqlpp::table_t<WorkTaskInfo,
               WorkTaskInfo_::Id,
               WorkTaskInfo_::EntityId,
               WorkTaskInfo_::UserId,
               WorkTaskInfo_::TaskName,
               WorkTaskInfo_::Region,
               WorkTaskInfo_::Abstract,
               WorkTaskInfo_::TimePoint>
  {
    struct _alias_t
    {
      static constexpr const char _literal[] =  "work_task_info";
      using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
      template<typename T>
      struct _member_t
      {
        T workTaskInfo;
        T& operator()() { return workTaskInfo; }
        const T& operator()() const { return workTaskInfo; }
      };
    };
  };
  namespace Episodes_
  {
    struct Id
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "id";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T id;
            T& operator()() { return id; }
            const T& operator()() const { return id; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer, sqlpp::tag::can_be_null>;
    };
    struct EntityId
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "entity_id";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T entityId;
            T& operator()() { return entityId; }
            const T& operator()() const { return entityId; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer, sqlpp::tag::can_be_null>;
    };
    struct Eps
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "eps";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T eps;
            T& operator()() { return eps; }
            const T& operator()() const { return eps; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer, sqlpp::tag::can_be_null>;
    };
  } // namespace Episodes_

  struct Episodes: sqlpp::table_t<Episodes,
               Episodes_::Id,
               Episodes_::EntityId,
               Episodes_::Eps>
  {
    struct _alias_t
    {
      static constexpr const char _literal[] =  "episodes";
      using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
      template<typename T>
      struct _member_t
      {
        T episodes;
        T& operator()() { return episodes; }
        const T& operator()() const { return episodes; }
      };
    };
  };
  namespace Shot_
  {
    struct Id
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "id";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T id;
            T& operator()() { return id; }
            const T& operator()() const { return id; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer, sqlpp::tag::can_be_null>;
    };
    struct EntityId
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "entity_id";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T entityId;
            T& operator()() { return entityId; }
            const T& operator()() const { return entityId; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer, sqlpp::tag::can_be_null>;
    };
    struct ShotInt
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "shot_int";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T shotInt;
            T& operator()() { return shotInt; }
            const T& operator()() const { return shotInt; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer, sqlpp::tag::can_be_null>;
    };
    struct ShotAb
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "shot_ab";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T shotAb;
            T& operator()() { return shotAb; }
            const T& operator()() const { return shotAb; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::text, sqlpp::tag::can_be_null>;
    };
  } // namespace Shot_

  struct Shot: sqlpp::table_t<Shot,
               Shot_::Id,
               Shot_::EntityId,
               Shot_::ShotInt,
               Shot_::ShotAb>
  {
    struct _alias_t
    {
      static constexpr const char _literal[] =  "shot";
      using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
      template<typename T>
      struct _member_t
      {
        T shot;
        T& operator()() { return shot; }
        const T& operator()() const { return shot; }
      };
    };
  };
  namespace RedirectionPathInfo_
  {
    struct Id
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "id";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T id;
            T& operator()() { return id; }
            const T& operator()() const { return id; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer, sqlpp::tag::can_be_null>;
    };
    struct EntityId
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "entity_id";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T entityId;
            T& operator()() { return entityId; }
            const T& operator()() const { return entityId; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer, sqlpp::tag::can_be_null>;
    };
    struct RedirectionPath
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "redirection_path";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T redirectionPath;
            T& operator()() { return redirectionPath; }
            const T& operator()() const { return redirectionPath; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::text, sqlpp::tag::can_be_null>;
    };
    struct RedirectionFileName
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "redirection_file_name";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T redirectionFileName;
            T& operator()() { return redirectionFileName; }
            const T& operator()() const { return redirectionFileName; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::text, sqlpp::tag::can_be_null>;
    };
  } // namespace RedirectionPathInfo_

  struct RedirectionPathInfo: sqlpp::table_t<RedirectionPathInfo,
               RedirectionPathInfo_::Id,
               RedirectionPathInfo_::EntityId,
               RedirectionPathInfo_::RedirectionPath,
               RedirectionPathInfo_::RedirectionFileName>
  {
    struct _alias_t
    {
      static constexpr const char _literal[] =  "redirection_path_info";
      using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
      template<typename T>
      struct _member_t
      {
        T redirectionPathInfo;
        T& operator()() { return redirectionPathInfo; }
        const T& operator()() const { return redirectionPathInfo; }
      };
    };
  };
  namespace RpiSearchPath_
  {
    struct Id
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "id";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T id;
            T& operator()() { return id; }
            const T& operator()() const { return id; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer, sqlpp::tag::can_be_null>;
    };
    struct EntityId
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "entity_id";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T entityId;
            T& operator()() { return entityId; }
            const T& operator()() const { return entityId; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer, sqlpp::tag::can_be_null>;
    };
    struct Path
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "path";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T path;
            T& operator()() { return path; }
            const T& operator()() const { return path; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::text, sqlpp::tag::can_be_null>;
    };
  } // namespace RpiSearchPath_

  struct RpiSearchPath: sqlpp::table_t<RpiSearchPath,
               RpiSearchPath_::Id,
               RpiSearchPath_::EntityId,
               RpiSearchPath_::Path>
  {
    struct _alias_t
    {
      static constexpr const char _literal[] =  "rpi_search_path";
      using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
      template<typename T>
      struct _member_t
      {
        T rpiSearchPath;
        T& operator()() { return rpiSearchPath; }
        const T& operator()() const { return rpiSearchPath; }
      };
    };
  };
  namespace Assets_
  {
    struct Id
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "id";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T id;
            T& operator()() { return id; }
            const T& operator()() const { return id; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer, sqlpp::tag::can_be_null>;
    };
    struct EntityId
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "entity_id";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T entityId;
            T& operator()() { return entityId; }
            const T& operator()() const { return entityId; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer, sqlpp::tag::can_be_null>;
    };
    struct AssetsPath
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "assets_path";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T assetsPath;
            T& operator()() { return assetsPath; }
            const T& operator()() const { return assetsPath; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::text, sqlpp::tag::can_be_null>;
    };
  } // namespace Assets_

  struct Assets: sqlpp::table_t<Assets,
               Assets_::Id,
               Assets_::EntityId,
               Assets_::AssetsPath>
  {
    struct _alias_t
    {
      static constexpr const char _literal[] =  "assets";
      using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
      template<typename T>
      struct _member_t
      {
        T assets;
        T& operator()() { return assets; }
        const T& operator()() const { return assets; }
      };
    };
  };
  namespace Comment_
  {
    struct Id
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "id";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T id;
            T& operator()() { return id; }
            const T& operator()() const { return id; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer, sqlpp::tag::can_be_null>;
    };
    struct EntityId
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "entity_id";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T entityId;
            T& operator()() { return entityId; }
            const T& operator()() const { return entityId; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer, sqlpp::tag::can_be_null>;
    };
    struct CommentString
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "comment_string";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T commentString;
            T& operator()() { return commentString; }
            const T& operator()() const { return commentString; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::text, sqlpp::tag::can_be_null>;
    };
    struct CommentTime
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "comment_time";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T commentTime;
            T& operator()() { return commentTime; }
            const T& operator()() const { return commentTime; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::text, sqlpp::tag::can_be_null>;
    };
  } // namespace Comment_

  struct Comment: sqlpp::table_t<Comment,
               Comment_::Id,
               Comment_::EntityId,
               Comment_::CommentString,
               Comment_::CommentTime>
  {
    struct _alias_t
    {
      static constexpr const char _literal[] =  "comment";
      using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
      template<typename T>
      struct _member_t
      {
        T comment;
        T& operator()() { return comment; }
        const T& operator()() const { return comment; }
      };
    };
  };
  namespace ExportFileInfo_
  {
    struct Id
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "id";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T id;
            T& operator()() { return id; }
            const T& operator()() const { return id; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer, sqlpp::tag::can_be_null>;
    };
    struct EntityId
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "entity_id";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T entityId;
            T& operator()() { return entityId; }
            const T& operator()() const { return entityId; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer, sqlpp::tag::can_be_null>;
    };
    struct FilePath
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "file_path";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T filePath;
            T& operator()() { return filePath; }
            const T& operator()() const { return filePath; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::text, sqlpp::tag::can_be_null>;
    };
    struct StartFrame
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "start_frame";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T startFrame;
            T& operator()() { return startFrame; }
            const T& operator()() const { return startFrame; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer, sqlpp::tag::can_be_null>;
    };
    struct EndFrame
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "end_frame";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T endFrame;
            T& operator()() { return endFrame; }
            const T& operator()() const { return endFrame; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer, sqlpp::tag::can_be_null>;
    };
    struct RefFile
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "ref_file";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T refFile;
            T& operator()() { return refFile; }
            const T& operator()() const { return refFile; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::text, sqlpp::tag::can_be_null>;
    };
    struct ExportType_
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "export_type_";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T exportType_;
            T& operator()() { return exportType_; }
            const T& operator()() const { return exportType_; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::text, sqlpp::tag::can_be_null>;
    };
  } // namespace ExportFileInfo_

  struct ExportFileInfo: sqlpp::table_t<ExportFileInfo,
               ExportFileInfo_::Id,
               ExportFileInfo_::EntityId,
               ExportFileInfo_::FilePath,
               ExportFileInfo_::StartFrame,
               ExportFileInfo_::EndFrame,
               ExportFileInfo_::RefFile,
               ExportFileInfo_::ExportType_>
  {
    struct _alias_t
    {
      static constexpr const char _literal[] =  "export_file_info";
      using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
      template<typename T>
      struct _member_t
      {
        T exportFileInfo;
        T& operator()() { return exportFileInfo; }
        const T& operator()() const { return exportFileInfo; }
      };
    };
  };
  namespace ImageIcon_
  {
    struct Id
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "id";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T id;
            T& operator()() { return id; }
            const T& operator()() const { return id; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer, sqlpp::tag::can_be_null>;
    };
    struct EntityId
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "entity_id";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T entityId;
            T& operator()() { return entityId; }
            const T& operator()() const { return entityId; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer, sqlpp::tag::can_be_null>;
    };
    struct Path
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "path";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T path;
            T& operator()() { return path; }
            const T& operator()() const { return path; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::text, sqlpp::tag::can_be_null>;
    };
  } // namespace ImageIcon_

  struct ImageIcon: sqlpp::table_t<ImageIcon,
               ImageIcon_::Id,
               ImageIcon_::EntityId,
               ImageIcon_::Path>
  {
    struct _alias_t
    {
      static constexpr const char _literal[] =  "image_icon";
      using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
      template<typename T>
      struct _member_t
      {
        T imageIcon;
        T& operator()() { return imageIcon; }
        const T& operator()() const { return imageIcon; }
      };
    };
  };
  namespace AssetsFile_
  {
    struct Id
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "id";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T id;
            T& operator()() { return id; }
            const T& operator()() const { return id; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer, sqlpp::tag::can_be_null>;
    };
    struct EntityId
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "entity_id";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T entityId;
            T& operator()() { return entityId; }
            const T& operator()() const { return entityId; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer, sqlpp::tag::can_be_null>;
    };
    struct Name
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "name";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T name;
            T& operator()() { return name; }
            const T& operator()() const { return name; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::text, sqlpp::tag::can_be_null>;
    };
    struct Path
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "path";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T path;
            T& operator()() { return path; }
            const T& operator()() const { return path; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::text, sqlpp::tag::can_be_null>;
    };
    struct Version
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "version";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T version;
            T& operator()() { return version; }
            const T& operator()() const { return version; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer, sqlpp::tag::can_be_null>;
    };
    struct UserRef
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "user_ref";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T userRef;
            T& operator()() { return userRef; }
            const T& operator()() const { return userRef; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer, sqlpp::tag::can_be_null>;
    };
  } // namespace AssetsFile_

  struct AssetsFile: sqlpp::table_t<AssetsFile,
               AssetsFile_::Id,
               AssetsFile_::EntityId,
               AssetsFile_::Name,
               AssetsFile_::Path,
               AssetsFile_::Version,
               AssetsFile_::UserRef>
  {
    struct _alias_t
    {
      static constexpr const char _literal[] =  "assets_file";
      using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
      template<typename T>
      struct _member_t
      {
        T assetsFile;
        T& operator()() { return assetsFile; }
        const T& operator()() const { return assetsFile; }
      };
    };
  };
  namespace TimePointInfo_
  {
    struct Id
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "id";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T id;
            T& operator()() { return id; }
            const T& operator()() const { return id; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer, sqlpp::tag::can_be_null>;
    };
    struct EntityId
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "entity_id";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T entityId;
            T& operator()() { return entityId; }
            const T& operator()() const { return entityId; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer, sqlpp::tag::can_be_null>;
    };
    struct FirstTime
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "first_time";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T firstTime;
            T& operator()() { return firstTime; }
            const T& operator()() const { return firstTime; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::time_point, sqlpp::tag::can_be_null>;
    };
    struct SecondTime
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "second_time";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T secondTime;
            T& operator()() { return secondTime; }
            const T& operator()() const { return secondTime; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::time_point, sqlpp::tag::can_be_null>;
    };
    struct Info
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "info";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T info;
            T& operator()() { return info; }
            const T& operator()() const { return info; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::text, sqlpp::tag::can_be_null>;
    };
    struct IsExtraWork
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "is_extra_work";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T isExtraWork;
            T& operator()() { return isExtraWork; }
            const T& operator()() const { return isExtraWork; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::boolean, sqlpp::tag::can_be_null>;
    };
  } // namespace TimePointInfo_

  struct TimePointInfo: sqlpp::table_t<TimePointInfo,
               TimePointInfo_::Id,
               TimePointInfo_::EntityId,
               TimePointInfo_::FirstTime,
               TimePointInfo_::SecondTime,
               TimePointInfo_::Info,
               TimePointInfo_::IsExtraWork>
  {
    struct _alias_t
    {
      static constexpr const char _literal[] =  "time_point_info";
      using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
      template<typename T>
      struct _member_t
      {
        T timePointInfo;
        T& operator()() { return timePointInfo; }
        const T& operator()() const { return timePointInfo; }
      };
    };
  };
  namespace ProjectConfig_
  {
    struct Id
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "id";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T id;
            T& operator()() { return id; }
            const T& operator()() const { return id; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer, sqlpp::tag::can_be_null>;
    };
    struct EntityId
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "entity_id";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T entityId;
            T& operator()() { return entityId; }
            const T& operator()() const { return entityId; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer, sqlpp::tag::can_be_null>;
    };
    struct SimPath
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "sim_path";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T simPath;
            T& operator()() { return simPath; }
            const T& operator()() const { return simPath; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::text, sqlpp::tag::can_be_null>;
    };
    struct ExportGroup
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "export_group";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T exportGroup;
            T& operator()() { return exportGroup; }
            const T& operator()() const { return exportGroup; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::text, sqlpp::tag::can_be_null>;
    };
    struct ClothProxy
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "cloth_proxy";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T clothProxy;
            T& operator()() { return clothProxy; }
            const T& operator()() const { return clothProxy; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::text, sqlpp::tag::can_be_null>;
    };
    struct SimpleModuleProxy
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "simple_module_proxy";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T simpleModuleProxy;
            T& operator()() { return simpleModuleProxy; }
            const T& operator()() const { return simpleModuleProxy; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::text, sqlpp::tag::can_be_null>;
    };
    struct FindIconRegex
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "find_icon_regex";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T findIconRegex;
            T& operator()() { return findIconRegex; }
            const T& operator()() const { return findIconRegex; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::text, sqlpp::tag::can_be_null>;
    };
    struct AssetsList
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "assets_list";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T assetsList;
            T& operator()() { return assetsList; }
            const T& operator()() const { return assetsList; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::text, sqlpp::tag::can_be_null>;
    };
    struct IconExtensions
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "icon_extensions";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T iconExtensions;
            T& operator()() { return iconExtensions; }
            const T& operator()() const { return iconExtensions; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::text, sqlpp::tag::can_be_null>;
    };
    struct UploadPath
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "upload_path";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T uploadPath;
            T& operator()() { return uploadPath; }
            const T& operator()() const { return uploadPath; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::text, sqlpp::tag::can_be_null>;
    };
    struct SeasonCount
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "season_count";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T seasonCount;
            T& operator()() { return seasonCount; }
            const T& operator()() const { return seasonCount; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer, sqlpp::tag::can_be_null>;
    };
    struct UseOnlySimCloth
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "use_only_sim_cloth";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T useOnlySimCloth;
            T& operator()() { return useOnlySimCloth; }
            const T& operator()() const { return useOnlySimCloth; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::boolean, sqlpp::tag::can_be_null>;
    };
    struct UseDivideGroupExport
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "use_divide_group_export";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T useDivideGroupExport;
            T& operator()() { return useDivideGroupExport; }
            const T& operator()() const { return useDivideGroupExport; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::boolean, sqlpp::tag::can_be_null>;
    };
    struct UseRenameMaterial
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "use_rename_material";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T useRenameMaterial;
            T& operator()() { return useRenameMaterial; }
            const T& operator()() const { return useRenameMaterial; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::boolean, sqlpp::tag::can_be_null>;
    };
    struct UseMergeMesh
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "use_merge_mesh";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T useMergeMesh;
            T& operator()() { return useMergeMesh; }
            const T& operator()() const { return useMergeMesh; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::boolean, sqlpp::tag::can_be_null>;
    };
    struct TPost
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "t_post";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T tPost;
            T& operator()() { return tPost; }
            const T& operator()() const { return tPost; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer, sqlpp::tag::can_be_null>;
    };
    struct ExportAnimTime
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "export_anim_time";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T exportAnimTime;
            T& operator()() { return exportAnimTime; }
            const T& operator()() const { return exportAnimTime; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer, sqlpp::tag::can_be_null>;
    };
    struct ExportAbcArg
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "export_abc_arg";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T exportAbcArg;
            T& operator()() { return exportAbcArg; }
            const T& operator()() const { return exportAbcArg; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer, sqlpp::tag::can_be_null>;
    };
    struct MayaCameraSelect
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "maya_camera_select";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T mayaCameraSelect;
            T& operator()() { return mayaCameraSelect; }
            const T& operator()() const { return mayaCameraSelect; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::boolean, sqlpp::tag::can_be_null>;
    };
    struct UseWriteMetadata
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "use_write_metadata";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T useWriteMetadata;
            T& operator()() { return useWriteMetadata; }
            const T& operator()() const { return useWriteMetadata; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::boolean, sqlpp::tag::can_be_null>;
    };
    struct AbcExportExtractReferenceName
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "abc_export_extract_reference_name";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T abcExportExtractReferenceName;
            T& operator()() { return abcExportExtractReferenceName; }
            const T& operator()() const { return abcExportExtractReferenceName; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::text, sqlpp::tag::can_be_null>;
    };
    struct AbcExportFormatReferenceName
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "abc_export_format_reference_name";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T abcExportFormatReferenceName;
            T& operator()() { return abcExportFormatReferenceName; }
            const T& operator()() const { return abcExportFormatReferenceName; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::text, sqlpp::tag::can_be_null>;
    };
    struct AbcExportExtractSceneName
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "abc_export_extract_scene_name";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T abcExportExtractSceneName;
            T& operator()() { return abcExportExtractSceneName; }
            const T& operator()() const { return abcExportExtractSceneName; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::text, sqlpp::tag::can_be_null>;
    };
    struct AbcExportFormatSceneName
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "abc_export_format_scene_name";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T abcExportFormatSceneName;
            T& operator()() { return abcExportFormatSceneName; }
            const T& operator()() const { return abcExportFormatSceneName; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::text, sqlpp::tag::can_be_null>;
    };
    struct AbcExportAddFrameRange
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "abc_export_add_frame_range";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T abcExportAddFrameRange;
            T& operator()() { return abcExportAddFrameRange; }
            const T& operator()() const { return abcExportAddFrameRange; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::boolean, sqlpp::tag::can_be_null>;
    };
    struct MayaCameraSuffix
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "maya_camera_suffix";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T mayaCameraSuffix;
            T& operator()() { return mayaCameraSuffix; }
            const T& operator()() const { return mayaCameraSuffix; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::text, sqlpp::tag::can_be_null>;
    };
    struct MayaOutPutAbcSuffix
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "maya_out_put_abc_suffix";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T mayaOutPutAbcSuffix;
            T& operator()() { return mayaOutPutAbcSuffix; }
            const T& operator()() const { return mayaOutPutAbcSuffix; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::text, sqlpp::tag::can_be_null>;
    };
  } // namespace ProjectConfig_

  struct ProjectConfig: sqlpp::table_t<ProjectConfig,
               ProjectConfig_::Id,
               ProjectConfig_::EntityId,
               ProjectConfig_::SimPath,
               ProjectConfig_::ExportGroup,
               ProjectConfig_::ClothProxy,
               ProjectConfig_::SimpleModuleProxy,
               ProjectConfig_::FindIconRegex,
               ProjectConfig_::AssetsList,
               ProjectConfig_::IconExtensions,
               ProjectConfig_::UploadPath,
               ProjectConfig_::SeasonCount,
               ProjectConfig_::UseOnlySimCloth,
               ProjectConfig_::UseDivideGroupExport,
               ProjectConfig_::UseRenameMaterial,
               ProjectConfig_::UseMergeMesh,
               ProjectConfig_::TPost,
               ProjectConfig_::ExportAnimTime,
               ProjectConfig_::ExportAbcArg,
               ProjectConfig_::MayaCameraSelect,
               ProjectConfig_::UseWriteMetadata,
               ProjectConfig_::AbcExportExtractReferenceName,
               ProjectConfig_::AbcExportFormatReferenceName,
               ProjectConfig_::AbcExportExtractSceneName,
               ProjectConfig_::AbcExportFormatSceneName,
               ProjectConfig_::AbcExportAddFrameRange,
               ProjectConfig_::MayaCameraSuffix,
               ProjectConfig_::MayaOutPutAbcSuffix>
  {
    struct _alias_t
    {
      static constexpr const char _literal[] =  "project_config";
      using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
      template<typename T>
      struct _member_t
      {
        T projectConfig;
        T& operator()() { return projectConfig; }
        const T& operator()() const { return projectConfig; }
      };
    };
  };
} // namespace doodle_database
#endif
