// generated by E:/vcpkg/installed/x64-windows/scripts/sqlpp11-ddl2cpp C:/Users/TD/Source/Doodle/src/doodle_lib/core/000-metadatatab.sql C:/Users/TD/Source/Doodle/src/doodle_lib/generate/core/metadatatab_sql doodle
#ifndef DOODLE_METADATATAB_SQL_H
#define DOODLE_METADATATAB_SQL_H

#include <sqlpp11/table.h>
#include <sqlpp11/data_types.h>
#include <sqlpp11/char_sequence.h>

namespace doodle {
namespace Metadatatab_ {
struct Id {
  struct _alias_t {
    static constexpr const char _literal[] = "id";
    using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
    template <typename T>
    struct _member_t {
      T id;
      T& operator()() { return id; }
      const T& operator()() const { return id; }
    };
  };
  using _traits = sqlpp::make_traits<sqlpp::integer_unsigned, sqlpp::tag::must_not_insert, sqlpp::tag::must_not_update, sqlpp::tag::can_be_null>;
};
struct Parent {
  struct _alias_t {
    static constexpr const char _literal[] = "parent";
    using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
    template <typename T>
    struct _member_t {
      T parent;
      T& operator()() { return parent; }
      const T& operator()() const { return parent; }
    };
  };
  using _traits = sqlpp::make_traits<sqlpp::integer_unsigned, sqlpp::tag::can_be_null>;
};
struct UuidPath {
  struct _alias_t {
    static constexpr const char _literal[] = "uuidPath";
    using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
    template <typename T>
    struct _member_t {
      T uuidPath;
      T& operator()() { return uuidPath; }
      const T& operator()() const { return uuidPath; }
    };
  };
  using _traits = sqlpp::make_traits<sqlpp::text, sqlpp::tag::can_be_null>;
};
struct UserData {
  struct _alias_t {
    static constexpr const char _literal[] = "user_data";
    using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
    template <typename T>
    struct _member_t {
      T userData;
      T& operator()() { return userData; }
      const T& operator()() const { return userData; }
    };
  };
  using _traits = sqlpp::make_traits<sqlpp::text, sqlpp::tag::can_be_null>;
};
struct UpdateTime {
  struct _alias_t {
    static constexpr const char _literal[] = "update_time";
    using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
    template <typename T>
    struct _member_t {
      T updateTime;
      T& operator()() { return updateTime; }
      const T& operator()() const { return updateTime; }
    };
  };
  using _traits = sqlpp::make_traits<sqlpp::time_point, sqlpp::tag::can_be_null>;
};
struct MetaType {
  struct _alias_t {
    static constexpr const char _literal[] = "meta_type";
    using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
    template <typename T>
    struct _member_t {
      T metaType;
      T& operator()() { return metaType; }
      const T& operator()() const { return metaType; }
    };
  };
  using _traits = sqlpp::make_traits<sqlpp::integer, sqlpp::tag::can_be_null>;
};
struct Episode {
  struct _alias_t {
    static constexpr const char _literal[] = "episode";
    using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
    template <typename T>
    struct _member_t {
      T episode;
      T& operator()() { return episode; }
      const T& operator()() const { return episode; }
    };
  };
  using _traits = sqlpp::make_traits<sqlpp::integer, sqlpp::tag::can_be_null>;
};
struct Shot {
  struct _alias_t {
    static constexpr const char _literal[] = "shot";
    using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
    template <typename T>
    struct _member_t {
      T shot;
      T& operator()() { return shot; }
      const T& operator()() const { return shot; }
    };
  };
  using _traits = sqlpp::make_traits<sqlpp::integer, sqlpp::tag::can_be_null>;
};
struct Season {
  struct _alias_t {
    static constexpr const char _literal[] = "season";
    using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
    template <typename T>
    struct _member_t {
      T season;
      T& operator()() { return season; }
      const T& operator()() const { return season; }
    };
  };
  using _traits = sqlpp::make_traits<sqlpp::integer, sqlpp::tag::can_be_null>;
};
struct AssetsP {
  struct _alias_t {
    static constexpr const char _literal[] = "assets_p";
    using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
    template <typename T>
    struct _member_t {
      T assetsP;
      T& operator()() { return assetsP; }
      const T& operator()() const { return assetsP; }
    };
  };
  using _traits = sqlpp::make_traits<sqlpp::text, sqlpp::tag::can_be_null>;
};
struct UuidData {
  struct _alias_t {
    static constexpr const char _literal[] = "uuid_data";
    using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
    template <typename T>
    struct _member_t {
      T uuidData;
      T& operator()() { return uuidData; }
      const T& operator()() const { return uuidData; }
    };
  };
  using _traits = sqlpp::make_traits<sqlpp::text, sqlpp::tag::can_be_null>;
};
}  // namespace Metadatatab_

struct Metadatatab : sqlpp::table_t<Metadatatab,
                                    Metadatatab_::Id,
                                    Metadatatab_::Parent,
                                    Metadatatab_::UuidPath,
                                    Metadatatab_::UserData,
                                    Metadatatab_::UpdateTime,
                                    Metadatatab_::MetaType,
                                    Metadatatab_::Episode,
                                    Metadatatab_::Shot,
                                    Metadatatab_::Season,
                                    Metadatatab_::AssetsP,
                                    Metadatatab_::UuidData> {
  struct _alias_t {
    static constexpr const char _literal[] = "metadatatab";
    using _name_t                          = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
    template <typename T>
    struct _member_t {
      T metadatatab;
      T& operator()() { return metadatatab; }
      const T& operator()() const { return metadatatab; }
    };
  };
};
}  // namespace doodle
#endif
