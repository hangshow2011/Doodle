// generated by F:/vcpkg/installed/x64-windows/scripts/sqlpp11-ddl2cpp ./core/000-metadatatab.sql ./core/MetadataTabSql doodle
#ifndef DOODLE_METADATATABSQL_H
#define DOODLE_METADATATABSQL_H

#include <sqlpp11/table.h>
#include <sqlpp11/data_types.h>
#include <sqlpp11/char_sequence.h>

namespace doodle
{
  namespace MetadataTab_
  {
    struct Id
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "id";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T id;
            T& operator()() { return id; }
            const T& operator()() const { return id; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::bigint_unsigned, sqlpp::tag::require_insert>;
    };
    struct Parent
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "parent";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T parent;
            T& operator()() { return parent; }
            const T& operator()() const { return parent; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::bigint_unsigned, sqlpp::tag::can_be_null>;
    };
    struct Path
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "path";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T path;
            T& operator()() { return path; }
            const T& operator()() const { return path; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::text, sqlpp::tag::can_be_null>;
    };
    struct UpdateTime
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "update_time";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T updateTime;
            T& operator()() { return updateTime; }
            const T& operator()() const { return updateTime; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::time_point>;
    };
  } // namespace MetadataTab_

  struct MetadataTab: sqlpp::table_t<MetadataTab,
               MetadataTab_::Id,
               MetadataTab_::Parent,
               MetadataTab_::Path,
               MetadataTab_::UpdateTime>
  {
    struct _alias_t
    {
      static constexpr const char _literal[] =  "metadataTab";
      using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
      template<typename T>
      struct _member_t
      {
        T metadataTab;
        T& operator()() { return metadataTab; }
        const T& operator()() const { return metadataTab; }
      };
    };
  };
} // namespace doodle
#endif
