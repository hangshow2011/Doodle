// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: metadata_server.proto

#include "metadata_server.pb.h"
#include "metadata_server.grpc.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace doodle {

static const char* MetadataServer_method_names[] = {
  "/doodle.MetadataServer/InstallMetadata",
  "/doodle.MetadataServer/DeleteMetadata",
  "/doodle.MetadataServer/UpdateMetadata",
  "/doodle.MetadataServer/FilterMetadata",
  "/doodle.MetadataServer/InstallUserDate",
  "/doodle.MetadataServer/UpdateUserDate",
  "/doodle.MetadataServer/DeleteUserDate",
  "/doodle.MetadataServer/FilterUserDate",
};

std::unique_ptr< MetadataServer::Stub> MetadataServer::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< MetadataServer::Stub> stub(new MetadataServer::Stub(channel));
  return stub;
}

MetadataServer::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_InstallMetadata_(MetadataServer_method_names[0], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_DeleteMetadata_(MetadataServer_method_names[1], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_UpdateMetadata_(MetadataServer_method_names[2], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_FilterMetadata_(MetadataServer_method_names[3], ::grpc::internal::RpcMethod::SERVER_STREAMING, channel)
  , rpcmethod_InstallUserDate_(MetadataServer_method_names[4], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_UpdateUserDate_(MetadataServer_method_names[5], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_DeleteUserDate_(MetadataServer_method_names[6], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_FilterUserDate_(MetadataServer_method_names[7], ::grpc::internal::RpcMethod::SERVER_STREAMING, channel)
  {}

::grpc::Status MetadataServer::Stub::InstallMetadata(::grpc::ClientContext* context, const ::doodle::metadata_database& request, ::doodle::metadata_database* response) {
  return ::grpc::internal::BlockingUnaryCall< ::doodle::metadata_database, ::doodle::metadata_database, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_InstallMetadata_, context, request, response);
}

void MetadataServer::Stub::experimental_async::InstallMetadata(::grpc::ClientContext* context, const ::doodle::metadata_database* request, ::doodle::metadata_database* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::doodle::metadata_database, ::doodle::metadata_database, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_InstallMetadata_, context, request, response, std::move(f));
}

void MetadataServer::Stub::experimental_async::InstallMetadata(::grpc::ClientContext* context, const ::doodle::metadata_database* request, ::doodle::metadata_database* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_InstallMetadata_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::doodle::metadata_database>* MetadataServer::Stub::PrepareAsyncInstallMetadataRaw(::grpc::ClientContext* context, const ::doodle::metadata_database& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::doodle::metadata_database, ::doodle::metadata_database, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_InstallMetadata_, context, request);
}

::grpc::ClientAsyncResponseReader< ::doodle::metadata_database>* MetadataServer::Stub::AsyncInstallMetadataRaw(::grpc::ClientContext* context, const ::doodle::metadata_database& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncInstallMetadataRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status MetadataServer::Stub::DeleteMetadata(::grpc::ClientContext* context, const ::doodle::metadata_database& request, ::doodle::metadata_database* response) {
  return ::grpc::internal::BlockingUnaryCall< ::doodle::metadata_database, ::doodle::metadata_database, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_DeleteMetadata_, context, request, response);
}

void MetadataServer::Stub::experimental_async::DeleteMetadata(::grpc::ClientContext* context, const ::doodle::metadata_database* request, ::doodle::metadata_database* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::doodle::metadata_database, ::doodle::metadata_database, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_DeleteMetadata_, context, request, response, std::move(f));
}

void MetadataServer::Stub::experimental_async::DeleteMetadata(::grpc::ClientContext* context, const ::doodle::metadata_database* request, ::doodle::metadata_database* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_DeleteMetadata_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::doodle::metadata_database>* MetadataServer::Stub::PrepareAsyncDeleteMetadataRaw(::grpc::ClientContext* context, const ::doodle::metadata_database& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::doodle::metadata_database, ::doodle::metadata_database, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_DeleteMetadata_, context, request);
}

::grpc::ClientAsyncResponseReader< ::doodle::metadata_database>* MetadataServer::Stub::AsyncDeleteMetadataRaw(::grpc::ClientContext* context, const ::doodle::metadata_database& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncDeleteMetadataRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status MetadataServer::Stub::UpdateMetadata(::grpc::ClientContext* context, const ::doodle::metadata_database& request, ::doodle::metadata_database* response) {
  return ::grpc::internal::BlockingUnaryCall< ::doodle::metadata_database, ::doodle::metadata_database, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_UpdateMetadata_, context, request, response);
}

void MetadataServer::Stub::experimental_async::UpdateMetadata(::grpc::ClientContext* context, const ::doodle::metadata_database* request, ::doodle::metadata_database* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::doodle::metadata_database, ::doodle::metadata_database, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_UpdateMetadata_, context, request, response, std::move(f));
}

void MetadataServer::Stub::experimental_async::UpdateMetadata(::grpc::ClientContext* context, const ::doodle::metadata_database* request, ::doodle::metadata_database* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_UpdateMetadata_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::doodle::metadata_database>* MetadataServer::Stub::PrepareAsyncUpdateMetadataRaw(::grpc::ClientContext* context, const ::doodle::metadata_database& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::doodle::metadata_database, ::doodle::metadata_database, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_UpdateMetadata_, context, request);
}

::grpc::ClientAsyncResponseReader< ::doodle::metadata_database>* MetadataServer::Stub::AsyncUpdateMetadataRaw(::grpc::ClientContext* context, const ::doodle::metadata_database& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncUpdateMetadataRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::ClientReader< ::doodle::metadata_database>* MetadataServer::Stub::FilterMetadataRaw(::grpc::ClientContext* context, const ::doodle::metadata_database_filter& request) {
  return ::grpc::internal::ClientReaderFactory< ::doodle::metadata_database>::Create(channel_.get(), rpcmethod_FilterMetadata_, context, request);
}

void MetadataServer::Stub::experimental_async::FilterMetadata(::grpc::ClientContext* context, const ::doodle::metadata_database_filter* request, ::grpc::experimental::ClientReadReactor< ::doodle::metadata_database>* reactor) {
  ::grpc::internal::ClientCallbackReaderFactory< ::doodle::metadata_database>::Create(stub_->channel_.get(), stub_->rpcmethod_FilterMetadata_, context, request, reactor);
}

::grpc::ClientAsyncReader< ::doodle::metadata_database>* MetadataServer::Stub::AsyncFilterMetadataRaw(::grpc::ClientContext* context, const ::doodle::metadata_database_filter& request, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::doodle::metadata_database>::Create(channel_.get(), cq, rpcmethod_FilterMetadata_, context, request, true, tag);
}

::grpc::ClientAsyncReader< ::doodle::metadata_database>* MetadataServer::Stub::PrepareAsyncFilterMetadataRaw(::grpc::ClientContext* context, const ::doodle::metadata_database_filter& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::doodle::metadata_database>::Create(channel_.get(), cq, rpcmethod_FilterMetadata_, context, request, false, nullptr);
}

::grpc::Status MetadataServer::Stub::InstallUserDate(::grpc::ClientContext* context, const ::doodle::user_database& request, ::doodle::user_database* response) {
  return ::grpc::internal::BlockingUnaryCall< ::doodle::user_database, ::doodle::user_database, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_InstallUserDate_, context, request, response);
}

void MetadataServer::Stub::experimental_async::InstallUserDate(::grpc::ClientContext* context, const ::doodle::user_database* request, ::doodle::user_database* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::doodle::user_database, ::doodle::user_database, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_InstallUserDate_, context, request, response, std::move(f));
}

void MetadataServer::Stub::experimental_async::InstallUserDate(::grpc::ClientContext* context, const ::doodle::user_database* request, ::doodle::user_database* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_InstallUserDate_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::doodle::user_database>* MetadataServer::Stub::PrepareAsyncInstallUserDateRaw(::grpc::ClientContext* context, const ::doodle::user_database& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::doodle::user_database, ::doodle::user_database, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_InstallUserDate_, context, request);
}

::grpc::ClientAsyncResponseReader< ::doodle::user_database>* MetadataServer::Stub::AsyncInstallUserDateRaw(::grpc::ClientContext* context, const ::doodle::user_database& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncInstallUserDateRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status MetadataServer::Stub::UpdateUserDate(::grpc::ClientContext* context, const ::doodle::user_database& request, ::doodle::user_database* response) {
  return ::grpc::internal::BlockingUnaryCall< ::doodle::user_database, ::doodle::user_database, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_UpdateUserDate_, context, request, response);
}

void MetadataServer::Stub::experimental_async::UpdateUserDate(::grpc::ClientContext* context, const ::doodle::user_database* request, ::doodle::user_database* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::doodle::user_database, ::doodle::user_database, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_UpdateUserDate_, context, request, response, std::move(f));
}

void MetadataServer::Stub::experimental_async::UpdateUserDate(::grpc::ClientContext* context, const ::doodle::user_database* request, ::doodle::user_database* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_UpdateUserDate_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::doodle::user_database>* MetadataServer::Stub::PrepareAsyncUpdateUserDateRaw(::grpc::ClientContext* context, const ::doodle::user_database& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::doodle::user_database, ::doodle::user_database, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_UpdateUserDate_, context, request);
}

::grpc::ClientAsyncResponseReader< ::doodle::user_database>* MetadataServer::Stub::AsyncUpdateUserDateRaw(::grpc::ClientContext* context, const ::doodle::user_database& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncUpdateUserDateRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status MetadataServer::Stub::DeleteUserDate(::grpc::ClientContext* context, const ::doodle::user_database_filter& request, ::doodle::user_database* response) {
  return ::grpc::internal::BlockingUnaryCall< ::doodle::user_database_filter, ::doodle::user_database, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_DeleteUserDate_, context, request, response);
}

void MetadataServer::Stub::experimental_async::DeleteUserDate(::grpc::ClientContext* context, const ::doodle::user_database_filter* request, ::doodle::user_database* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::doodle::user_database_filter, ::doodle::user_database, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_DeleteUserDate_, context, request, response, std::move(f));
}

void MetadataServer::Stub::experimental_async::DeleteUserDate(::grpc::ClientContext* context, const ::doodle::user_database_filter* request, ::doodle::user_database* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_DeleteUserDate_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::doodle::user_database>* MetadataServer::Stub::PrepareAsyncDeleteUserDateRaw(::grpc::ClientContext* context, const ::doodle::user_database_filter& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::doodle::user_database, ::doodle::user_database_filter, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_DeleteUserDate_, context, request);
}

::grpc::ClientAsyncResponseReader< ::doodle::user_database>* MetadataServer::Stub::AsyncDeleteUserDateRaw(::grpc::ClientContext* context, const ::doodle::user_database_filter& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncDeleteUserDateRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::ClientReader< ::doodle::user_database>* MetadataServer::Stub::FilterUserDateRaw(::grpc::ClientContext* context, const ::doodle::user_database_filter& request) {
  return ::grpc::internal::ClientReaderFactory< ::doodle::user_database>::Create(channel_.get(), rpcmethod_FilterUserDate_, context, request);
}

void MetadataServer::Stub::experimental_async::FilterUserDate(::grpc::ClientContext* context, const ::doodle::user_database_filter* request, ::grpc::experimental::ClientReadReactor< ::doodle::user_database>* reactor) {
  ::grpc::internal::ClientCallbackReaderFactory< ::doodle::user_database>::Create(stub_->channel_.get(), stub_->rpcmethod_FilterUserDate_, context, request, reactor);
}

::grpc::ClientAsyncReader< ::doodle::user_database>* MetadataServer::Stub::AsyncFilterUserDateRaw(::grpc::ClientContext* context, const ::doodle::user_database_filter& request, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::doodle::user_database>::Create(channel_.get(), cq, rpcmethod_FilterUserDate_, context, request, true, tag);
}

::grpc::ClientAsyncReader< ::doodle::user_database>* MetadataServer::Stub::PrepareAsyncFilterUserDateRaw(::grpc::ClientContext* context, const ::doodle::user_database_filter& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::doodle::user_database>::Create(channel_.get(), cq, rpcmethod_FilterUserDate_, context, request, false, nullptr);
}

MetadataServer::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      MetadataServer_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< MetadataServer::Service, ::doodle::metadata_database, ::doodle::metadata_database, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](MetadataServer::Service* service,
             ::grpc::ServerContext* ctx,
             const ::doodle::metadata_database* req,
             ::doodle::metadata_database* resp) {
               return service->InstallMetadata(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      MetadataServer_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< MetadataServer::Service, ::doodle::metadata_database, ::doodle::metadata_database, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](MetadataServer::Service* service,
             ::grpc::ServerContext* ctx,
             const ::doodle::metadata_database* req,
             ::doodle::metadata_database* resp) {
               return service->DeleteMetadata(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      MetadataServer_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< MetadataServer::Service, ::doodle::metadata_database, ::doodle::metadata_database, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](MetadataServer::Service* service,
             ::grpc::ServerContext* ctx,
             const ::doodle::metadata_database* req,
             ::doodle::metadata_database* resp) {
               return service->UpdateMetadata(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      MetadataServer_method_names[3],
      ::grpc::internal::RpcMethod::SERVER_STREAMING,
      new ::grpc::internal::ServerStreamingHandler< MetadataServer::Service, ::doodle::metadata_database_filter, ::doodle::metadata_database>(
          [](MetadataServer::Service* service,
             ::grpc::ServerContext* ctx,
             const ::doodle::metadata_database_filter* req,
             ::grpc::ServerWriter<::doodle::metadata_database>* writer) {
               return service->FilterMetadata(ctx, req, writer);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      MetadataServer_method_names[4],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< MetadataServer::Service, ::doodle::user_database, ::doodle::user_database, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](MetadataServer::Service* service,
             ::grpc::ServerContext* ctx,
             const ::doodle::user_database* req,
             ::doodle::user_database* resp) {
               return service->InstallUserDate(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      MetadataServer_method_names[5],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< MetadataServer::Service, ::doodle::user_database, ::doodle::user_database, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](MetadataServer::Service* service,
             ::grpc::ServerContext* ctx,
             const ::doodle::user_database* req,
             ::doodle::user_database* resp) {
               return service->UpdateUserDate(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      MetadataServer_method_names[6],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< MetadataServer::Service, ::doodle::user_database_filter, ::doodle::user_database, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](MetadataServer::Service* service,
             ::grpc::ServerContext* ctx,
             const ::doodle::user_database_filter* req,
             ::doodle::user_database* resp) {
               return service->DeleteUserDate(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      MetadataServer_method_names[7],
      ::grpc::internal::RpcMethod::SERVER_STREAMING,
      new ::grpc::internal::ServerStreamingHandler< MetadataServer::Service, ::doodle::user_database_filter, ::doodle::user_database>(
          [](MetadataServer::Service* service,
             ::grpc::ServerContext* ctx,
             const ::doodle::user_database_filter* req,
             ::grpc::ServerWriter<::doodle::user_database>* writer) {
               return service->FilterUserDate(ctx, req, writer);
             }, this)));
}

MetadataServer::Service::~Service() {
}

::grpc::Status MetadataServer::Service::InstallMetadata(::grpc::ServerContext* context, const ::doodle::metadata_database* request, ::doodle::metadata_database* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status MetadataServer::Service::DeleteMetadata(::grpc::ServerContext* context, const ::doodle::metadata_database* request, ::doodle::metadata_database* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status MetadataServer::Service::UpdateMetadata(::grpc::ServerContext* context, const ::doodle::metadata_database* request, ::doodle::metadata_database* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status MetadataServer::Service::FilterMetadata(::grpc::ServerContext* context, const ::doodle::metadata_database_filter* request, ::grpc::ServerWriter< ::doodle::metadata_database>* writer) {
  (void) context;
  (void) request;
  (void) writer;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status MetadataServer::Service::InstallUserDate(::grpc::ServerContext* context, const ::doodle::user_database* request, ::doodle::user_database* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status MetadataServer::Service::UpdateUserDate(::grpc::ServerContext* context, const ::doodle::user_database* request, ::doodle::user_database* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status MetadataServer::Service::DeleteUserDate(::grpc::ServerContext* context, const ::doodle::user_database_filter* request, ::doodle::user_database* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status MetadataServer::Service::FilterUserDate(::grpc::ServerContext* context, const ::doodle::user_database_filter* request, ::grpc::ServerWriter< ::doodle::user_database>* writer) {
  (void) context;
  (void) request;
  (void) writer;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace doodle

