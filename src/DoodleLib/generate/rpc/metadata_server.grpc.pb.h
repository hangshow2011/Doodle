// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: metadata_server.proto
#ifndef GRPC_metadata_5fserver_2eproto__INCLUDED
#define GRPC_metadata_5fserver_2eproto__INCLUDED

#include "metadata_server.pb.h"

#include <functional>
#include <grpc/impl/codegen/port_platform.h>
#include <grpcpp/impl/codegen/async_generic_service.h>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/client_context.h>
#include <grpcpp/impl/codegen/completion_queue.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/proto_utils.h>
#include <grpcpp/impl/codegen/rpc_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/status.h>
#include <grpcpp/impl/codegen/stub_options.h>
#include <grpcpp/impl/codegen/sync_stream.h>

namespace doodle {

class MetadataServer final {
 public:
  static constexpr char const* service_full_name() {
    return "doodle.MetadataServer";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    virtual ::grpc::Status InstallMetadata(::grpc::ClientContext* context, const ::doodle::metadata_database& request, ::doodle::metadata_database* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::doodle::metadata_database>> AsyncInstallMetadata(::grpc::ClientContext* context, const ::doodle::metadata_database& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::doodle::metadata_database>>(AsyncInstallMetadataRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::doodle::metadata_database>> PrepareAsyncInstallMetadata(::grpc::ClientContext* context, const ::doodle::metadata_database& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::doodle::metadata_database>>(PrepareAsyncInstallMetadataRaw(context, request, cq));
    }
    virtual ::grpc::Status DeleteMetadata(::grpc::ClientContext* context, const ::doodle::metadata_database& request, ::doodle::metadata_database* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::doodle::metadata_database>> AsyncDeleteMetadata(::grpc::ClientContext* context, const ::doodle::metadata_database& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::doodle::metadata_database>>(AsyncDeleteMetadataRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::doodle::metadata_database>> PrepareAsyncDeleteMetadata(::grpc::ClientContext* context, const ::doodle::metadata_database& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::doodle::metadata_database>>(PrepareAsyncDeleteMetadataRaw(context, request, cq));
    }
    virtual ::grpc::Status UpdateMetadata(::grpc::ClientContext* context, const ::doodle::metadata_database& request, ::doodle::metadata_database* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::doodle::metadata_database>> AsyncUpdateMetadata(::grpc::ClientContext* context, const ::doodle::metadata_database& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::doodle::metadata_database>>(AsyncUpdateMetadataRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::doodle::metadata_database>> PrepareAsyncUpdateMetadata(::grpc::ClientContext* context, const ::doodle::metadata_database& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::doodle::metadata_database>>(PrepareAsyncUpdateMetadataRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientReaderInterface< ::doodle::metadata_database>> FilterMetadata(::grpc::ClientContext* context, const ::doodle::metadata_database_filter& request) {
      return std::unique_ptr< ::grpc::ClientReaderInterface< ::doodle::metadata_database>>(FilterMetadataRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::doodle::metadata_database>> AsyncFilterMetadata(::grpc::ClientContext* context, const ::doodle::metadata_database_filter& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::doodle::metadata_database>>(AsyncFilterMetadataRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::doodle::metadata_database>> PrepareAsyncFilterMetadata(::grpc::ClientContext* context, const ::doodle::metadata_database_filter& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::doodle::metadata_database>>(PrepareAsyncFilterMetadataRaw(context, request, cq));
    }
    virtual ::grpc::Status InstallUserDate(::grpc::ClientContext* context, const ::doodle::user_database& request, ::doodle::user_database* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::doodle::user_database>> AsyncInstallUserDate(::grpc::ClientContext* context, const ::doodle::user_database& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::doodle::user_database>>(AsyncInstallUserDateRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::doodle::user_database>> PrepareAsyncInstallUserDate(::grpc::ClientContext* context, const ::doodle::user_database& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::doodle::user_database>>(PrepareAsyncInstallUserDateRaw(context, request, cq));
    }
    virtual ::grpc::Status UpdateUserDate(::grpc::ClientContext* context, const ::doodle::user_database& request, ::doodle::user_database* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::doodle::user_database>> AsyncUpdateUserDate(::grpc::ClientContext* context, const ::doodle::user_database& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::doodle::user_database>>(AsyncUpdateUserDateRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::doodle::user_database>> PrepareAsyncUpdateUserDate(::grpc::ClientContext* context, const ::doodle::user_database& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::doodle::user_database>>(PrepareAsyncUpdateUserDateRaw(context, request, cq));
    }
    virtual ::grpc::Status DeleteUserDate(::grpc::ClientContext* context, const ::doodle::user_database_filter& request, ::doodle::user_database* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::doodle::user_database>> AsyncDeleteUserDate(::grpc::ClientContext* context, const ::doodle::user_database_filter& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::doodle::user_database>>(AsyncDeleteUserDateRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::doodle::user_database>> PrepareAsyncDeleteUserDate(::grpc::ClientContext* context, const ::doodle::user_database_filter& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::doodle::user_database>>(PrepareAsyncDeleteUserDateRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientReaderInterface< ::doodle::user_database>> FilterUserDate(::grpc::ClientContext* context, const ::doodle::user_database_filter& request) {
      return std::unique_ptr< ::grpc::ClientReaderInterface< ::doodle::user_database>>(FilterUserDateRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::doodle::user_database>> AsyncFilterUserDate(::grpc::ClientContext* context, const ::doodle::user_database_filter& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::doodle::user_database>>(AsyncFilterUserDateRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::doodle::user_database>> PrepareAsyncFilterUserDate(::grpc::ClientContext* context, const ::doodle::user_database_filter& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::doodle::user_database>>(PrepareAsyncFilterUserDateRaw(context, request, cq));
    }
    class experimental_async_interface {
     public:
      virtual ~experimental_async_interface() {}
      virtual void InstallMetadata(::grpc::ClientContext* context, const ::doodle::metadata_database* request, ::doodle::metadata_database* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void InstallMetadata(::grpc::ClientContext* context, const ::doodle::metadata_database* request, ::doodle::metadata_database* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void InstallMetadata(::grpc::ClientContext* context, const ::doodle::metadata_database* request, ::doodle::metadata_database* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      virtual void DeleteMetadata(::grpc::ClientContext* context, const ::doodle::metadata_database* request, ::doodle::metadata_database* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void DeleteMetadata(::grpc::ClientContext* context, const ::doodle::metadata_database* request, ::doodle::metadata_database* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void DeleteMetadata(::grpc::ClientContext* context, const ::doodle::metadata_database* request, ::doodle::metadata_database* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      virtual void UpdateMetadata(::grpc::ClientContext* context, const ::doodle::metadata_database* request, ::doodle::metadata_database* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void UpdateMetadata(::grpc::ClientContext* context, const ::doodle::metadata_database* request, ::doodle::metadata_database* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void UpdateMetadata(::grpc::ClientContext* context, const ::doodle::metadata_database* request, ::doodle::metadata_database* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void FilterMetadata(::grpc::ClientContext* context, const ::doodle::metadata_database_filter* request, ::grpc::ClientReadReactor< ::doodle::metadata_database>* reactor) = 0;
      #else
      virtual void FilterMetadata(::grpc::ClientContext* context, const ::doodle::metadata_database_filter* request, ::grpc::experimental::ClientReadReactor< ::doodle::metadata_database>* reactor) = 0;
      #endif
      virtual void InstallUserDate(::grpc::ClientContext* context, const ::doodle::user_database* request, ::doodle::user_database* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void InstallUserDate(::grpc::ClientContext* context, const ::doodle::user_database* request, ::doodle::user_database* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void InstallUserDate(::grpc::ClientContext* context, const ::doodle::user_database* request, ::doodle::user_database* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      virtual void UpdateUserDate(::grpc::ClientContext* context, const ::doodle::user_database* request, ::doodle::user_database* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void UpdateUserDate(::grpc::ClientContext* context, const ::doodle::user_database* request, ::doodle::user_database* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void UpdateUserDate(::grpc::ClientContext* context, const ::doodle::user_database* request, ::doodle::user_database* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      virtual void DeleteUserDate(::grpc::ClientContext* context, const ::doodle::user_database_filter* request, ::doodle::user_database* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void DeleteUserDate(::grpc::ClientContext* context, const ::doodle::user_database_filter* request, ::doodle::user_database* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void DeleteUserDate(::grpc::ClientContext* context, const ::doodle::user_database_filter* request, ::doodle::user_database* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void FilterUserDate(::grpc::ClientContext* context, const ::doodle::user_database_filter* request, ::grpc::ClientReadReactor< ::doodle::user_database>* reactor) = 0;
      #else
      virtual void FilterUserDate(::grpc::ClientContext* context, const ::doodle::user_database_filter* request, ::grpc::experimental::ClientReadReactor< ::doodle::user_database>* reactor) = 0;
      #endif
    };
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    typedef class experimental_async_interface async_interface;
    #endif
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    async_interface* async() { return experimental_async(); }
    #endif
    virtual class experimental_async_interface* experimental_async() { return nullptr; }
  private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::doodle::metadata_database>* AsyncInstallMetadataRaw(::grpc::ClientContext* context, const ::doodle::metadata_database& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::doodle::metadata_database>* PrepareAsyncInstallMetadataRaw(::grpc::ClientContext* context, const ::doodle::metadata_database& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::doodle::metadata_database>* AsyncDeleteMetadataRaw(::grpc::ClientContext* context, const ::doodle::metadata_database& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::doodle::metadata_database>* PrepareAsyncDeleteMetadataRaw(::grpc::ClientContext* context, const ::doodle::metadata_database& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::doodle::metadata_database>* AsyncUpdateMetadataRaw(::grpc::ClientContext* context, const ::doodle::metadata_database& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::doodle::metadata_database>* PrepareAsyncUpdateMetadataRaw(::grpc::ClientContext* context, const ::doodle::metadata_database& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientReaderInterface< ::doodle::metadata_database>* FilterMetadataRaw(::grpc::ClientContext* context, const ::doodle::metadata_database_filter& request) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::doodle::metadata_database>* AsyncFilterMetadataRaw(::grpc::ClientContext* context, const ::doodle::metadata_database_filter& request, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::doodle::metadata_database>* PrepareAsyncFilterMetadataRaw(::grpc::ClientContext* context, const ::doodle::metadata_database_filter& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::doodle::user_database>* AsyncInstallUserDateRaw(::grpc::ClientContext* context, const ::doodle::user_database& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::doodle::user_database>* PrepareAsyncInstallUserDateRaw(::grpc::ClientContext* context, const ::doodle::user_database& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::doodle::user_database>* AsyncUpdateUserDateRaw(::grpc::ClientContext* context, const ::doodle::user_database& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::doodle::user_database>* PrepareAsyncUpdateUserDateRaw(::grpc::ClientContext* context, const ::doodle::user_database& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::doodle::user_database>* AsyncDeleteUserDateRaw(::grpc::ClientContext* context, const ::doodle::user_database_filter& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::doodle::user_database>* PrepareAsyncDeleteUserDateRaw(::grpc::ClientContext* context, const ::doodle::user_database_filter& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientReaderInterface< ::doodle::user_database>* FilterUserDateRaw(::grpc::ClientContext* context, const ::doodle::user_database_filter& request) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::doodle::user_database>* AsyncFilterUserDateRaw(::grpc::ClientContext* context, const ::doodle::user_database_filter& request, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::doodle::user_database>* PrepareAsyncFilterUserDateRaw(::grpc::ClientContext* context, const ::doodle::user_database_filter& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel);
    ::grpc::Status InstallMetadata(::grpc::ClientContext* context, const ::doodle::metadata_database& request, ::doodle::metadata_database* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::doodle::metadata_database>> AsyncInstallMetadata(::grpc::ClientContext* context, const ::doodle::metadata_database& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::doodle::metadata_database>>(AsyncInstallMetadataRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::doodle::metadata_database>> PrepareAsyncInstallMetadata(::grpc::ClientContext* context, const ::doodle::metadata_database& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::doodle::metadata_database>>(PrepareAsyncInstallMetadataRaw(context, request, cq));
    }
    ::grpc::Status DeleteMetadata(::grpc::ClientContext* context, const ::doodle::metadata_database& request, ::doodle::metadata_database* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::doodle::metadata_database>> AsyncDeleteMetadata(::grpc::ClientContext* context, const ::doodle::metadata_database& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::doodle::metadata_database>>(AsyncDeleteMetadataRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::doodle::metadata_database>> PrepareAsyncDeleteMetadata(::grpc::ClientContext* context, const ::doodle::metadata_database& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::doodle::metadata_database>>(PrepareAsyncDeleteMetadataRaw(context, request, cq));
    }
    ::grpc::Status UpdateMetadata(::grpc::ClientContext* context, const ::doodle::metadata_database& request, ::doodle::metadata_database* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::doodle::metadata_database>> AsyncUpdateMetadata(::grpc::ClientContext* context, const ::doodle::metadata_database& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::doodle::metadata_database>>(AsyncUpdateMetadataRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::doodle::metadata_database>> PrepareAsyncUpdateMetadata(::grpc::ClientContext* context, const ::doodle::metadata_database& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::doodle::metadata_database>>(PrepareAsyncUpdateMetadataRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientReader< ::doodle::metadata_database>> FilterMetadata(::grpc::ClientContext* context, const ::doodle::metadata_database_filter& request) {
      return std::unique_ptr< ::grpc::ClientReader< ::doodle::metadata_database>>(FilterMetadataRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::doodle::metadata_database>> AsyncFilterMetadata(::grpc::ClientContext* context, const ::doodle::metadata_database_filter& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::doodle::metadata_database>>(AsyncFilterMetadataRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::doodle::metadata_database>> PrepareAsyncFilterMetadata(::grpc::ClientContext* context, const ::doodle::metadata_database_filter& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::doodle::metadata_database>>(PrepareAsyncFilterMetadataRaw(context, request, cq));
    }
    ::grpc::Status InstallUserDate(::grpc::ClientContext* context, const ::doodle::user_database& request, ::doodle::user_database* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::doodle::user_database>> AsyncInstallUserDate(::grpc::ClientContext* context, const ::doodle::user_database& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::doodle::user_database>>(AsyncInstallUserDateRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::doodle::user_database>> PrepareAsyncInstallUserDate(::grpc::ClientContext* context, const ::doodle::user_database& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::doodle::user_database>>(PrepareAsyncInstallUserDateRaw(context, request, cq));
    }
    ::grpc::Status UpdateUserDate(::grpc::ClientContext* context, const ::doodle::user_database& request, ::doodle::user_database* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::doodle::user_database>> AsyncUpdateUserDate(::grpc::ClientContext* context, const ::doodle::user_database& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::doodle::user_database>>(AsyncUpdateUserDateRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::doodle::user_database>> PrepareAsyncUpdateUserDate(::grpc::ClientContext* context, const ::doodle::user_database& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::doodle::user_database>>(PrepareAsyncUpdateUserDateRaw(context, request, cq));
    }
    ::grpc::Status DeleteUserDate(::grpc::ClientContext* context, const ::doodle::user_database_filter& request, ::doodle::user_database* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::doodle::user_database>> AsyncDeleteUserDate(::grpc::ClientContext* context, const ::doodle::user_database_filter& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::doodle::user_database>>(AsyncDeleteUserDateRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::doodle::user_database>> PrepareAsyncDeleteUserDate(::grpc::ClientContext* context, const ::doodle::user_database_filter& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::doodle::user_database>>(PrepareAsyncDeleteUserDateRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientReader< ::doodle::user_database>> FilterUserDate(::grpc::ClientContext* context, const ::doodle::user_database_filter& request) {
      return std::unique_ptr< ::grpc::ClientReader< ::doodle::user_database>>(FilterUserDateRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::doodle::user_database>> AsyncFilterUserDate(::grpc::ClientContext* context, const ::doodle::user_database_filter& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::doodle::user_database>>(AsyncFilterUserDateRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::doodle::user_database>> PrepareAsyncFilterUserDate(::grpc::ClientContext* context, const ::doodle::user_database_filter& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::doodle::user_database>>(PrepareAsyncFilterUserDateRaw(context, request, cq));
    }
    class experimental_async final :
      public StubInterface::experimental_async_interface {
     public:
      void InstallMetadata(::grpc::ClientContext* context, const ::doodle::metadata_database* request, ::doodle::metadata_database* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void InstallMetadata(::grpc::ClientContext* context, const ::doodle::metadata_database* request, ::doodle::metadata_database* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void InstallMetadata(::grpc::ClientContext* context, const ::doodle::metadata_database* request, ::doodle::metadata_database* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void DeleteMetadata(::grpc::ClientContext* context, const ::doodle::metadata_database* request, ::doodle::metadata_database* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void DeleteMetadata(::grpc::ClientContext* context, const ::doodle::metadata_database* request, ::doodle::metadata_database* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void DeleteMetadata(::grpc::ClientContext* context, const ::doodle::metadata_database* request, ::doodle::metadata_database* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void UpdateMetadata(::grpc::ClientContext* context, const ::doodle::metadata_database* request, ::doodle::metadata_database* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void UpdateMetadata(::grpc::ClientContext* context, const ::doodle::metadata_database* request, ::doodle::metadata_database* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void UpdateMetadata(::grpc::ClientContext* context, const ::doodle::metadata_database* request, ::doodle::metadata_database* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void FilterMetadata(::grpc::ClientContext* context, const ::doodle::metadata_database_filter* request, ::grpc::ClientReadReactor< ::doodle::metadata_database>* reactor) override;
      #else
      void FilterMetadata(::grpc::ClientContext* context, const ::doodle::metadata_database_filter* request, ::grpc::experimental::ClientReadReactor< ::doodle::metadata_database>* reactor) override;
      #endif
      void InstallUserDate(::grpc::ClientContext* context, const ::doodle::user_database* request, ::doodle::user_database* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void InstallUserDate(::grpc::ClientContext* context, const ::doodle::user_database* request, ::doodle::user_database* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void InstallUserDate(::grpc::ClientContext* context, const ::doodle::user_database* request, ::doodle::user_database* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void UpdateUserDate(::grpc::ClientContext* context, const ::doodle::user_database* request, ::doodle::user_database* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void UpdateUserDate(::grpc::ClientContext* context, const ::doodle::user_database* request, ::doodle::user_database* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void UpdateUserDate(::grpc::ClientContext* context, const ::doodle::user_database* request, ::doodle::user_database* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void DeleteUserDate(::grpc::ClientContext* context, const ::doodle::user_database_filter* request, ::doodle::user_database* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void DeleteUserDate(::grpc::ClientContext* context, const ::doodle::user_database_filter* request, ::doodle::user_database* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void DeleteUserDate(::grpc::ClientContext* context, const ::doodle::user_database_filter* request, ::doodle::user_database* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void FilterUserDate(::grpc::ClientContext* context, const ::doodle::user_database_filter* request, ::grpc::ClientReadReactor< ::doodle::user_database>* reactor) override;
      #else
      void FilterUserDate(::grpc::ClientContext* context, const ::doodle::user_database_filter* request, ::grpc::experimental::ClientReadReactor< ::doodle::user_database>* reactor) override;
      #endif
     private:
      friend class Stub;
      explicit experimental_async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class experimental_async_interface* experimental_async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class experimental_async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::doodle::metadata_database>* AsyncInstallMetadataRaw(::grpc::ClientContext* context, const ::doodle::metadata_database& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::doodle::metadata_database>* PrepareAsyncInstallMetadataRaw(::grpc::ClientContext* context, const ::doodle::metadata_database& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::doodle::metadata_database>* AsyncDeleteMetadataRaw(::grpc::ClientContext* context, const ::doodle::metadata_database& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::doodle::metadata_database>* PrepareAsyncDeleteMetadataRaw(::grpc::ClientContext* context, const ::doodle::metadata_database& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::doodle::metadata_database>* AsyncUpdateMetadataRaw(::grpc::ClientContext* context, const ::doodle::metadata_database& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::doodle::metadata_database>* PrepareAsyncUpdateMetadataRaw(::grpc::ClientContext* context, const ::doodle::metadata_database& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientReader< ::doodle::metadata_database>* FilterMetadataRaw(::grpc::ClientContext* context, const ::doodle::metadata_database_filter& request) override;
    ::grpc::ClientAsyncReader< ::doodle::metadata_database>* AsyncFilterMetadataRaw(::grpc::ClientContext* context, const ::doodle::metadata_database_filter& request, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncReader< ::doodle::metadata_database>* PrepareAsyncFilterMetadataRaw(::grpc::ClientContext* context, const ::doodle::metadata_database_filter& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::doodle::user_database>* AsyncInstallUserDateRaw(::grpc::ClientContext* context, const ::doodle::user_database& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::doodle::user_database>* PrepareAsyncInstallUserDateRaw(::grpc::ClientContext* context, const ::doodle::user_database& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::doodle::user_database>* AsyncUpdateUserDateRaw(::grpc::ClientContext* context, const ::doodle::user_database& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::doodle::user_database>* PrepareAsyncUpdateUserDateRaw(::grpc::ClientContext* context, const ::doodle::user_database& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::doodle::user_database>* AsyncDeleteUserDateRaw(::grpc::ClientContext* context, const ::doodle::user_database_filter& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::doodle::user_database>* PrepareAsyncDeleteUserDateRaw(::grpc::ClientContext* context, const ::doodle::user_database_filter& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientReader< ::doodle::user_database>* FilterUserDateRaw(::grpc::ClientContext* context, const ::doodle::user_database_filter& request) override;
    ::grpc::ClientAsyncReader< ::doodle::user_database>* AsyncFilterUserDateRaw(::grpc::ClientContext* context, const ::doodle::user_database_filter& request, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncReader< ::doodle::user_database>* PrepareAsyncFilterUserDateRaw(::grpc::ClientContext* context, const ::doodle::user_database_filter& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_InstallMetadata_;
    const ::grpc::internal::RpcMethod rpcmethod_DeleteMetadata_;
    const ::grpc::internal::RpcMethod rpcmethod_UpdateMetadata_;
    const ::grpc::internal::RpcMethod rpcmethod_FilterMetadata_;
    const ::grpc::internal::RpcMethod rpcmethod_InstallUserDate_;
    const ::grpc::internal::RpcMethod rpcmethod_UpdateUserDate_;
    const ::grpc::internal::RpcMethod rpcmethod_DeleteUserDate_;
    const ::grpc::internal::RpcMethod rpcmethod_FilterUserDate_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    virtual ::grpc::Status InstallMetadata(::grpc::ServerContext* context, const ::doodle::metadata_database* request, ::doodle::metadata_database* response);
    virtual ::grpc::Status DeleteMetadata(::grpc::ServerContext* context, const ::doodle::metadata_database* request, ::doodle::metadata_database* response);
    virtual ::grpc::Status UpdateMetadata(::grpc::ServerContext* context, const ::doodle::metadata_database* request, ::doodle::metadata_database* response);
    virtual ::grpc::Status FilterMetadata(::grpc::ServerContext* context, const ::doodle::metadata_database_filter* request, ::grpc::ServerWriter< ::doodle::metadata_database>* writer);
    virtual ::grpc::Status InstallUserDate(::grpc::ServerContext* context, const ::doodle::user_database* request, ::doodle::user_database* response);
    virtual ::grpc::Status UpdateUserDate(::grpc::ServerContext* context, const ::doodle::user_database* request, ::doodle::user_database* response);
    virtual ::grpc::Status DeleteUserDate(::grpc::ServerContext* context, const ::doodle::user_database_filter* request, ::doodle::user_database* response);
    virtual ::grpc::Status FilterUserDate(::grpc::ServerContext* context, const ::doodle::user_database_filter* request, ::grpc::ServerWriter< ::doodle::user_database>* writer);
  };
  template <class BaseClass>
  class WithAsyncMethod_InstallMetadata : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_InstallMetadata() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_InstallMetadata() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status InstallMetadata(::grpc::ServerContext* /*context*/, const ::doodle::metadata_database* /*request*/, ::doodle::metadata_database* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestInstallMetadata(::grpc::ServerContext* context, ::doodle::metadata_database* request, ::grpc::ServerAsyncResponseWriter< ::doodle::metadata_database>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_DeleteMetadata : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_DeleteMetadata() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_DeleteMetadata() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteMetadata(::grpc::ServerContext* /*context*/, const ::doodle::metadata_database* /*request*/, ::doodle::metadata_database* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDeleteMetadata(::grpc::ServerContext* context, ::doodle::metadata_database* request, ::grpc::ServerAsyncResponseWriter< ::doodle::metadata_database>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_UpdateMetadata : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_UpdateMetadata() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_UpdateMetadata() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateMetadata(::grpc::ServerContext* /*context*/, const ::doodle::metadata_database* /*request*/, ::doodle::metadata_database* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestUpdateMetadata(::grpc::ServerContext* context, ::doodle::metadata_database* request, ::grpc::ServerAsyncResponseWriter< ::doodle::metadata_database>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_FilterMetadata : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_FilterMetadata() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_FilterMetadata() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status FilterMetadata(::grpc::ServerContext* /*context*/, const ::doodle::metadata_database_filter* /*request*/, ::grpc::ServerWriter< ::doodle::metadata_database>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestFilterMetadata(::grpc::ServerContext* context, ::doodle::metadata_database_filter* request, ::grpc::ServerAsyncWriter< ::doodle::metadata_database>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(3, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_InstallUserDate : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_InstallUserDate() {
      ::grpc::Service::MarkMethodAsync(4);
    }
    ~WithAsyncMethod_InstallUserDate() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status InstallUserDate(::grpc::ServerContext* /*context*/, const ::doodle::user_database* /*request*/, ::doodle::user_database* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestInstallUserDate(::grpc::ServerContext* context, ::doodle::user_database* request, ::grpc::ServerAsyncResponseWriter< ::doodle::user_database>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_UpdateUserDate : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_UpdateUserDate() {
      ::grpc::Service::MarkMethodAsync(5);
    }
    ~WithAsyncMethod_UpdateUserDate() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateUserDate(::grpc::ServerContext* /*context*/, const ::doodle::user_database* /*request*/, ::doodle::user_database* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestUpdateUserDate(::grpc::ServerContext* context, ::doodle::user_database* request, ::grpc::ServerAsyncResponseWriter< ::doodle::user_database>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(5, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_DeleteUserDate : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_DeleteUserDate() {
      ::grpc::Service::MarkMethodAsync(6);
    }
    ~WithAsyncMethod_DeleteUserDate() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteUserDate(::grpc::ServerContext* /*context*/, const ::doodle::user_database_filter* /*request*/, ::doodle::user_database* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDeleteUserDate(::grpc::ServerContext* context, ::doodle::user_database_filter* request, ::grpc::ServerAsyncResponseWriter< ::doodle::user_database>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(6, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_FilterUserDate : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_FilterUserDate() {
      ::grpc::Service::MarkMethodAsync(7);
    }
    ~WithAsyncMethod_FilterUserDate() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status FilterUserDate(::grpc::ServerContext* /*context*/, const ::doodle::user_database_filter* /*request*/, ::grpc::ServerWriter< ::doodle::user_database>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestFilterUserDate(::grpc::ServerContext* context, ::doodle::user_database_filter* request, ::grpc::ServerAsyncWriter< ::doodle::user_database>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(7, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_InstallMetadata<WithAsyncMethod_DeleteMetadata<WithAsyncMethod_UpdateMetadata<WithAsyncMethod_FilterMetadata<WithAsyncMethod_InstallUserDate<WithAsyncMethod_UpdateUserDate<WithAsyncMethod_DeleteUserDate<WithAsyncMethod_FilterUserDate<Service > > > > > > > > AsyncService;
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_InstallMetadata : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_InstallMetadata() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::doodle::metadata_database, ::doodle::metadata_database>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::doodle::metadata_database* request, ::doodle::metadata_database* response) { return this->InstallMetadata(context, request, response); }));}
    void SetMessageAllocatorFor_InstallMetadata(
        ::grpc::experimental::MessageAllocator< ::doodle::metadata_database, ::doodle::metadata_database>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(0);
    #endif
      static_cast<::grpc::internal::CallbackUnaryHandler< ::doodle::metadata_database, ::doodle::metadata_database>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_InstallMetadata() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status InstallMetadata(::grpc::ServerContext* /*context*/, const ::doodle::metadata_database* /*request*/, ::doodle::metadata_database* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* InstallMetadata(
      ::grpc::CallbackServerContext* /*context*/, const ::doodle::metadata_database* /*request*/, ::doodle::metadata_database* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* InstallMetadata(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::doodle::metadata_database* /*request*/, ::doodle::metadata_database* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_DeleteMetadata : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_DeleteMetadata() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::doodle::metadata_database, ::doodle::metadata_database>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::doodle::metadata_database* request, ::doodle::metadata_database* response) { return this->DeleteMetadata(context, request, response); }));}
    void SetMessageAllocatorFor_DeleteMetadata(
        ::grpc::experimental::MessageAllocator< ::doodle::metadata_database, ::doodle::metadata_database>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(1);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(1);
    #endif
      static_cast<::grpc::internal::CallbackUnaryHandler< ::doodle::metadata_database, ::doodle::metadata_database>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_DeleteMetadata() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteMetadata(::grpc::ServerContext* /*context*/, const ::doodle::metadata_database* /*request*/, ::doodle::metadata_database* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* DeleteMetadata(
      ::grpc::CallbackServerContext* /*context*/, const ::doodle::metadata_database* /*request*/, ::doodle::metadata_database* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* DeleteMetadata(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::doodle::metadata_database* /*request*/, ::doodle::metadata_database* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_UpdateMetadata : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_UpdateMetadata() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::doodle::metadata_database, ::doodle::metadata_database>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::doodle::metadata_database* request, ::doodle::metadata_database* response) { return this->UpdateMetadata(context, request, response); }));}
    void SetMessageAllocatorFor_UpdateMetadata(
        ::grpc::experimental::MessageAllocator< ::doodle::metadata_database, ::doodle::metadata_database>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(2);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(2);
    #endif
      static_cast<::grpc::internal::CallbackUnaryHandler< ::doodle::metadata_database, ::doodle::metadata_database>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_UpdateMetadata() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateMetadata(::grpc::ServerContext* /*context*/, const ::doodle::metadata_database* /*request*/, ::doodle::metadata_database* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* UpdateMetadata(
      ::grpc::CallbackServerContext* /*context*/, const ::doodle::metadata_database* /*request*/, ::doodle::metadata_database* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* UpdateMetadata(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::doodle::metadata_database* /*request*/, ::doodle::metadata_database* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_FilterMetadata : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_FilterMetadata() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(3,
          new ::grpc::internal::CallbackServerStreamingHandler< ::doodle::metadata_database_filter, ::doodle::metadata_database>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::doodle::metadata_database_filter* request) { return this->FilterMetadata(context, request); }));
    }
    ~ExperimentalWithCallbackMethod_FilterMetadata() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status FilterMetadata(::grpc::ServerContext* /*context*/, const ::doodle::metadata_database_filter* /*request*/, ::grpc::ServerWriter< ::doodle::metadata_database>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerWriteReactor< ::doodle::metadata_database>* FilterMetadata(
      ::grpc::CallbackServerContext* /*context*/, const ::doodle::metadata_database_filter* /*request*/)
    #else
    virtual ::grpc::experimental::ServerWriteReactor< ::doodle::metadata_database>* FilterMetadata(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::doodle::metadata_database_filter* /*request*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_InstallUserDate : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_InstallUserDate() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(4,
          new ::grpc::internal::CallbackUnaryHandler< ::doodle::user_database, ::doodle::user_database>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::doodle::user_database* request, ::doodle::user_database* response) { return this->InstallUserDate(context, request, response); }));}
    void SetMessageAllocatorFor_InstallUserDate(
        ::grpc::experimental::MessageAllocator< ::doodle::user_database, ::doodle::user_database>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(4);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(4);
    #endif
      static_cast<::grpc::internal::CallbackUnaryHandler< ::doodle::user_database, ::doodle::user_database>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_InstallUserDate() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status InstallUserDate(::grpc::ServerContext* /*context*/, const ::doodle::user_database* /*request*/, ::doodle::user_database* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* InstallUserDate(
      ::grpc::CallbackServerContext* /*context*/, const ::doodle::user_database* /*request*/, ::doodle::user_database* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* InstallUserDate(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::doodle::user_database* /*request*/, ::doodle::user_database* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_UpdateUserDate : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_UpdateUserDate() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(5,
          new ::grpc::internal::CallbackUnaryHandler< ::doodle::user_database, ::doodle::user_database>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::doodle::user_database* request, ::doodle::user_database* response) { return this->UpdateUserDate(context, request, response); }));}
    void SetMessageAllocatorFor_UpdateUserDate(
        ::grpc::experimental::MessageAllocator< ::doodle::user_database, ::doodle::user_database>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(5);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(5);
    #endif
      static_cast<::grpc::internal::CallbackUnaryHandler< ::doodle::user_database, ::doodle::user_database>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_UpdateUserDate() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateUserDate(::grpc::ServerContext* /*context*/, const ::doodle::user_database* /*request*/, ::doodle::user_database* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* UpdateUserDate(
      ::grpc::CallbackServerContext* /*context*/, const ::doodle::user_database* /*request*/, ::doodle::user_database* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* UpdateUserDate(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::doodle::user_database* /*request*/, ::doodle::user_database* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_DeleteUserDate : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_DeleteUserDate() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(6,
          new ::grpc::internal::CallbackUnaryHandler< ::doodle::user_database_filter, ::doodle::user_database>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::doodle::user_database_filter* request, ::doodle::user_database* response) { return this->DeleteUserDate(context, request, response); }));}
    void SetMessageAllocatorFor_DeleteUserDate(
        ::grpc::experimental::MessageAllocator< ::doodle::user_database_filter, ::doodle::user_database>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(6);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(6);
    #endif
      static_cast<::grpc::internal::CallbackUnaryHandler< ::doodle::user_database_filter, ::doodle::user_database>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_DeleteUserDate() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteUserDate(::grpc::ServerContext* /*context*/, const ::doodle::user_database_filter* /*request*/, ::doodle::user_database* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* DeleteUserDate(
      ::grpc::CallbackServerContext* /*context*/, const ::doodle::user_database_filter* /*request*/, ::doodle::user_database* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* DeleteUserDate(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::doodle::user_database_filter* /*request*/, ::doodle::user_database* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_FilterUserDate : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_FilterUserDate() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(7,
          new ::grpc::internal::CallbackServerStreamingHandler< ::doodle::user_database_filter, ::doodle::user_database>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::doodle::user_database_filter* request) { return this->FilterUserDate(context, request); }));
    }
    ~ExperimentalWithCallbackMethod_FilterUserDate() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status FilterUserDate(::grpc::ServerContext* /*context*/, const ::doodle::user_database_filter* /*request*/, ::grpc::ServerWriter< ::doodle::user_database>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerWriteReactor< ::doodle::user_database>* FilterUserDate(
      ::grpc::CallbackServerContext* /*context*/, const ::doodle::user_database_filter* /*request*/)
    #else
    virtual ::grpc::experimental::ServerWriteReactor< ::doodle::user_database>* FilterUserDate(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::doodle::user_database_filter* /*request*/)
    #endif
      { return nullptr; }
  };
  #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
  typedef ExperimentalWithCallbackMethod_InstallMetadata<ExperimentalWithCallbackMethod_DeleteMetadata<ExperimentalWithCallbackMethod_UpdateMetadata<ExperimentalWithCallbackMethod_FilterMetadata<ExperimentalWithCallbackMethod_InstallUserDate<ExperimentalWithCallbackMethod_UpdateUserDate<ExperimentalWithCallbackMethod_DeleteUserDate<ExperimentalWithCallbackMethod_FilterUserDate<Service > > > > > > > > CallbackService;
  #endif

  typedef ExperimentalWithCallbackMethod_InstallMetadata<ExperimentalWithCallbackMethod_DeleteMetadata<ExperimentalWithCallbackMethod_UpdateMetadata<ExperimentalWithCallbackMethod_FilterMetadata<ExperimentalWithCallbackMethod_InstallUserDate<ExperimentalWithCallbackMethod_UpdateUserDate<ExperimentalWithCallbackMethod_DeleteUserDate<ExperimentalWithCallbackMethod_FilterUserDate<Service > > > > > > > > ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_InstallMetadata : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_InstallMetadata() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_InstallMetadata() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status InstallMetadata(::grpc::ServerContext* /*context*/, const ::doodle::metadata_database* /*request*/, ::doodle::metadata_database* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_DeleteMetadata : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_DeleteMetadata() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_DeleteMetadata() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteMetadata(::grpc::ServerContext* /*context*/, const ::doodle::metadata_database* /*request*/, ::doodle::metadata_database* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_UpdateMetadata : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_UpdateMetadata() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_UpdateMetadata() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateMetadata(::grpc::ServerContext* /*context*/, const ::doodle::metadata_database* /*request*/, ::doodle::metadata_database* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_FilterMetadata : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_FilterMetadata() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_FilterMetadata() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status FilterMetadata(::grpc::ServerContext* /*context*/, const ::doodle::metadata_database_filter* /*request*/, ::grpc::ServerWriter< ::doodle::metadata_database>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_InstallUserDate : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_InstallUserDate() {
      ::grpc::Service::MarkMethodGeneric(4);
    }
    ~WithGenericMethod_InstallUserDate() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status InstallUserDate(::grpc::ServerContext* /*context*/, const ::doodle::user_database* /*request*/, ::doodle::user_database* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_UpdateUserDate : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_UpdateUserDate() {
      ::grpc::Service::MarkMethodGeneric(5);
    }
    ~WithGenericMethod_UpdateUserDate() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateUserDate(::grpc::ServerContext* /*context*/, const ::doodle::user_database* /*request*/, ::doodle::user_database* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_DeleteUserDate : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_DeleteUserDate() {
      ::grpc::Service::MarkMethodGeneric(6);
    }
    ~WithGenericMethod_DeleteUserDate() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteUserDate(::grpc::ServerContext* /*context*/, const ::doodle::user_database_filter* /*request*/, ::doodle::user_database* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_FilterUserDate : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_FilterUserDate() {
      ::grpc::Service::MarkMethodGeneric(7);
    }
    ~WithGenericMethod_FilterUserDate() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status FilterUserDate(::grpc::ServerContext* /*context*/, const ::doodle::user_database_filter* /*request*/, ::grpc::ServerWriter< ::doodle::user_database>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_InstallMetadata : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_InstallMetadata() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_InstallMetadata() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status InstallMetadata(::grpc::ServerContext* /*context*/, const ::doodle::metadata_database* /*request*/, ::doodle::metadata_database* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestInstallMetadata(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_DeleteMetadata : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_DeleteMetadata() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_DeleteMetadata() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteMetadata(::grpc::ServerContext* /*context*/, const ::doodle::metadata_database* /*request*/, ::doodle::metadata_database* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDeleteMetadata(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_UpdateMetadata : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_UpdateMetadata() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_UpdateMetadata() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateMetadata(::grpc::ServerContext* /*context*/, const ::doodle::metadata_database* /*request*/, ::doodle::metadata_database* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestUpdateMetadata(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_FilterMetadata : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_FilterMetadata() {
      ::grpc::Service::MarkMethodRaw(3);
    }
    ~WithRawMethod_FilterMetadata() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status FilterMetadata(::grpc::ServerContext* /*context*/, const ::doodle::metadata_database_filter* /*request*/, ::grpc::ServerWriter< ::doodle::metadata_database>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestFilterMetadata(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncWriter< ::grpc::ByteBuffer>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(3, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_InstallUserDate : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_InstallUserDate() {
      ::grpc::Service::MarkMethodRaw(4);
    }
    ~WithRawMethod_InstallUserDate() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status InstallUserDate(::grpc::ServerContext* /*context*/, const ::doodle::user_database* /*request*/, ::doodle::user_database* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestInstallUserDate(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_UpdateUserDate : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_UpdateUserDate() {
      ::grpc::Service::MarkMethodRaw(5);
    }
    ~WithRawMethod_UpdateUserDate() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateUserDate(::grpc::ServerContext* /*context*/, const ::doodle::user_database* /*request*/, ::doodle::user_database* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestUpdateUserDate(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(5, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_DeleteUserDate : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_DeleteUserDate() {
      ::grpc::Service::MarkMethodRaw(6);
    }
    ~WithRawMethod_DeleteUserDate() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteUserDate(::grpc::ServerContext* /*context*/, const ::doodle::user_database_filter* /*request*/, ::doodle::user_database* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDeleteUserDate(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(6, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_FilterUserDate : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_FilterUserDate() {
      ::grpc::Service::MarkMethodRaw(7);
    }
    ~WithRawMethod_FilterUserDate() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status FilterUserDate(::grpc::ServerContext* /*context*/, const ::doodle::user_database_filter* /*request*/, ::grpc::ServerWriter< ::doodle::user_database>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestFilterUserDate(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncWriter< ::grpc::ByteBuffer>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(7, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_InstallMetadata : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_InstallMetadata() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->InstallMetadata(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_InstallMetadata() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status InstallMetadata(::grpc::ServerContext* /*context*/, const ::doodle::metadata_database* /*request*/, ::doodle::metadata_database* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* InstallMetadata(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* InstallMetadata(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_DeleteMetadata : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_DeleteMetadata() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->DeleteMetadata(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_DeleteMetadata() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteMetadata(::grpc::ServerContext* /*context*/, const ::doodle::metadata_database* /*request*/, ::doodle::metadata_database* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* DeleteMetadata(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* DeleteMetadata(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_UpdateMetadata : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_UpdateMetadata() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->UpdateMetadata(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_UpdateMetadata() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateMetadata(::grpc::ServerContext* /*context*/, const ::doodle::metadata_database* /*request*/, ::doodle::metadata_database* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* UpdateMetadata(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* UpdateMetadata(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_FilterMetadata : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_FilterMetadata() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(3,
          new ::grpc::internal::CallbackServerStreamingHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const::grpc::ByteBuffer* request) { return this->FilterMetadata(context, request); }));
    }
    ~ExperimentalWithRawCallbackMethod_FilterMetadata() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status FilterMetadata(::grpc::ServerContext* /*context*/, const ::doodle::metadata_database_filter* /*request*/, ::grpc::ServerWriter< ::doodle::metadata_database>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerWriteReactor< ::grpc::ByteBuffer>* FilterMetadata(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/)
    #else
    virtual ::grpc::experimental::ServerWriteReactor< ::grpc::ByteBuffer>* FilterMetadata(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_InstallUserDate : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_InstallUserDate() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(4,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->InstallUserDate(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_InstallUserDate() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status InstallUserDate(::grpc::ServerContext* /*context*/, const ::doodle::user_database* /*request*/, ::doodle::user_database* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* InstallUserDate(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* InstallUserDate(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_UpdateUserDate : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_UpdateUserDate() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(5,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->UpdateUserDate(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_UpdateUserDate() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateUserDate(::grpc::ServerContext* /*context*/, const ::doodle::user_database* /*request*/, ::doodle::user_database* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* UpdateUserDate(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* UpdateUserDate(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_DeleteUserDate : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_DeleteUserDate() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(6,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->DeleteUserDate(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_DeleteUserDate() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteUserDate(::grpc::ServerContext* /*context*/, const ::doodle::user_database_filter* /*request*/, ::doodle::user_database* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* DeleteUserDate(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* DeleteUserDate(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_FilterUserDate : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_FilterUserDate() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(7,
          new ::grpc::internal::CallbackServerStreamingHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const::grpc::ByteBuffer* request) { return this->FilterUserDate(context, request); }));
    }
    ~ExperimentalWithRawCallbackMethod_FilterUserDate() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status FilterUserDate(::grpc::ServerContext* /*context*/, const ::doodle::user_database_filter* /*request*/, ::grpc::ServerWriter< ::doodle::user_database>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerWriteReactor< ::grpc::ByteBuffer>* FilterUserDate(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/)
    #else
    virtual ::grpc::experimental::ServerWriteReactor< ::grpc::ByteBuffer>* FilterUserDate(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_InstallMetadata : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_InstallMetadata() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler<
          ::doodle::metadata_database, ::doodle::metadata_database>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::doodle::metadata_database, ::doodle::metadata_database>* streamer) {
                       return this->StreamedInstallMetadata(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_InstallMetadata() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status InstallMetadata(::grpc::ServerContext* /*context*/, const ::doodle::metadata_database* /*request*/, ::doodle::metadata_database* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedInstallMetadata(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::doodle::metadata_database,::doodle::metadata_database>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_DeleteMetadata : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_DeleteMetadata() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler<
          ::doodle::metadata_database, ::doodle::metadata_database>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::doodle::metadata_database, ::doodle::metadata_database>* streamer) {
                       return this->StreamedDeleteMetadata(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_DeleteMetadata() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status DeleteMetadata(::grpc::ServerContext* /*context*/, const ::doodle::metadata_database* /*request*/, ::doodle::metadata_database* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedDeleteMetadata(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::doodle::metadata_database,::doodle::metadata_database>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_UpdateMetadata : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_UpdateMetadata() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler<
          ::doodle::metadata_database, ::doodle::metadata_database>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::doodle::metadata_database, ::doodle::metadata_database>* streamer) {
                       return this->StreamedUpdateMetadata(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_UpdateMetadata() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status UpdateMetadata(::grpc::ServerContext* /*context*/, const ::doodle::metadata_database* /*request*/, ::doodle::metadata_database* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedUpdateMetadata(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::doodle::metadata_database,::doodle::metadata_database>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_InstallUserDate : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_InstallUserDate() {
      ::grpc::Service::MarkMethodStreamed(4,
        new ::grpc::internal::StreamedUnaryHandler<
          ::doodle::user_database, ::doodle::user_database>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::doodle::user_database, ::doodle::user_database>* streamer) {
                       return this->StreamedInstallUserDate(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_InstallUserDate() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status InstallUserDate(::grpc::ServerContext* /*context*/, const ::doodle::user_database* /*request*/, ::doodle::user_database* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedInstallUserDate(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::doodle::user_database,::doodle::user_database>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_UpdateUserDate : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_UpdateUserDate() {
      ::grpc::Service::MarkMethodStreamed(5,
        new ::grpc::internal::StreamedUnaryHandler<
          ::doodle::user_database, ::doodle::user_database>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::doodle::user_database, ::doodle::user_database>* streamer) {
                       return this->StreamedUpdateUserDate(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_UpdateUserDate() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status UpdateUserDate(::grpc::ServerContext* /*context*/, const ::doodle::user_database* /*request*/, ::doodle::user_database* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedUpdateUserDate(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::doodle::user_database,::doodle::user_database>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_DeleteUserDate : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_DeleteUserDate() {
      ::grpc::Service::MarkMethodStreamed(6,
        new ::grpc::internal::StreamedUnaryHandler<
          ::doodle::user_database_filter, ::doodle::user_database>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::doodle::user_database_filter, ::doodle::user_database>* streamer) {
                       return this->StreamedDeleteUserDate(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_DeleteUserDate() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status DeleteUserDate(::grpc::ServerContext* /*context*/, const ::doodle::user_database_filter* /*request*/, ::doodle::user_database* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedDeleteUserDate(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::doodle::user_database_filter,::doodle::user_database>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_InstallMetadata<WithStreamedUnaryMethod_DeleteMetadata<WithStreamedUnaryMethod_UpdateMetadata<WithStreamedUnaryMethod_InstallUserDate<WithStreamedUnaryMethod_UpdateUserDate<WithStreamedUnaryMethod_DeleteUserDate<Service > > > > > > StreamedUnaryService;
  template <class BaseClass>
  class WithSplitStreamingMethod_FilterMetadata : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithSplitStreamingMethod_FilterMetadata() {
      ::grpc::Service::MarkMethodStreamed(3,
        new ::grpc::internal::SplitServerStreamingHandler<
          ::doodle::metadata_database_filter, ::doodle::metadata_database>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerSplitStreamer<
                     ::doodle::metadata_database_filter, ::doodle::metadata_database>* streamer) {
                       return this->StreamedFilterMetadata(context,
                         streamer);
                  }));
    }
    ~WithSplitStreamingMethod_FilterMetadata() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status FilterMetadata(::grpc::ServerContext* /*context*/, const ::doodle::metadata_database_filter* /*request*/, ::grpc::ServerWriter< ::doodle::metadata_database>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with split streamed
    virtual ::grpc::Status StreamedFilterMetadata(::grpc::ServerContext* context, ::grpc::ServerSplitStreamer< ::doodle::metadata_database_filter,::doodle::metadata_database>* server_split_streamer) = 0;
  };
  template <class BaseClass>
  class WithSplitStreamingMethod_FilterUserDate : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithSplitStreamingMethod_FilterUserDate() {
      ::grpc::Service::MarkMethodStreamed(7,
        new ::grpc::internal::SplitServerStreamingHandler<
          ::doodle::user_database_filter, ::doodle::user_database>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerSplitStreamer<
                     ::doodle::user_database_filter, ::doodle::user_database>* streamer) {
                       return this->StreamedFilterUserDate(context,
                         streamer);
                  }));
    }
    ~WithSplitStreamingMethod_FilterUserDate() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status FilterUserDate(::grpc::ServerContext* /*context*/, const ::doodle::user_database_filter* /*request*/, ::grpc::ServerWriter< ::doodle::user_database>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with split streamed
    virtual ::grpc::Status StreamedFilterUserDate(::grpc::ServerContext* context, ::grpc::ServerSplitStreamer< ::doodle::user_database_filter,::doodle::user_database>* server_split_streamer) = 0;
  };
  typedef WithSplitStreamingMethod_FilterMetadata<WithSplitStreamingMethod_FilterUserDate<Service > > SplitStreamedService;
  typedef WithStreamedUnaryMethod_InstallMetadata<WithStreamedUnaryMethod_DeleteMetadata<WithStreamedUnaryMethod_UpdateMetadata<WithSplitStreamingMethod_FilterMetadata<WithStreamedUnaryMethod_InstallUserDate<WithStreamedUnaryMethod_UpdateUserDate<WithStreamedUnaryMethod_DeleteUserDate<WithSplitStreamingMethod_FilterUserDate<Service > > > > > > > > StreamedService;
};

}  // namespace doodle


#endif  // GRPC_metadata_5fserver_2eproto__INCLUDED
