// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: FileSystemServer.proto

#include "FileSystemServer.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace doodle {
constexpr FileInfo::FileInfo(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : path_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , update_time_(nullptr)
  , hash_(nullptr)
  , size_(PROTOBUF_ULONGLONG(0))
  , isfolder_(false)
  , exist_(false){}
struct FileInfoDefaultTypeInternal {
  constexpr FileInfoDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~FileInfoDefaultTypeInternal() {}
  union {
    FileInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT FileInfoDefaultTypeInternal _FileInfo_default_instance_;
constexpr FileStream::FileStream(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : info_(nullptr)
  , data_(nullptr){}
struct FileStreamDefaultTypeInternal {
  constexpr FileStreamDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~FileStreamDefaultTypeInternal() {}
  union {
    FileStream _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT FileStreamDefaultTypeInternal _FileStream_default_instance_;
constexpr FileInfoMove::FileInfoMove(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : source_(nullptr)
  , target_(nullptr){}
struct FileInfoMoveDefaultTypeInternal {
  constexpr FileInfoMoveDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~FileInfoMoveDefaultTypeInternal() {}
  union {
    FileInfoMove _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT FileInfoMoveDefaultTypeInternal _FileInfoMove_default_instance_;
}  // namespace doodle
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_FileSystemServer_2eproto[3];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_FileSystemServer_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_FileSystemServer_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_FileSystemServer_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::doodle::FileInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::doodle::FileInfo, path_),
  PROTOBUF_FIELD_OFFSET(::doodle::FileInfo, isfolder_),
  PROTOBUF_FIELD_OFFSET(::doodle::FileInfo, exist_),
  PROTOBUF_FIELD_OFFSET(::doodle::FileInfo, update_time_),
  PROTOBUF_FIELD_OFFSET(::doodle::FileInfo, size_),
  PROTOBUF_FIELD_OFFSET(::doodle::FileInfo, hash_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::doodle::FileStream, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::doodle::FileStream, info_),
  PROTOBUF_FIELD_OFFSET(::doodle::FileStream, data_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::doodle::FileInfoMove, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::doodle::FileInfoMove, source_),
  PROTOBUF_FIELD_OFFSET(::doodle::FileInfoMove, target_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::doodle::FileInfo)},
  { 11, -1, sizeof(::doodle::FileStream)},
  { 18, -1, sizeof(::doodle::FileInfoMove)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::doodle::_FileInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::doodle::_FileStream_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::doodle::_FileInfoMove_default_instance_),
};

const char descriptor_table_protodef_FileSystemServer_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\026FileSystemServer.proto\022\006doodle\032\037google"
  "/protobuf/timestamp.proto\032\031google/protob"
  "uf/any.proto\032\036google/protobuf/wrappers.p"
  "roto\"\244\001\n\010FileInfo\022\014\n\004path\030\001 \001(\t\022\020\n\010isFol"
  "der\030\002 \001(\010\022\r\n\005exist\030\003 \001(\010\022/\n\013update_time\030"
  "\004 \001(\0132\032.google.protobuf.Timestamp\022\014\n\004siz"
  "e\030\005 \001(\004\022*\n\004hash\030\006 \001(\0132\034.google.protobuf."
  "StringValue\"P\n\nFileStream\022\036\n\004info\030\001 \001(\0132"
  "\020.doodle.FileInfo\022\"\n\004data\030\002 \001(\0132\024.google"
  ".protobuf.Any\"R\n\014FileInfoMove\022 \n\006source\030"
  "\001 \001(\0132\020.doodle.FileInfo\022 \n\006target\030\002 \001(\0132"
  "\020.doodle.FileInfo2\215\004\n\020FileSystemServer\022/"
  "\n\007GetInfo\022\020.doodle.FileInfo\032\020.doodle.Fil"
  "eInfo\"\000\022/\n\007GetHash\022\020.doodle.FileInfo\032\020.d"
  "oodle.FileInfo\"\000\022/\n\007IsExist\022\020.doodle.Fil"
  "eInfo\032\020.doodle.FileInfo\"\000\022/\n\007GetSize\022\020.d"
  "oodle.FileInfo\032\020.doodle.FileInfo\"\000\0220\n\010Is"
  "Folder\022\020.doodle.FileInfo\032\020.doodle.FileIn"
  "fo\"\000\0224\n\014GetTimestamp\022\020.doodle.FileInfo\032\020"
  ".doodle.FileInfo\"\000\0221\n\007GetList\022\020.doodle.F"
  "ileInfo\032\020.doodle.FileInfo\"\0000\001\0224\n\010Downloa"
  "d\022\020.doodle.FileInfo\032\022.doodle.FileStream\""
  "\0000\001\0222\n\006Upload\022\022.doodle.FileStream\032\020.dood"
  "le.FileInfo\"\000(\001\0220\n\004Move\022\024.doodle.FileInf"
  "oMove\032\020.doodle.FileInfo\"\000b\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_FileSystemServer_2eproto_deps[3] = {
  &::descriptor_table_google_2fprotobuf_2fany_2eproto,
  &::descriptor_table_google_2fprotobuf_2ftimestamp_2eproto,
  &::descriptor_table_google_2fprotobuf_2fwrappers_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_FileSystemServer_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_FileSystemServer_2eproto = {
  false, false, 993, descriptor_table_protodef_FileSystemServer_2eproto, "FileSystemServer.proto", 
  &descriptor_table_FileSystemServer_2eproto_once, descriptor_table_FileSystemServer_2eproto_deps, 3, 3,
  schemas, file_default_instances, TableStruct_FileSystemServer_2eproto::offsets,
  file_level_metadata_FileSystemServer_2eproto, file_level_enum_descriptors_FileSystemServer_2eproto, file_level_service_descriptors_FileSystemServer_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK ::PROTOBUF_NAMESPACE_ID::Metadata
descriptor_table_FileSystemServer_2eproto_metadata_getter(int index) {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_FileSystemServer_2eproto);
  return descriptor_table_FileSystemServer_2eproto.file_level_metadata[index];
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_FileSystemServer_2eproto(&descriptor_table_FileSystemServer_2eproto);
namespace doodle {

// ===================================================================

class FileInfo::_Internal {
 public:
  static const PROTOBUF_NAMESPACE_ID::Timestamp& update_time(const FileInfo* msg);
  static const PROTOBUF_NAMESPACE_ID::StringValue& hash(const FileInfo* msg);
};

const PROTOBUF_NAMESPACE_ID::Timestamp&
FileInfo::_Internal::update_time(const FileInfo* msg) {
  return *msg->update_time_;
}
const PROTOBUF_NAMESPACE_ID::StringValue&
FileInfo::_Internal::hash(const FileInfo* msg) {
  return *msg->hash_;
}
void FileInfo::clear_update_time() {
  if (GetArena() == nullptr && update_time_ != nullptr) {
    delete update_time_;
  }
  update_time_ = nullptr;
}
void FileInfo::clear_hash() {
  if (GetArena() == nullptr && hash_ != nullptr) {
    delete hash_;
  }
  hash_ = nullptr;
}
FileInfo::FileInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:doodle.FileInfo)
}
FileInfo::FileInfo(const FileInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  path_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_path().empty()) {
    path_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_path(), 
      GetArena());
  }
  if (from._internal_has_update_time()) {
    update_time_ = new PROTOBUF_NAMESPACE_ID::Timestamp(*from.update_time_);
  } else {
    update_time_ = nullptr;
  }
  if (from._internal_has_hash()) {
    hash_ = new PROTOBUF_NAMESPACE_ID::StringValue(*from.hash_);
  } else {
    hash_ = nullptr;
  }
  ::memcpy(&size_, &from.size_,
    static_cast<size_t>(reinterpret_cast<char*>(&exist_) -
    reinterpret_cast<char*>(&size_)) + sizeof(exist_));
  // @@protoc_insertion_point(copy_constructor:doodle.FileInfo)
}

void FileInfo::SharedCtor() {
path_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&update_time_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&exist_) -
    reinterpret_cast<char*>(&update_time_)) + sizeof(exist_));
}

FileInfo::~FileInfo() {
  // @@protoc_insertion_point(destructor:doodle.FileInfo)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void FileInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  path_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete update_time_;
  if (this != internal_default_instance()) delete hash_;
}

void FileInfo::ArenaDtor(void* object) {
  FileInfo* _this = reinterpret_cast< FileInfo* >(object);
  (void)_this;
}
void FileInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void FileInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void FileInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:doodle.FileInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  path_.ClearToEmpty();
  if (GetArena() == nullptr && update_time_ != nullptr) {
    delete update_time_;
  }
  update_time_ = nullptr;
  if (GetArena() == nullptr && hash_ != nullptr) {
    delete hash_;
  }
  hash_ = nullptr;
  ::memset(&size_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&exist_) -
      reinterpret_cast<char*>(&size_)) + sizeof(exist_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FileInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string path = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_path();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "doodle.FileInfo.path"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool isFolder = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          isfolder_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool exist = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          exist_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp update_time = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_update_time(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 size = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.protobuf.StringValue hash = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_hash(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* FileInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:doodle.FileInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string path = 1;
  if (this->path().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_path().data(), static_cast<int>(this->_internal_path().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "doodle.FileInfo.path");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_path(), target);
  }

  // bool isFolder = 2;
  if (this->isfolder() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_isfolder(), target);
  }

  // bool exist = 3;
  if (this->exist() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_exist(), target);
  }

  // .google.protobuf.Timestamp update_time = 4;
  if (this->has_update_time()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::update_time(this), target, stream);
  }

  // uint64 size = 5;
  if (this->size() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(5, this->_internal_size(), target);
  }

  // .google.protobuf.StringValue hash = 6;
  if (this->has_hash()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::hash(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:doodle.FileInfo)
  return target;
}

size_t FileInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:doodle.FileInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string path = 1;
  if (this->path().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_path());
  }

  // .google.protobuf.Timestamp update_time = 4;
  if (this->has_update_time()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *update_time_);
  }

  // .google.protobuf.StringValue hash = 6;
  if (this->has_hash()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *hash_);
  }

  // uint64 size = 5;
  if (this->size() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_size());
  }

  // bool isFolder = 2;
  if (this->isfolder() != 0) {
    total_size += 1 + 1;
  }

  // bool exist = 3;
  if (this->exist() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FileInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:doodle.FileInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const FileInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<FileInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:doodle.FileInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:doodle.FileInfo)
    MergeFrom(*source);
  }
}

void FileInfo::MergeFrom(const FileInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:doodle.FileInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.path().size() > 0) {
    _internal_set_path(from._internal_path());
  }
  if (from.has_update_time()) {
    _internal_mutable_update_time()->PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(from._internal_update_time());
  }
  if (from.has_hash()) {
    _internal_mutable_hash()->PROTOBUF_NAMESPACE_ID::StringValue::MergeFrom(from._internal_hash());
  }
  if (from.size() != 0) {
    _internal_set_size(from._internal_size());
  }
  if (from.isfolder() != 0) {
    _internal_set_isfolder(from._internal_isfolder());
  }
  if (from.exist() != 0) {
    _internal_set_exist(from._internal_exist());
  }
}

void FileInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:doodle.FileInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FileInfo::CopyFrom(const FileInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:doodle.FileInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FileInfo::IsInitialized() const {
  return true;
}

void FileInfo::InternalSwap(FileInfo* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  path_.Swap(&other->path_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(FileInfo, exist_)
      + sizeof(FileInfo::exist_)
      - PROTOBUF_FIELD_OFFSET(FileInfo, update_time_)>(
          reinterpret_cast<char*>(&update_time_),
          reinterpret_cast<char*>(&other->update_time_));
}

::PROTOBUF_NAMESPACE_ID::Metadata FileInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class FileStream::_Internal {
 public:
  static const ::doodle::FileInfo& info(const FileStream* msg);
  static const PROTOBUF_NAMESPACE_ID::Any& data(const FileStream* msg);
};

const ::doodle::FileInfo&
FileStream::_Internal::info(const FileStream* msg) {
  return *msg->info_;
}
const PROTOBUF_NAMESPACE_ID::Any&
FileStream::_Internal::data(const FileStream* msg) {
  return *msg->data_;
}
void FileStream::clear_data() {
  if (GetArena() == nullptr && data_ != nullptr) {
    delete data_;
  }
  data_ = nullptr;
}
FileStream::FileStream(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:doodle.FileStream)
}
FileStream::FileStream(const FileStream& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_info()) {
    info_ = new ::doodle::FileInfo(*from.info_);
  } else {
    info_ = nullptr;
  }
  if (from._internal_has_data()) {
    data_ = new PROTOBUF_NAMESPACE_ID::Any(*from.data_);
  } else {
    data_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:doodle.FileStream)
}

void FileStream::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&info_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&data_) -
    reinterpret_cast<char*>(&info_)) + sizeof(data_));
}

FileStream::~FileStream() {
  // @@protoc_insertion_point(destructor:doodle.FileStream)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void FileStream::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete info_;
  if (this != internal_default_instance()) delete data_;
}

void FileStream::ArenaDtor(void* object) {
  FileStream* _this = reinterpret_cast< FileStream* >(object);
  (void)_this;
}
void FileStream::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void FileStream::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void FileStream::Clear() {
// @@protoc_insertion_point(message_clear_start:doodle.FileStream)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && info_ != nullptr) {
    delete info_;
  }
  info_ = nullptr;
  if (GetArena() == nullptr && data_ != nullptr) {
    delete data_;
  }
  data_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FileStream::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .doodle.FileInfo info = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_info(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.protobuf.Any data = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_data(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* FileStream::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:doodle.FileStream)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .doodle.FileInfo info = 1;
  if (this->has_info()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::info(this), target, stream);
  }

  // .google.protobuf.Any data = 2;
  if (this->has_data()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::data(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:doodle.FileStream)
  return target;
}

size_t FileStream::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:doodle.FileStream)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .doodle.FileInfo info = 1;
  if (this->has_info()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *info_);
  }

  // .google.protobuf.Any data = 2;
  if (this->has_data()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *data_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FileStream::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:doodle.FileStream)
  GOOGLE_DCHECK_NE(&from, this);
  const FileStream* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<FileStream>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:doodle.FileStream)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:doodle.FileStream)
    MergeFrom(*source);
  }
}

void FileStream::MergeFrom(const FileStream& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:doodle.FileStream)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_info()) {
    _internal_mutable_info()->::doodle::FileInfo::MergeFrom(from._internal_info());
  }
  if (from.has_data()) {
    _internal_mutable_data()->PROTOBUF_NAMESPACE_ID::Any::MergeFrom(from._internal_data());
  }
}

void FileStream::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:doodle.FileStream)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FileStream::CopyFrom(const FileStream& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:doodle.FileStream)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FileStream::IsInitialized() const {
  return true;
}

void FileStream::InternalSwap(FileStream* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(FileStream, data_)
      + sizeof(FileStream::data_)
      - PROTOBUF_FIELD_OFFSET(FileStream, info_)>(
          reinterpret_cast<char*>(&info_),
          reinterpret_cast<char*>(&other->info_));
}

::PROTOBUF_NAMESPACE_ID::Metadata FileStream::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class FileInfoMove::_Internal {
 public:
  static const ::doodle::FileInfo& source(const FileInfoMove* msg);
  static const ::doodle::FileInfo& target(const FileInfoMove* msg);
};

const ::doodle::FileInfo&
FileInfoMove::_Internal::source(const FileInfoMove* msg) {
  return *msg->source_;
}
const ::doodle::FileInfo&
FileInfoMove::_Internal::target(const FileInfoMove* msg) {
  return *msg->target_;
}
FileInfoMove::FileInfoMove(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:doodle.FileInfoMove)
}
FileInfoMove::FileInfoMove(const FileInfoMove& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_source()) {
    source_ = new ::doodle::FileInfo(*from.source_);
  } else {
    source_ = nullptr;
  }
  if (from._internal_has_target()) {
    target_ = new ::doodle::FileInfo(*from.target_);
  } else {
    target_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:doodle.FileInfoMove)
}

void FileInfoMove::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&source_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&target_) -
    reinterpret_cast<char*>(&source_)) + sizeof(target_));
}

FileInfoMove::~FileInfoMove() {
  // @@protoc_insertion_point(destructor:doodle.FileInfoMove)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void FileInfoMove::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete source_;
  if (this != internal_default_instance()) delete target_;
}

void FileInfoMove::ArenaDtor(void* object) {
  FileInfoMove* _this = reinterpret_cast< FileInfoMove* >(object);
  (void)_this;
}
void FileInfoMove::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void FileInfoMove::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void FileInfoMove::Clear() {
// @@protoc_insertion_point(message_clear_start:doodle.FileInfoMove)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && source_ != nullptr) {
    delete source_;
  }
  source_ = nullptr;
  if (GetArena() == nullptr && target_ != nullptr) {
    delete target_;
  }
  target_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FileInfoMove::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .doodle.FileInfo source = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_source(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .doodle.FileInfo target = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_target(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* FileInfoMove::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:doodle.FileInfoMove)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .doodle.FileInfo source = 1;
  if (this->has_source()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::source(this), target, stream);
  }

  // .doodle.FileInfo target = 2;
  if (this->has_target()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::target(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:doodle.FileInfoMove)
  return target;
}

size_t FileInfoMove::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:doodle.FileInfoMove)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .doodle.FileInfo source = 1;
  if (this->has_source()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *source_);
  }

  // .doodle.FileInfo target = 2;
  if (this->has_target()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *target_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FileInfoMove::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:doodle.FileInfoMove)
  GOOGLE_DCHECK_NE(&from, this);
  const FileInfoMove* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<FileInfoMove>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:doodle.FileInfoMove)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:doodle.FileInfoMove)
    MergeFrom(*source);
  }
}

void FileInfoMove::MergeFrom(const FileInfoMove& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:doodle.FileInfoMove)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_source()) {
    _internal_mutable_source()->::doodle::FileInfo::MergeFrom(from._internal_source());
  }
  if (from.has_target()) {
    _internal_mutable_target()->::doodle::FileInfo::MergeFrom(from._internal_target());
  }
}

void FileInfoMove::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:doodle.FileInfoMove)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FileInfoMove::CopyFrom(const FileInfoMove& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:doodle.FileInfoMove)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FileInfoMove::IsInitialized() const {
  return true;
}

void FileInfoMove::InternalSwap(FileInfoMove* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(FileInfoMove, target_)
      + sizeof(FileInfoMove::target_)
      - PROTOBUF_FIELD_OFFSET(FileInfoMove, source_)>(
          reinterpret_cast<char*>(&source_),
          reinterpret_cast<char*>(&other->source_));
}

::PROTOBUF_NAMESPACE_ID::Metadata FileInfoMove::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace doodle
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::doodle::FileInfo* Arena::CreateMaybeMessage< ::doodle::FileInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::doodle::FileInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::doodle::FileStream* Arena::CreateMaybeMessage< ::doodle::FileStream >(Arena* arena) {
  return Arena::CreateMessageInternal< ::doodle::FileStream >(arena);
}
template<> PROTOBUF_NOINLINE ::doodle::FileInfoMove* Arena::CreateMaybeMessage< ::doodle::FileInfoMove >(Arena* arena) {
  return Arena::CreateMessageInternal< ::doodle::FileInfoMove >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
