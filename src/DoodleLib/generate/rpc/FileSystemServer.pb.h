// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: FileSystemServer.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_FileSystemServer_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_FileSystemServer_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3014000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3014000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include <google/protobuf/timestamp.pb.h>
#include <google/protobuf/any.pb.h>
#include <google/protobuf/wrappers.pb.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_FileSystemServer_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_FileSystemServer_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[3]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_FileSystemServer_2eproto;
namespace doodle {
class FileInfo;
class FileInfoDefaultTypeInternal;
extern FileInfoDefaultTypeInternal _FileInfo_default_instance_;
class FileInfoMove;
class FileInfoMoveDefaultTypeInternal;
extern FileInfoMoveDefaultTypeInternal _FileInfoMove_default_instance_;
class FileStream;
class FileStreamDefaultTypeInternal;
extern FileStreamDefaultTypeInternal _FileStream_default_instance_;
}  // namespace doodle
PROTOBUF_NAMESPACE_OPEN
template<> ::doodle::FileInfo* Arena::CreateMaybeMessage<::doodle::FileInfo>(Arena*);
template<> ::doodle::FileInfoMove* Arena::CreateMaybeMessage<::doodle::FileInfoMove>(Arena*);
template<> ::doodle::FileStream* Arena::CreateMaybeMessage<::doodle::FileStream>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace doodle {

// ===================================================================

class FileInfo PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:doodle.FileInfo) */ {
 public:
  inline FileInfo() : FileInfo(nullptr) {}
  virtual ~FileInfo();

  FileInfo(const FileInfo& from);
  FileInfo(FileInfo&& from) noexcept
    : FileInfo() {
    *this = ::std::move(from);
  }

  inline FileInfo& operator=(const FileInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline FileInfo& operator=(FileInfo&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const FileInfo& default_instance();

  static inline const FileInfo* internal_default_instance() {
    return reinterpret_cast<const FileInfo*>(
               &_FileInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(FileInfo& a, FileInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(FileInfo* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FileInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline FileInfo* New() const final {
    return CreateMaybeMessage<FileInfo>(nullptr);
  }

  FileInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<FileInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const FileInfo& from);
  void MergeFrom(const FileInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FileInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "doodle.FileInfo";
  }
  protected:
  explicit FileInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_FileSystemServer_2eproto);
    return ::descriptor_table_FileSystemServer_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPathFieldNumber = 1,
    kUpdateTimeFieldNumber = 4,
    kHashFieldNumber = 6,
    kSizeFieldNumber = 5,
    kIsFolderFieldNumber = 2,
    kExistFieldNumber = 3,
  };
  // string path = 1;
  void clear_path();
  const std::string& path() const;
  void set_path(const std::string& value);
  void set_path(std::string&& value);
  void set_path(const char* value);
  void set_path(const char* value, size_t size);
  std::string* mutable_path();
  std::string* release_path();
  void set_allocated_path(std::string* path);
  private:
  const std::string& _internal_path() const;
  void _internal_set_path(const std::string& value);
  std::string* _internal_mutable_path();
  public:

  // .google.protobuf.Timestamp update_time = 4;
  bool has_update_time() const;
  private:
  bool _internal_has_update_time() const;
  public:
  void clear_update_time();
  const PROTOBUF_NAMESPACE_ID::Timestamp& update_time() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* release_update_time();
  PROTOBUF_NAMESPACE_ID::Timestamp* mutable_update_time();
  void set_allocated_update_time(PROTOBUF_NAMESPACE_ID::Timestamp* update_time);
  private:
  const PROTOBUF_NAMESPACE_ID::Timestamp& _internal_update_time() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_update_time();
  public:
  void unsafe_arena_set_allocated_update_time(
      PROTOBUF_NAMESPACE_ID::Timestamp* update_time);
  PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_update_time();

  // .google.protobuf.StringValue hash = 6;
  bool has_hash() const;
  private:
  bool _internal_has_hash() const;
  public:
  void clear_hash();
  const PROTOBUF_NAMESPACE_ID::StringValue& hash() const;
  PROTOBUF_NAMESPACE_ID::StringValue* release_hash();
  PROTOBUF_NAMESPACE_ID::StringValue* mutable_hash();
  void set_allocated_hash(PROTOBUF_NAMESPACE_ID::StringValue* hash);
  private:
  const PROTOBUF_NAMESPACE_ID::StringValue& _internal_hash() const;
  PROTOBUF_NAMESPACE_ID::StringValue* _internal_mutable_hash();
  public:
  void unsafe_arena_set_allocated_hash(
      PROTOBUF_NAMESPACE_ID::StringValue* hash);
  PROTOBUF_NAMESPACE_ID::StringValue* unsafe_arena_release_hash();

  // uint64 size = 5;
  void clear_size();
  ::PROTOBUF_NAMESPACE_ID::uint64 size() const;
  void set_size(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_size() const;
  void _internal_set_size(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // bool isFolder = 2;
  void clear_isfolder();
  bool isfolder() const;
  void set_isfolder(bool value);
  private:
  bool _internal_isfolder() const;
  void _internal_set_isfolder(bool value);
  public:

  // bool exist = 3;
  void clear_exist();
  bool exist() const;
  void set_exist(bool value);
  private:
  bool _internal_exist() const;
  void _internal_set_exist(bool value);
  public:

  // @@protoc_insertion_point(class_scope:doodle.FileInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr path_;
  PROTOBUF_NAMESPACE_ID::Timestamp* update_time_;
  PROTOBUF_NAMESPACE_ID::StringValue* hash_;
  ::PROTOBUF_NAMESPACE_ID::uint64 size_;
  bool isfolder_;
  bool exist_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_FileSystemServer_2eproto;
};
// -------------------------------------------------------------------

class FileStream PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:doodle.FileStream) */ {
 public:
  inline FileStream() : FileStream(nullptr) {}
  virtual ~FileStream();

  FileStream(const FileStream& from);
  FileStream(FileStream&& from) noexcept
    : FileStream() {
    *this = ::std::move(from);
  }

  inline FileStream& operator=(const FileStream& from) {
    CopyFrom(from);
    return *this;
  }
  inline FileStream& operator=(FileStream&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const FileStream& default_instance();

  static inline const FileStream* internal_default_instance() {
    return reinterpret_cast<const FileStream*>(
               &_FileStream_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(FileStream& a, FileStream& b) {
    a.Swap(&b);
  }
  inline void Swap(FileStream* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FileStream* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline FileStream* New() const final {
    return CreateMaybeMessage<FileStream>(nullptr);
  }

  FileStream* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<FileStream>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const FileStream& from);
  void MergeFrom(const FileStream& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FileStream* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "doodle.FileStream";
  }
  protected:
  explicit FileStream(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_FileSystemServer_2eproto);
    return ::descriptor_table_FileSystemServer_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kInfoFieldNumber = 1,
    kDataFieldNumber = 2,
  };
  // .doodle.FileInfo info = 1;
  bool has_info() const;
  private:
  bool _internal_has_info() const;
  public:
  void clear_info();
  const ::doodle::FileInfo& info() const;
  ::doodle::FileInfo* release_info();
  ::doodle::FileInfo* mutable_info();
  void set_allocated_info(::doodle::FileInfo* info);
  private:
  const ::doodle::FileInfo& _internal_info() const;
  ::doodle::FileInfo* _internal_mutable_info();
  public:
  void unsafe_arena_set_allocated_info(
      ::doodle::FileInfo* info);
  ::doodle::FileInfo* unsafe_arena_release_info();

  // .google.protobuf.Any data = 2;
  bool has_data() const;
  private:
  bool _internal_has_data() const;
  public:
  void clear_data();
  const PROTOBUF_NAMESPACE_ID::Any& data() const;
  PROTOBUF_NAMESPACE_ID::Any* release_data();
  PROTOBUF_NAMESPACE_ID::Any* mutable_data();
  void set_allocated_data(PROTOBUF_NAMESPACE_ID::Any* data);
  private:
  const PROTOBUF_NAMESPACE_ID::Any& _internal_data() const;
  PROTOBUF_NAMESPACE_ID::Any* _internal_mutable_data();
  public:
  void unsafe_arena_set_allocated_data(
      PROTOBUF_NAMESPACE_ID::Any* data);
  PROTOBUF_NAMESPACE_ID::Any* unsafe_arena_release_data();

  // @@protoc_insertion_point(class_scope:doodle.FileStream)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::doodle::FileInfo* info_;
  PROTOBUF_NAMESPACE_ID::Any* data_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_FileSystemServer_2eproto;
};
// -------------------------------------------------------------------

class FileInfoMove PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:doodle.FileInfoMove) */ {
 public:
  inline FileInfoMove() : FileInfoMove(nullptr) {}
  virtual ~FileInfoMove();

  FileInfoMove(const FileInfoMove& from);
  FileInfoMove(FileInfoMove&& from) noexcept
    : FileInfoMove() {
    *this = ::std::move(from);
  }

  inline FileInfoMove& operator=(const FileInfoMove& from) {
    CopyFrom(from);
    return *this;
  }
  inline FileInfoMove& operator=(FileInfoMove&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const FileInfoMove& default_instance();

  static inline const FileInfoMove* internal_default_instance() {
    return reinterpret_cast<const FileInfoMove*>(
               &_FileInfoMove_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(FileInfoMove& a, FileInfoMove& b) {
    a.Swap(&b);
  }
  inline void Swap(FileInfoMove* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FileInfoMove* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline FileInfoMove* New() const final {
    return CreateMaybeMessage<FileInfoMove>(nullptr);
  }

  FileInfoMove* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<FileInfoMove>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const FileInfoMove& from);
  void MergeFrom(const FileInfoMove& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FileInfoMove* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "doodle.FileInfoMove";
  }
  protected:
  explicit FileInfoMove(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_FileSystemServer_2eproto);
    return ::descriptor_table_FileSystemServer_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSourceFieldNumber = 1,
    kTargetFieldNumber = 2,
  };
  // .doodle.FileInfo source = 1;
  bool has_source() const;
  private:
  bool _internal_has_source() const;
  public:
  void clear_source();
  const ::doodle::FileInfo& source() const;
  ::doodle::FileInfo* release_source();
  ::doodle::FileInfo* mutable_source();
  void set_allocated_source(::doodle::FileInfo* source);
  private:
  const ::doodle::FileInfo& _internal_source() const;
  ::doodle::FileInfo* _internal_mutable_source();
  public:
  void unsafe_arena_set_allocated_source(
      ::doodle::FileInfo* source);
  ::doodle::FileInfo* unsafe_arena_release_source();

  // .doodle.FileInfo target = 2;
  bool has_target() const;
  private:
  bool _internal_has_target() const;
  public:
  void clear_target();
  const ::doodle::FileInfo& target() const;
  ::doodle::FileInfo* release_target();
  ::doodle::FileInfo* mutable_target();
  void set_allocated_target(::doodle::FileInfo* target);
  private:
  const ::doodle::FileInfo& _internal_target() const;
  ::doodle::FileInfo* _internal_mutable_target();
  public:
  void unsafe_arena_set_allocated_target(
      ::doodle::FileInfo* target);
  ::doodle::FileInfo* unsafe_arena_release_target();

  // @@protoc_insertion_point(class_scope:doodle.FileInfoMove)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::doodle::FileInfo* source_;
  ::doodle::FileInfo* target_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_FileSystemServer_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// FileInfo

// string path = 1;
inline void FileInfo::clear_path() {
  path_.ClearToEmpty();
}
inline const std::string& FileInfo::path() const {
  // @@protoc_insertion_point(field_get:doodle.FileInfo.path)
  return _internal_path();
}
inline void FileInfo::set_path(const std::string& value) {
  _internal_set_path(value);
  // @@protoc_insertion_point(field_set:doodle.FileInfo.path)
}
inline std::string* FileInfo::mutable_path() {
  // @@protoc_insertion_point(field_mutable:doodle.FileInfo.path)
  return _internal_mutable_path();
}
inline const std::string& FileInfo::_internal_path() const {
  return path_.Get();
}
inline void FileInfo::_internal_set_path(const std::string& value) {
  
  path_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void FileInfo::set_path(std::string&& value) {
  
  path_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:doodle.FileInfo.path)
}
inline void FileInfo::set_path(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  path_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:doodle.FileInfo.path)
}
inline void FileInfo::set_path(const char* value,
    size_t size) {
  
  path_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:doodle.FileInfo.path)
}
inline std::string* FileInfo::_internal_mutable_path() {
  
  return path_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* FileInfo::release_path() {
  // @@protoc_insertion_point(field_release:doodle.FileInfo.path)
  return path_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void FileInfo::set_allocated_path(std::string* path) {
  if (path != nullptr) {
    
  } else {
    
  }
  path_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), path,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:doodle.FileInfo.path)
}

// bool isFolder = 2;
inline void FileInfo::clear_isfolder() {
  isfolder_ = false;
}
inline bool FileInfo::_internal_isfolder() const {
  return isfolder_;
}
inline bool FileInfo::isfolder() const {
  // @@protoc_insertion_point(field_get:doodle.FileInfo.isFolder)
  return _internal_isfolder();
}
inline void FileInfo::_internal_set_isfolder(bool value) {
  
  isfolder_ = value;
}
inline void FileInfo::set_isfolder(bool value) {
  _internal_set_isfolder(value);
  // @@protoc_insertion_point(field_set:doodle.FileInfo.isFolder)
}

// bool exist = 3;
inline void FileInfo::clear_exist() {
  exist_ = false;
}
inline bool FileInfo::_internal_exist() const {
  return exist_;
}
inline bool FileInfo::exist() const {
  // @@protoc_insertion_point(field_get:doodle.FileInfo.exist)
  return _internal_exist();
}
inline void FileInfo::_internal_set_exist(bool value) {
  
  exist_ = value;
}
inline void FileInfo::set_exist(bool value) {
  _internal_set_exist(value);
  // @@protoc_insertion_point(field_set:doodle.FileInfo.exist)
}

// .google.protobuf.Timestamp update_time = 4;
inline bool FileInfo::_internal_has_update_time() const {
  return this != internal_default_instance() && update_time_ != nullptr;
}
inline bool FileInfo::has_update_time() const {
  return _internal_has_update_time();
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& FileInfo::_internal_update_time() const {
  const PROTOBUF_NAMESPACE_ID::Timestamp* p = update_time_;
  return p != nullptr ? *p : reinterpret_cast<const PROTOBUF_NAMESPACE_ID::Timestamp&>(
      PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& FileInfo::update_time() const {
  // @@protoc_insertion_point(field_get:doodle.FileInfo.update_time)
  return _internal_update_time();
}
inline void FileInfo::unsafe_arena_set_allocated_update_time(
    PROTOBUF_NAMESPACE_ID::Timestamp* update_time) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(update_time_);
  }
  update_time_ = update_time;
  if (update_time) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:doodle.FileInfo.update_time)
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* FileInfo::release_update_time() {
  
  PROTOBUF_NAMESPACE_ID::Timestamp* temp = update_time_;
  update_time_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* FileInfo::unsafe_arena_release_update_time() {
  // @@protoc_insertion_point(field_release:doodle.FileInfo.update_time)
  
  PROTOBUF_NAMESPACE_ID::Timestamp* temp = update_time_;
  update_time_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* FileInfo::_internal_mutable_update_time() {
  
  if (update_time_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::Timestamp>(GetArena());
    update_time_ = p;
  }
  return update_time_;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* FileInfo::mutable_update_time() {
  // @@protoc_insertion_point(field_mutable:doodle.FileInfo.update_time)
  return _internal_mutable_update_time();
}
inline void FileInfo::set_allocated_update_time(PROTOBUF_NAMESPACE_ID::Timestamp* update_time) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(update_time_);
  }
  if (update_time) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(update_time)->GetArena();
    if (message_arena != submessage_arena) {
      update_time = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, update_time, submessage_arena);
    }
    
  } else {
    
  }
  update_time_ = update_time;
  // @@protoc_insertion_point(field_set_allocated:doodle.FileInfo.update_time)
}

// uint64 size = 5;
inline void FileInfo::clear_size() {
  size_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 FileInfo::_internal_size() const {
  return size_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 FileInfo::size() const {
  // @@protoc_insertion_point(field_get:doodle.FileInfo.size)
  return _internal_size();
}
inline void FileInfo::_internal_set_size(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  size_ = value;
}
inline void FileInfo::set_size(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_size(value);
  // @@protoc_insertion_point(field_set:doodle.FileInfo.size)
}

// .google.protobuf.StringValue hash = 6;
inline bool FileInfo::_internal_has_hash() const {
  return this != internal_default_instance() && hash_ != nullptr;
}
inline bool FileInfo::has_hash() const {
  return _internal_has_hash();
}
inline const PROTOBUF_NAMESPACE_ID::StringValue& FileInfo::_internal_hash() const {
  const PROTOBUF_NAMESPACE_ID::StringValue* p = hash_;
  return p != nullptr ? *p : reinterpret_cast<const PROTOBUF_NAMESPACE_ID::StringValue&>(
      PROTOBUF_NAMESPACE_ID::_StringValue_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::StringValue& FileInfo::hash() const {
  // @@protoc_insertion_point(field_get:doodle.FileInfo.hash)
  return _internal_hash();
}
inline void FileInfo::unsafe_arena_set_allocated_hash(
    PROTOBUF_NAMESPACE_ID::StringValue* hash) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(hash_);
  }
  hash_ = hash;
  if (hash) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:doodle.FileInfo.hash)
}
inline PROTOBUF_NAMESPACE_ID::StringValue* FileInfo::release_hash() {
  
  PROTOBUF_NAMESPACE_ID::StringValue* temp = hash_;
  hash_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::StringValue* FileInfo::unsafe_arena_release_hash() {
  // @@protoc_insertion_point(field_release:doodle.FileInfo.hash)
  
  PROTOBUF_NAMESPACE_ID::StringValue* temp = hash_;
  hash_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::StringValue* FileInfo::_internal_mutable_hash() {
  
  if (hash_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::StringValue>(GetArena());
    hash_ = p;
  }
  return hash_;
}
inline PROTOBUF_NAMESPACE_ID::StringValue* FileInfo::mutable_hash() {
  // @@protoc_insertion_point(field_mutable:doodle.FileInfo.hash)
  return _internal_mutable_hash();
}
inline void FileInfo::set_allocated_hash(PROTOBUF_NAMESPACE_ID::StringValue* hash) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(hash_);
  }
  if (hash) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(hash)->GetArena();
    if (message_arena != submessage_arena) {
      hash = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, hash, submessage_arena);
    }
    
  } else {
    
  }
  hash_ = hash;
  // @@protoc_insertion_point(field_set_allocated:doodle.FileInfo.hash)
}

// -------------------------------------------------------------------

// FileStream

// .doodle.FileInfo info = 1;
inline bool FileStream::_internal_has_info() const {
  return this != internal_default_instance() && info_ != nullptr;
}
inline bool FileStream::has_info() const {
  return _internal_has_info();
}
inline void FileStream::clear_info() {
  if (GetArena() == nullptr && info_ != nullptr) {
    delete info_;
  }
  info_ = nullptr;
}
inline const ::doodle::FileInfo& FileStream::_internal_info() const {
  const ::doodle::FileInfo* p = info_;
  return p != nullptr ? *p : reinterpret_cast<const ::doodle::FileInfo&>(
      ::doodle::_FileInfo_default_instance_);
}
inline const ::doodle::FileInfo& FileStream::info() const {
  // @@protoc_insertion_point(field_get:doodle.FileStream.info)
  return _internal_info();
}
inline void FileStream::unsafe_arena_set_allocated_info(
    ::doodle::FileInfo* info) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(info_);
  }
  info_ = info;
  if (info) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:doodle.FileStream.info)
}
inline ::doodle::FileInfo* FileStream::release_info() {
  
  ::doodle::FileInfo* temp = info_;
  info_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::doodle::FileInfo* FileStream::unsafe_arena_release_info() {
  // @@protoc_insertion_point(field_release:doodle.FileStream.info)
  
  ::doodle::FileInfo* temp = info_;
  info_ = nullptr;
  return temp;
}
inline ::doodle::FileInfo* FileStream::_internal_mutable_info() {
  
  if (info_ == nullptr) {
    auto* p = CreateMaybeMessage<::doodle::FileInfo>(GetArena());
    info_ = p;
  }
  return info_;
}
inline ::doodle::FileInfo* FileStream::mutable_info() {
  // @@protoc_insertion_point(field_mutable:doodle.FileStream.info)
  return _internal_mutable_info();
}
inline void FileStream::set_allocated_info(::doodle::FileInfo* info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete info_;
  }
  if (info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(info);
    if (message_arena != submessage_arena) {
      info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, info, submessage_arena);
    }
    
  } else {
    
  }
  info_ = info;
  // @@protoc_insertion_point(field_set_allocated:doodle.FileStream.info)
}

// .google.protobuf.Any data = 2;
inline bool FileStream::_internal_has_data() const {
  return this != internal_default_instance() && data_ != nullptr;
}
inline bool FileStream::has_data() const {
  return _internal_has_data();
}
inline const PROTOBUF_NAMESPACE_ID::Any& FileStream::_internal_data() const {
  const PROTOBUF_NAMESPACE_ID::Any* p = data_;
  return p != nullptr ? *p : reinterpret_cast<const PROTOBUF_NAMESPACE_ID::Any&>(
      PROTOBUF_NAMESPACE_ID::_Any_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::Any& FileStream::data() const {
  // @@protoc_insertion_point(field_get:doodle.FileStream.data)
  return _internal_data();
}
inline void FileStream::unsafe_arena_set_allocated_data(
    PROTOBUF_NAMESPACE_ID::Any* data) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(data_);
  }
  data_ = data;
  if (data) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:doodle.FileStream.data)
}
inline PROTOBUF_NAMESPACE_ID::Any* FileStream::release_data() {
  
  PROTOBUF_NAMESPACE_ID::Any* temp = data_;
  data_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Any* FileStream::unsafe_arena_release_data() {
  // @@protoc_insertion_point(field_release:doodle.FileStream.data)
  
  PROTOBUF_NAMESPACE_ID::Any* temp = data_;
  data_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Any* FileStream::_internal_mutable_data() {
  
  if (data_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::Any>(GetArena());
    data_ = p;
  }
  return data_;
}
inline PROTOBUF_NAMESPACE_ID::Any* FileStream::mutable_data() {
  // @@protoc_insertion_point(field_mutable:doodle.FileStream.data)
  return _internal_mutable_data();
}
inline void FileStream::set_allocated_data(PROTOBUF_NAMESPACE_ID::Any* data) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(data_);
  }
  if (data) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(data)->GetArena();
    if (message_arena != submessage_arena) {
      data = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, data, submessage_arena);
    }
    
  } else {
    
  }
  data_ = data;
  // @@protoc_insertion_point(field_set_allocated:doodle.FileStream.data)
}

// -------------------------------------------------------------------

// FileInfoMove

// .doodle.FileInfo source = 1;
inline bool FileInfoMove::_internal_has_source() const {
  return this != internal_default_instance() && source_ != nullptr;
}
inline bool FileInfoMove::has_source() const {
  return _internal_has_source();
}
inline void FileInfoMove::clear_source() {
  if (GetArena() == nullptr && source_ != nullptr) {
    delete source_;
  }
  source_ = nullptr;
}
inline const ::doodle::FileInfo& FileInfoMove::_internal_source() const {
  const ::doodle::FileInfo* p = source_;
  return p != nullptr ? *p : reinterpret_cast<const ::doodle::FileInfo&>(
      ::doodle::_FileInfo_default_instance_);
}
inline const ::doodle::FileInfo& FileInfoMove::source() const {
  // @@protoc_insertion_point(field_get:doodle.FileInfoMove.source)
  return _internal_source();
}
inline void FileInfoMove::unsafe_arena_set_allocated_source(
    ::doodle::FileInfo* source) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(source_);
  }
  source_ = source;
  if (source) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:doodle.FileInfoMove.source)
}
inline ::doodle::FileInfo* FileInfoMove::release_source() {
  
  ::doodle::FileInfo* temp = source_;
  source_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::doodle::FileInfo* FileInfoMove::unsafe_arena_release_source() {
  // @@protoc_insertion_point(field_release:doodle.FileInfoMove.source)
  
  ::doodle::FileInfo* temp = source_;
  source_ = nullptr;
  return temp;
}
inline ::doodle::FileInfo* FileInfoMove::_internal_mutable_source() {
  
  if (source_ == nullptr) {
    auto* p = CreateMaybeMessage<::doodle::FileInfo>(GetArena());
    source_ = p;
  }
  return source_;
}
inline ::doodle::FileInfo* FileInfoMove::mutable_source() {
  // @@protoc_insertion_point(field_mutable:doodle.FileInfoMove.source)
  return _internal_mutable_source();
}
inline void FileInfoMove::set_allocated_source(::doodle::FileInfo* source) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete source_;
  }
  if (source) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(source);
    if (message_arena != submessage_arena) {
      source = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, source, submessage_arena);
    }
    
  } else {
    
  }
  source_ = source;
  // @@protoc_insertion_point(field_set_allocated:doodle.FileInfoMove.source)
}

// .doodle.FileInfo target = 2;
inline bool FileInfoMove::_internal_has_target() const {
  return this != internal_default_instance() && target_ != nullptr;
}
inline bool FileInfoMove::has_target() const {
  return _internal_has_target();
}
inline void FileInfoMove::clear_target() {
  if (GetArena() == nullptr && target_ != nullptr) {
    delete target_;
  }
  target_ = nullptr;
}
inline const ::doodle::FileInfo& FileInfoMove::_internal_target() const {
  const ::doodle::FileInfo* p = target_;
  return p != nullptr ? *p : reinterpret_cast<const ::doodle::FileInfo&>(
      ::doodle::_FileInfo_default_instance_);
}
inline const ::doodle::FileInfo& FileInfoMove::target() const {
  // @@protoc_insertion_point(field_get:doodle.FileInfoMove.target)
  return _internal_target();
}
inline void FileInfoMove::unsafe_arena_set_allocated_target(
    ::doodle::FileInfo* target) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(target_);
  }
  target_ = target;
  if (target) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:doodle.FileInfoMove.target)
}
inline ::doodle::FileInfo* FileInfoMove::release_target() {
  
  ::doodle::FileInfo* temp = target_;
  target_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::doodle::FileInfo* FileInfoMove::unsafe_arena_release_target() {
  // @@protoc_insertion_point(field_release:doodle.FileInfoMove.target)
  
  ::doodle::FileInfo* temp = target_;
  target_ = nullptr;
  return temp;
}
inline ::doodle::FileInfo* FileInfoMove::_internal_mutable_target() {
  
  if (target_ == nullptr) {
    auto* p = CreateMaybeMessage<::doodle::FileInfo>(GetArena());
    target_ = p;
  }
  return target_;
}
inline ::doodle::FileInfo* FileInfoMove::mutable_target() {
  // @@protoc_insertion_point(field_mutable:doodle.FileInfoMove.target)
  return _internal_mutable_target();
}
inline void FileInfoMove::set_allocated_target(::doodle::FileInfo* target) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete target_;
  }
  if (target) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(target);
    if (message_arena != submessage_arena) {
      target = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, target, submessage_arena);
    }
    
  } else {
    
  }
  target_ = target;
  // @@protoc_insertion_point(field_set_allocated:doodle.FileInfoMove.target)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace doodle

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_FileSystemServer_2eproto
