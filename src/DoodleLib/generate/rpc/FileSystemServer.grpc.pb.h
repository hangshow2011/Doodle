// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: FileSystemServer.proto
#ifndef GRPC_FileSystemServer_2eproto__INCLUDED
#define GRPC_FileSystemServer_2eproto__INCLUDED

#include "FileSystemServer.pb.h"

#include <functional>
#include <grpc/impl/codegen/port_platform.h>
#include <grpcpp/impl/codegen/async_generic_service.h>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/client_context.h>
#include <grpcpp/impl/codegen/completion_queue.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/proto_utils.h>
#include <grpcpp/impl/codegen/rpc_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/status.h>
#include <grpcpp/impl/codegen/stub_options.h>
#include <grpcpp/impl/codegen/sync_stream.h>

namespace doodle {

class FileSystemServer final {
 public:
  static constexpr char const* service_full_name() {
    return "doodle.FileSystemServer";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    virtual ::grpc::Status GetInfo(::grpc::ClientContext* context, const ::doodle::FileInfo& request, ::doodle::FileInfo* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::doodle::FileInfo>> AsyncGetInfo(::grpc::ClientContext* context, const ::doodle::FileInfo& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::doodle::FileInfo>>(AsyncGetInfoRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::doodle::FileInfo>> PrepareAsyncGetInfo(::grpc::ClientContext* context, const ::doodle::FileInfo& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::doodle::FileInfo>>(PrepareAsyncGetInfoRaw(context, request, cq));
    }
    virtual ::grpc::Status GetHash(::grpc::ClientContext* context, const ::doodle::FileInfo& request, ::doodle::FileInfo* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::doodle::FileInfo>> AsyncGetHash(::grpc::ClientContext* context, const ::doodle::FileInfo& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::doodle::FileInfo>>(AsyncGetHashRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::doodle::FileInfo>> PrepareAsyncGetHash(::grpc::ClientContext* context, const ::doodle::FileInfo& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::doodle::FileInfo>>(PrepareAsyncGetHashRaw(context, request, cq));
    }
    virtual ::grpc::Status IsExist(::grpc::ClientContext* context, const ::doodle::FileInfo& request, ::doodle::FileInfo* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::doodle::FileInfo>> AsyncIsExist(::grpc::ClientContext* context, const ::doodle::FileInfo& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::doodle::FileInfo>>(AsyncIsExistRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::doodle::FileInfo>> PrepareAsyncIsExist(::grpc::ClientContext* context, const ::doodle::FileInfo& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::doodle::FileInfo>>(PrepareAsyncIsExistRaw(context, request, cq));
    }
    virtual ::grpc::Status GetSize(::grpc::ClientContext* context, const ::doodle::FileInfo& request, ::doodle::FileInfo* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::doodle::FileInfo>> AsyncGetSize(::grpc::ClientContext* context, const ::doodle::FileInfo& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::doodle::FileInfo>>(AsyncGetSizeRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::doodle::FileInfo>> PrepareAsyncGetSize(::grpc::ClientContext* context, const ::doodle::FileInfo& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::doodle::FileInfo>>(PrepareAsyncGetSizeRaw(context, request, cq));
    }
    virtual ::grpc::Status IsFolder(::grpc::ClientContext* context, const ::doodle::FileInfo& request, ::doodle::FileInfo* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::doodle::FileInfo>> AsyncIsFolder(::grpc::ClientContext* context, const ::doodle::FileInfo& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::doodle::FileInfo>>(AsyncIsFolderRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::doodle::FileInfo>> PrepareAsyncIsFolder(::grpc::ClientContext* context, const ::doodle::FileInfo& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::doodle::FileInfo>>(PrepareAsyncIsFolderRaw(context, request, cq));
    }
    virtual ::grpc::Status GetTimestamp(::grpc::ClientContext* context, const ::doodle::FileInfo& request, ::doodle::FileInfo* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::doodle::FileInfo>> AsyncGetTimestamp(::grpc::ClientContext* context, const ::doodle::FileInfo& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::doodle::FileInfo>>(AsyncGetTimestampRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::doodle::FileInfo>> PrepareAsyncGetTimestamp(::grpc::ClientContext* context, const ::doodle::FileInfo& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::doodle::FileInfo>>(PrepareAsyncGetTimestampRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientReaderInterface< ::doodle::FileInfo>> GetList(::grpc::ClientContext* context, const ::doodle::FileInfo& request) {
      return std::unique_ptr< ::grpc::ClientReaderInterface< ::doodle::FileInfo>>(GetListRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::doodle::FileInfo>> AsyncGetList(::grpc::ClientContext* context, const ::doodle::FileInfo& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::doodle::FileInfo>>(AsyncGetListRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::doodle::FileInfo>> PrepareAsyncGetList(::grpc::ClientContext* context, const ::doodle::FileInfo& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::doodle::FileInfo>>(PrepareAsyncGetListRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientReaderInterface< ::doodle::FileStream>> Download(::grpc::ClientContext* context, const ::doodle::FileInfo& request) {
      return std::unique_ptr< ::grpc::ClientReaderInterface< ::doodle::FileStream>>(DownloadRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::doodle::FileStream>> AsyncDownload(::grpc::ClientContext* context, const ::doodle::FileInfo& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::doodle::FileStream>>(AsyncDownloadRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::doodle::FileStream>> PrepareAsyncDownload(::grpc::ClientContext* context, const ::doodle::FileInfo& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::doodle::FileStream>>(PrepareAsyncDownloadRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientWriterInterface< ::doodle::FileStream>> Upload(::grpc::ClientContext* context, ::doodle::FileInfo* response) {
      return std::unique_ptr< ::grpc::ClientWriterInterface< ::doodle::FileStream>>(UploadRaw(context, response));
    }
    std::unique_ptr< ::grpc::ClientAsyncWriterInterface< ::doodle::FileStream>> AsyncUpload(::grpc::ClientContext* context, ::doodle::FileInfo* response, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncWriterInterface< ::doodle::FileStream>>(AsyncUploadRaw(context, response, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncWriterInterface< ::doodle::FileStream>> PrepareAsyncUpload(::grpc::ClientContext* context, ::doodle::FileInfo* response, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncWriterInterface< ::doodle::FileStream>>(PrepareAsyncUploadRaw(context, response, cq));
    }
    virtual ::grpc::Status Move(::grpc::ClientContext* context, const ::doodle::FileInfoMove& request, ::doodle::FileInfo* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::doodle::FileInfo>> AsyncMove(::grpc::ClientContext* context, const ::doodle::FileInfoMove& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::doodle::FileInfo>>(AsyncMoveRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::doodle::FileInfo>> PrepareAsyncMove(::grpc::ClientContext* context, const ::doodle::FileInfoMove& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::doodle::FileInfo>>(PrepareAsyncMoveRaw(context, request, cq));
    }
    class experimental_async_interface {
     public:
      virtual ~experimental_async_interface() {}
      virtual void GetInfo(::grpc::ClientContext* context, const ::doodle::FileInfo* request, ::doodle::FileInfo* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void GetInfo(::grpc::ClientContext* context, const ::doodle::FileInfo* request, ::doodle::FileInfo* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void GetInfo(::grpc::ClientContext* context, const ::doodle::FileInfo* request, ::doodle::FileInfo* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      virtual void GetHash(::grpc::ClientContext* context, const ::doodle::FileInfo* request, ::doodle::FileInfo* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void GetHash(::grpc::ClientContext* context, const ::doodle::FileInfo* request, ::doodle::FileInfo* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void GetHash(::grpc::ClientContext* context, const ::doodle::FileInfo* request, ::doodle::FileInfo* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      virtual void IsExist(::grpc::ClientContext* context, const ::doodle::FileInfo* request, ::doodle::FileInfo* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void IsExist(::grpc::ClientContext* context, const ::doodle::FileInfo* request, ::doodle::FileInfo* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void IsExist(::grpc::ClientContext* context, const ::doodle::FileInfo* request, ::doodle::FileInfo* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      virtual void GetSize(::grpc::ClientContext* context, const ::doodle::FileInfo* request, ::doodle::FileInfo* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void GetSize(::grpc::ClientContext* context, const ::doodle::FileInfo* request, ::doodle::FileInfo* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void GetSize(::grpc::ClientContext* context, const ::doodle::FileInfo* request, ::doodle::FileInfo* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      virtual void IsFolder(::grpc::ClientContext* context, const ::doodle::FileInfo* request, ::doodle::FileInfo* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void IsFolder(::grpc::ClientContext* context, const ::doodle::FileInfo* request, ::doodle::FileInfo* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void IsFolder(::grpc::ClientContext* context, const ::doodle::FileInfo* request, ::doodle::FileInfo* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      virtual void GetTimestamp(::grpc::ClientContext* context, const ::doodle::FileInfo* request, ::doodle::FileInfo* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void GetTimestamp(::grpc::ClientContext* context, const ::doodle::FileInfo* request, ::doodle::FileInfo* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void GetTimestamp(::grpc::ClientContext* context, const ::doodle::FileInfo* request, ::doodle::FileInfo* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void GetList(::grpc::ClientContext* context, const ::doodle::FileInfo* request, ::grpc::ClientReadReactor< ::doodle::FileInfo>* reactor) = 0;
      #else
      virtual void GetList(::grpc::ClientContext* context, const ::doodle::FileInfo* request, ::grpc::experimental::ClientReadReactor< ::doodle::FileInfo>* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void Download(::grpc::ClientContext* context, const ::doodle::FileInfo* request, ::grpc::ClientReadReactor< ::doodle::FileStream>* reactor) = 0;
      #else
      virtual void Download(::grpc::ClientContext* context, const ::doodle::FileInfo* request, ::grpc::experimental::ClientReadReactor< ::doodle::FileStream>* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void Upload(::grpc::ClientContext* context, ::doodle::FileInfo* response, ::grpc::ClientWriteReactor< ::doodle::FileStream>* reactor) = 0;
      #else
      virtual void Upload(::grpc::ClientContext* context, ::doodle::FileInfo* response, ::grpc::experimental::ClientWriteReactor< ::doodle::FileStream>* reactor) = 0;
      #endif
      virtual void Move(::grpc::ClientContext* context, const ::doodle::FileInfoMove* request, ::doodle::FileInfo* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void Move(::grpc::ClientContext* context, const ::doodle::FileInfoMove* request, ::doodle::FileInfo* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void Move(::grpc::ClientContext* context, const ::doodle::FileInfoMove* request, ::doodle::FileInfo* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
    };
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    typedef class experimental_async_interface async_interface;
    #endif
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    async_interface* async() { return experimental_async(); }
    #endif
    virtual class experimental_async_interface* experimental_async() { return nullptr; }
  private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::doodle::FileInfo>* AsyncGetInfoRaw(::grpc::ClientContext* context, const ::doodle::FileInfo& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::doodle::FileInfo>* PrepareAsyncGetInfoRaw(::grpc::ClientContext* context, const ::doodle::FileInfo& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::doodle::FileInfo>* AsyncGetHashRaw(::grpc::ClientContext* context, const ::doodle::FileInfo& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::doodle::FileInfo>* PrepareAsyncGetHashRaw(::grpc::ClientContext* context, const ::doodle::FileInfo& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::doodle::FileInfo>* AsyncIsExistRaw(::grpc::ClientContext* context, const ::doodle::FileInfo& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::doodle::FileInfo>* PrepareAsyncIsExistRaw(::grpc::ClientContext* context, const ::doodle::FileInfo& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::doodle::FileInfo>* AsyncGetSizeRaw(::grpc::ClientContext* context, const ::doodle::FileInfo& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::doodle::FileInfo>* PrepareAsyncGetSizeRaw(::grpc::ClientContext* context, const ::doodle::FileInfo& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::doodle::FileInfo>* AsyncIsFolderRaw(::grpc::ClientContext* context, const ::doodle::FileInfo& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::doodle::FileInfo>* PrepareAsyncIsFolderRaw(::grpc::ClientContext* context, const ::doodle::FileInfo& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::doodle::FileInfo>* AsyncGetTimestampRaw(::grpc::ClientContext* context, const ::doodle::FileInfo& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::doodle::FileInfo>* PrepareAsyncGetTimestampRaw(::grpc::ClientContext* context, const ::doodle::FileInfo& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientReaderInterface< ::doodle::FileInfo>* GetListRaw(::grpc::ClientContext* context, const ::doodle::FileInfo& request) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::doodle::FileInfo>* AsyncGetListRaw(::grpc::ClientContext* context, const ::doodle::FileInfo& request, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::doodle::FileInfo>* PrepareAsyncGetListRaw(::grpc::ClientContext* context, const ::doodle::FileInfo& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientReaderInterface< ::doodle::FileStream>* DownloadRaw(::grpc::ClientContext* context, const ::doodle::FileInfo& request) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::doodle::FileStream>* AsyncDownloadRaw(::grpc::ClientContext* context, const ::doodle::FileInfo& request, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::doodle::FileStream>* PrepareAsyncDownloadRaw(::grpc::ClientContext* context, const ::doodle::FileInfo& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientWriterInterface< ::doodle::FileStream>* UploadRaw(::grpc::ClientContext* context, ::doodle::FileInfo* response) = 0;
    virtual ::grpc::ClientAsyncWriterInterface< ::doodle::FileStream>* AsyncUploadRaw(::grpc::ClientContext* context, ::doodle::FileInfo* response, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncWriterInterface< ::doodle::FileStream>* PrepareAsyncUploadRaw(::grpc::ClientContext* context, ::doodle::FileInfo* response, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::doodle::FileInfo>* AsyncMoveRaw(::grpc::ClientContext* context, const ::doodle::FileInfoMove& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::doodle::FileInfo>* PrepareAsyncMoveRaw(::grpc::ClientContext* context, const ::doodle::FileInfoMove& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel);
    ::grpc::Status GetInfo(::grpc::ClientContext* context, const ::doodle::FileInfo& request, ::doodle::FileInfo* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::doodle::FileInfo>> AsyncGetInfo(::grpc::ClientContext* context, const ::doodle::FileInfo& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::doodle::FileInfo>>(AsyncGetInfoRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::doodle::FileInfo>> PrepareAsyncGetInfo(::grpc::ClientContext* context, const ::doodle::FileInfo& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::doodle::FileInfo>>(PrepareAsyncGetInfoRaw(context, request, cq));
    }
    ::grpc::Status GetHash(::grpc::ClientContext* context, const ::doodle::FileInfo& request, ::doodle::FileInfo* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::doodle::FileInfo>> AsyncGetHash(::grpc::ClientContext* context, const ::doodle::FileInfo& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::doodle::FileInfo>>(AsyncGetHashRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::doodle::FileInfo>> PrepareAsyncGetHash(::grpc::ClientContext* context, const ::doodle::FileInfo& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::doodle::FileInfo>>(PrepareAsyncGetHashRaw(context, request, cq));
    }
    ::grpc::Status IsExist(::grpc::ClientContext* context, const ::doodle::FileInfo& request, ::doodle::FileInfo* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::doodle::FileInfo>> AsyncIsExist(::grpc::ClientContext* context, const ::doodle::FileInfo& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::doodle::FileInfo>>(AsyncIsExistRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::doodle::FileInfo>> PrepareAsyncIsExist(::grpc::ClientContext* context, const ::doodle::FileInfo& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::doodle::FileInfo>>(PrepareAsyncIsExistRaw(context, request, cq));
    }
    ::grpc::Status GetSize(::grpc::ClientContext* context, const ::doodle::FileInfo& request, ::doodle::FileInfo* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::doodle::FileInfo>> AsyncGetSize(::grpc::ClientContext* context, const ::doodle::FileInfo& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::doodle::FileInfo>>(AsyncGetSizeRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::doodle::FileInfo>> PrepareAsyncGetSize(::grpc::ClientContext* context, const ::doodle::FileInfo& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::doodle::FileInfo>>(PrepareAsyncGetSizeRaw(context, request, cq));
    }
    ::grpc::Status IsFolder(::grpc::ClientContext* context, const ::doodle::FileInfo& request, ::doodle::FileInfo* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::doodle::FileInfo>> AsyncIsFolder(::grpc::ClientContext* context, const ::doodle::FileInfo& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::doodle::FileInfo>>(AsyncIsFolderRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::doodle::FileInfo>> PrepareAsyncIsFolder(::grpc::ClientContext* context, const ::doodle::FileInfo& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::doodle::FileInfo>>(PrepareAsyncIsFolderRaw(context, request, cq));
    }
    ::grpc::Status GetTimestamp(::grpc::ClientContext* context, const ::doodle::FileInfo& request, ::doodle::FileInfo* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::doodle::FileInfo>> AsyncGetTimestamp(::grpc::ClientContext* context, const ::doodle::FileInfo& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::doodle::FileInfo>>(AsyncGetTimestampRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::doodle::FileInfo>> PrepareAsyncGetTimestamp(::grpc::ClientContext* context, const ::doodle::FileInfo& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::doodle::FileInfo>>(PrepareAsyncGetTimestampRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientReader< ::doodle::FileInfo>> GetList(::grpc::ClientContext* context, const ::doodle::FileInfo& request) {
      return std::unique_ptr< ::grpc::ClientReader< ::doodle::FileInfo>>(GetListRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::doodle::FileInfo>> AsyncGetList(::grpc::ClientContext* context, const ::doodle::FileInfo& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::doodle::FileInfo>>(AsyncGetListRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::doodle::FileInfo>> PrepareAsyncGetList(::grpc::ClientContext* context, const ::doodle::FileInfo& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::doodle::FileInfo>>(PrepareAsyncGetListRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientReader< ::doodle::FileStream>> Download(::grpc::ClientContext* context, const ::doodle::FileInfo& request) {
      return std::unique_ptr< ::grpc::ClientReader< ::doodle::FileStream>>(DownloadRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::doodle::FileStream>> AsyncDownload(::grpc::ClientContext* context, const ::doodle::FileInfo& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::doodle::FileStream>>(AsyncDownloadRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::doodle::FileStream>> PrepareAsyncDownload(::grpc::ClientContext* context, const ::doodle::FileInfo& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::doodle::FileStream>>(PrepareAsyncDownloadRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientWriter< ::doodle::FileStream>> Upload(::grpc::ClientContext* context, ::doodle::FileInfo* response) {
      return std::unique_ptr< ::grpc::ClientWriter< ::doodle::FileStream>>(UploadRaw(context, response));
    }
    std::unique_ptr< ::grpc::ClientAsyncWriter< ::doodle::FileStream>> AsyncUpload(::grpc::ClientContext* context, ::doodle::FileInfo* response, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncWriter< ::doodle::FileStream>>(AsyncUploadRaw(context, response, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncWriter< ::doodle::FileStream>> PrepareAsyncUpload(::grpc::ClientContext* context, ::doodle::FileInfo* response, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncWriter< ::doodle::FileStream>>(PrepareAsyncUploadRaw(context, response, cq));
    }
    ::grpc::Status Move(::grpc::ClientContext* context, const ::doodle::FileInfoMove& request, ::doodle::FileInfo* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::doodle::FileInfo>> AsyncMove(::grpc::ClientContext* context, const ::doodle::FileInfoMove& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::doodle::FileInfo>>(AsyncMoveRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::doodle::FileInfo>> PrepareAsyncMove(::grpc::ClientContext* context, const ::doodle::FileInfoMove& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::doodle::FileInfo>>(PrepareAsyncMoveRaw(context, request, cq));
    }
    class experimental_async final :
      public StubInterface::experimental_async_interface {
     public:
      void GetInfo(::grpc::ClientContext* context, const ::doodle::FileInfo* request, ::doodle::FileInfo* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void GetInfo(::grpc::ClientContext* context, const ::doodle::FileInfo* request, ::doodle::FileInfo* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void GetInfo(::grpc::ClientContext* context, const ::doodle::FileInfo* request, ::doodle::FileInfo* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void GetHash(::grpc::ClientContext* context, const ::doodle::FileInfo* request, ::doodle::FileInfo* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void GetHash(::grpc::ClientContext* context, const ::doodle::FileInfo* request, ::doodle::FileInfo* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void GetHash(::grpc::ClientContext* context, const ::doodle::FileInfo* request, ::doodle::FileInfo* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void IsExist(::grpc::ClientContext* context, const ::doodle::FileInfo* request, ::doodle::FileInfo* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void IsExist(::grpc::ClientContext* context, const ::doodle::FileInfo* request, ::doodle::FileInfo* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void IsExist(::grpc::ClientContext* context, const ::doodle::FileInfo* request, ::doodle::FileInfo* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void GetSize(::grpc::ClientContext* context, const ::doodle::FileInfo* request, ::doodle::FileInfo* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void GetSize(::grpc::ClientContext* context, const ::doodle::FileInfo* request, ::doodle::FileInfo* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void GetSize(::grpc::ClientContext* context, const ::doodle::FileInfo* request, ::doodle::FileInfo* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void IsFolder(::grpc::ClientContext* context, const ::doodle::FileInfo* request, ::doodle::FileInfo* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void IsFolder(::grpc::ClientContext* context, const ::doodle::FileInfo* request, ::doodle::FileInfo* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void IsFolder(::grpc::ClientContext* context, const ::doodle::FileInfo* request, ::doodle::FileInfo* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void GetTimestamp(::grpc::ClientContext* context, const ::doodle::FileInfo* request, ::doodle::FileInfo* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void GetTimestamp(::grpc::ClientContext* context, const ::doodle::FileInfo* request, ::doodle::FileInfo* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void GetTimestamp(::grpc::ClientContext* context, const ::doodle::FileInfo* request, ::doodle::FileInfo* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void GetList(::grpc::ClientContext* context, const ::doodle::FileInfo* request, ::grpc::ClientReadReactor< ::doodle::FileInfo>* reactor) override;
      #else
      void GetList(::grpc::ClientContext* context, const ::doodle::FileInfo* request, ::grpc::experimental::ClientReadReactor< ::doodle::FileInfo>* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void Download(::grpc::ClientContext* context, const ::doodle::FileInfo* request, ::grpc::ClientReadReactor< ::doodle::FileStream>* reactor) override;
      #else
      void Download(::grpc::ClientContext* context, const ::doodle::FileInfo* request, ::grpc::experimental::ClientReadReactor< ::doodle::FileStream>* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void Upload(::grpc::ClientContext* context, ::doodle::FileInfo* response, ::grpc::ClientWriteReactor< ::doodle::FileStream>* reactor) override;
      #else
      void Upload(::grpc::ClientContext* context, ::doodle::FileInfo* response, ::grpc::experimental::ClientWriteReactor< ::doodle::FileStream>* reactor) override;
      #endif
      void Move(::grpc::ClientContext* context, const ::doodle::FileInfoMove* request, ::doodle::FileInfo* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void Move(::grpc::ClientContext* context, const ::doodle::FileInfoMove* request, ::doodle::FileInfo* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void Move(::grpc::ClientContext* context, const ::doodle::FileInfoMove* request, ::doodle::FileInfo* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
     private:
      friend class Stub;
      explicit experimental_async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class experimental_async_interface* experimental_async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class experimental_async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::doodle::FileInfo>* AsyncGetInfoRaw(::grpc::ClientContext* context, const ::doodle::FileInfo& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::doodle::FileInfo>* PrepareAsyncGetInfoRaw(::grpc::ClientContext* context, const ::doodle::FileInfo& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::doodle::FileInfo>* AsyncGetHashRaw(::grpc::ClientContext* context, const ::doodle::FileInfo& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::doodle::FileInfo>* PrepareAsyncGetHashRaw(::grpc::ClientContext* context, const ::doodle::FileInfo& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::doodle::FileInfo>* AsyncIsExistRaw(::grpc::ClientContext* context, const ::doodle::FileInfo& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::doodle::FileInfo>* PrepareAsyncIsExistRaw(::grpc::ClientContext* context, const ::doodle::FileInfo& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::doodle::FileInfo>* AsyncGetSizeRaw(::grpc::ClientContext* context, const ::doodle::FileInfo& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::doodle::FileInfo>* PrepareAsyncGetSizeRaw(::grpc::ClientContext* context, const ::doodle::FileInfo& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::doodle::FileInfo>* AsyncIsFolderRaw(::grpc::ClientContext* context, const ::doodle::FileInfo& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::doodle::FileInfo>* PrepareAsyncIsFolderRaw(::grpc::ClientContext* context, const ::doodle::FileInfo& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::doodle::FileInfo>* AsyncGetTimestampRaw(::grpc::ClientContext* context, const ::doodle::FileInfo& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::doodle::FileInfo>* PrepareAsyncGetTimestampRaw(::grpc::ClientContext* context, const ::doodle::FileInfo& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientReader< ::doodle::FileInfo>* GetListRaw(::grpc::ClientContext* context, const ::doodle::FileInfo& request) override;
    ::grpc::ClientAsyncReader< ::doodle::FileInfo>* AsyncGetListRaw(::grpc::ClientContext* context, const ::doodle::FileInfo& request, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncReader< ::doodle::FileInfo>* PrepareAsyncGetListRaw(::grpc::ClientContext* context, const ::doodle::FileInfo& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientReader< ::doodle::FileStream>* DownloadRaw(::grpc::ClientContext* context, const ::doodle::FileInfo& request) override;
    ::grpc::ClientAsyncReader< ::doodle::FileStream>* AsyncDownloadRaw(::grpc::ClientContext* context, const ::doodle::FileInfo& request, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncReader< ::doodle::FileStream>* PrepareAsyncDownloadRaw(::grpc::ClientContext* context, const ::doodle::FileInfo& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientWriter< ::doodle::FileStream>* UploadRaw(::grpc::ClientContext* context, ::doodle::FileInfo* response) override;
    ::grpc::ClientAsyncWriter< ::doodle::FileStream>* AsyncUploadRaw(::grpc::ClientContext* context, ::doodle::FileInfo* response, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncWriter< ::doodle::FileStream>* PrepareAsyncUploadRaw(::grpc::ClientContext* context, ::doodle::FileInfo* response, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::doodle::FileInfo>* AsyncMoveRaw(::grpc::ClientContext* context, const ::doodle::FileInfoMove& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::doodle::FileInfo>* PrepareAsyncMoveRaw(::grpc::ClientContext* context, const ::doodle::FileInfoMove& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_GetInfo_;
    const ::grpc::internal::RpcMethod rpcmethod_GetHash_;
    const ::grpc::internal::RpcMethod rpcmethod_IsExist_;
    const ::grpc::internal::RpcMethod rpcmethod_GetSize_;
    const ::grpc::internal::RpcMethod rpcmethod_IsFolder_;
    const ::grpc::internal::RpcMethod rpcmethod_GetTimestamp_;
    const ::grpc::internal::RpcMethod rpcmethod_GetList_;
    const ::grpc::internal::RpcMethod rpcmethod_Download_;
    const ::grpc::internal::RpcMethod rpcmethod_Upload_;
    const ::grpc::internal::RpcMethod rpcmethod_Move_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    virtual ::grpc::Status GetInfo(::grpc::ServerContext* context, const ::doodle::FileInfo* request, ::doodle::FileInfo* response);
    virtual ::grpc::Status GetHash(::grpc::ServerContext* context, const ::doodle::FileInfo* request, ::doodle::FileInfo* response);
    virtual ::grpc::Status IsExist(::grpc::ServerContext* context, const ::doodle::FileInfo* request, ::doodle::FileInfo* response);
    virtual ::grpc::Status GetSize(::grpc::ServerContext* context, const ::doodle::FileInfo* request, ::doodle::FileInfo* response);
    virtual ::grpc::Status IsFolder(::grpc::ServerContext* context, const ::doodle::FileInfo* request, ::doodle::FileInfo* response);
    virtual ::grpc::Status GetTimestamp(::grpc::ServerContext* context, const ::doodle::FileInfo* request, ::doodle::FileInfo* response);
    virtual ::grpc::Status GetList(::grpc::ServerContext* context, const ::doodle::FileInfo* request, ::grpc::ServerWriter< ::doodle::FileInfo>* writer);
    virtual ::grpc::Status Download(::grpc::ServerContext* context, const ::doodle::FileInfo* request, ::grpc::ServerWriter< ::doodle::FileStream>* writer);
    virtual ::grpc::Status Upload(::grpc::ServerContext* context, ::grpc::ServerReader< ::doodle::FileStream>* reader, ::doodle::FileInfo* response);
    virtual ::grpc::Status Move(::grpc::ServerContext* context, const ::doodle::FileInfoMove* request, ::doodle::FileInfo* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_GetInfo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetInfo() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_GetInfo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetInfo(::grpc::ServerContext* /*context*/, const ::doodle::FileInfo* /*request*/, ::doodle::FileInfo* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetInfo(::grpc::ServerContext* context, ::doodle::FileInfo* request, ::grpc::ServerAsyncResponseWriter< ::doodle::FileInfo>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetHash : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetHash() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_GetHash() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetHash(::grpc::ServerContext* /*context*/, const ::doodle::FileInfo* /*request*/, ::doodle::FileInfo* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetHash(::grpc::ServerContext* context, ::doodle::FileInfo* request, ::grpc::ServerAsyncResponseWriter< ::doodle::FileInfo>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_IsExist : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_IsExist() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_IsExist() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status IsExist(::grpc::ServerContext* /*context*/, const ::doodle::FileInfo* /*request*/, ::doodle::FileInfo* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestIsExist(::grpc::ServerContext* context, ::doodle::FileInfo* request, ::grpc::ServerAsyncResponseWriter< ::doodle::FileInfo>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetSize : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetSize() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_GetSize() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetSize(::grpc::ServerContext* /*context*/, const ::doodle::FileInfo* /*request*/, ::doodle::FileInfo* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetSize(::grpc::ServerContext* context, ::doodle::FileInfo* request, ::grpc::ServerAsyncResponseWriter< ::doodle::FileInfo>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_IsFolder : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_IsFolder() {
      ::grpc::Service::MarkMethodAsync(4);
    }
    ~WithAsyncMethod_IsFolder() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status IsFolder(::grpc::ServerContext* /*context*/, const ::doodle::FileInfo* /*request*/, ::doodle::FileInfo* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestIsFolder(::grpc::ServerContext* context, ::doodle::FileInfo* request, ::grpc::ServerAsyncResponseWriter< ::doodle::FileInfo>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetTimestamp : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetTimestamp() {
      ::grpc::Service::MarkMethodAsync(5);
    }
    ~WithAsyncMethod_GetTimestamp() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetTimestamp(::grpc::ServerContext* /*context*/, const ::doodle::FileInfo* /*request*/, ::doodle::FileInfo* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetTimestamp(::grpc::ServerContext* context, ::doodle::FileInfo* request, ::grpc::ServerAsyncResponseWriter< ::doodle::FileInfo>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(5, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetList : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetList() {
      ::grpc::Service::MarkMethodAsync(6);
    }
    ~WithAsyncMethod_GetList() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetList(::grpc::ServerContext* /*context*/, const ::doodle::FileInfo* /*request*/, ::grpc::ServerWriter< ::doodle::FileInfo>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetList(::grpc::ServerContext* context, ::doodle::FileInfo* request, ::grpc::ServerAsyncWriter< ::doodle::FileInfo>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(6, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_Download : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_Download() {
      ::grpc::Service::MarkMethodAsync(7);
    }
    ~WithAsyncMethod_Download() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Download(::grpc::ServerContext* /*context*/, const ::doodle::FileInfo* /*request*/, ::grpc::ServerWriter< ::doodle::FileStream>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDownload(::grpc::ServerContext* context, ::doodle::FileInfo* request, ::grpc::ServerAsyncWriter< ::doodle::FileStream>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(7, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_Upload : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_Upload() {
      ::grpc::Service::MarkMethodAsync(8);
    }
    ~WithAsyncMethod_Upload() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Upload(::grpc::ServerContext* /*context*/, ::grpc::ServerReader< ::doodle::FileStream>* /*reader*/, ::doodle::FileInfo* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestUpload(::grpc::ServerContext* context, ::grpc::ServerAsyncReader< ::doodle::FileInfo, ::doodle::FileStream>* reader, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncClientStreaming(8, context, reader, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_Move : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_Move() {
      ::grpc::Service::MarkMethodAsync(9);
    }
    ~WithAsyncMethod_Move() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Move(::grpc::ServerContext* /*context*/, const ::doodle::FileInfoMove* /*request*/, ::doodle::FileInfo* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestMove(::grpc::ServerContext* context, ::doodle::FileInfoMove* request, ::grpc::ServerAsyncResponseWriter< ::doodle::FileInfo>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(9, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_GetInfo<WithAsyncMethod_GetHash<WithAsyncMethod_IsExist<WithAsyncMethod_GetSize<WithAsyncMethod_IsFolder<WithAsyncMethod_GetTimestamp<WithAsyncMethod_GetList<WithAsyncMethod_Download<WithAsyncMethod_Upload<WithAsyncMethod_Move<Service > > > > > > > > > > AsyncService;
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_GetInfo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_GetInfo() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::doodle::FileInfo, ::doodle::FileInfo>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::doodle::FileInfo* request, ::doodle::FileInfo* response) { return this->GetInfo(context, request, response); }));}
    void SetMessageAllocatorFor_GetInfo(
        ::grpc::experimental::MessageAllocator< ::doodle::FileInfo, ::doodle::FileInfo>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(0);
    #endif
      static_cast<::grpc::internal::CallbackUnaryHandler< ::doodle::FileInfo, ::doodle::FileInfo>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_GetInfo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetInfo(::grpc::ServerContext* /*context*/, const ::doodle::FileInfo* /*request*/, ::doodle::FileInfo* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* GetInfo(
      ::grpc::CallbackServerContext* /*context*/, const ::doodle::FileInfo* /*request*/, ::doodle::FileInfo* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* GetInfo(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::doodle::FileInfo* /*request*/, ::doodle::FileInfo* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_GetHash : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_GetHash() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::doodle::FileInfo, ::doodle::FileInfo>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::doodle::FileInfo* request, ::doodle::FileInfo* response) { return this->GetHash(context, request, response); }));}
    void SetMessageAllocatorFor_GetHash(
        ::grpc::experimental::MessageAllocator< ::doodle::FileInfo, ::doodle::FileInfo>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(1);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(1);
    #endif
      static_cast<::grpc::internal::CallbackUnaryHandler< ::doodle::FileInfo, ::doodle::FileInfo>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_GetHash() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetHash(::grpc::ServerContext* /*context*/, const ::doodle::FileInfo* /*request*/, ::doodle::FileInfo* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* GetHash(
      ::grpc::CallbackServerContext* /*context*/, const ::doodle::FileInfo* /*request*/, ::doodle::FileInfo* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* GetHash(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::doodle::FileInfo* /*request*/, ::doodle::FileInfo* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_IsExist : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_IsExist() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::doodle::FileInfo, ::doodle::FileInfo>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::doodle::FileInfo* request, ::doodle::FileInfo* response) { return this->IsExist(context, request, response); }));}
    void SetMessageAllocatorFor_IsExist(
        ::grpc::experimental::MessageAllocator< ::doodle::FileInfo, ::doodle::FileInfo>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(2);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(2);
    #endif
      static_cast<::grpc::internal::CallbackUnaryHandler< ::doodle::FileInfo, ::doodle::FileInfo>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_IsExist() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status IsExist(::grpc::ServerContext* /*context*/, const ::doodle::FileInfo* /*request*/, ::doodle::FileInfo* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* IsExist(
      ::grpc::CallbackServerContext* /*context*/, const ::doodle::FileInfo* /*request*/, ::doodle::FileInfo* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* IsExist(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::doodle::FileInfo* /*request*/, ::doodle::FileInfo* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_GetSize : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_GetSize() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::doodle::FileInfo, ::doodle::FileInfo>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::doodle::FileInfo* request, ::doodle::FileInfo* response) { return this->GetSize(context, request, response); }));}
    void SetMessageAllocatorFor_GetSize(
        ::grpc::experimental::MessageAllocator< ::doodle::FileInfo, ::doodle::FileInfo>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(3);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(3);
    #endif
      static_cast<::grpc::internal::CallbackUnaryHandler< ::doodle::FileInfo, ::doodle::FileInfo>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_GetSize() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetSize(::grpc::ServerContext* /*context*/, const ::doodle::FileInfo* /*request*/, ::doodle::FileInfo* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* GetSize(
      ::grpc::CallbackServerContext* /*context*/, const ::doodle::FileInfo* /*request*/, ::doodle::FileInfo* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* GetSize(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::doodle::FileInfo* /*request*/, ::doodle::FileInfo* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_IsFolder : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_IsFolder() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(4,
          new ::grpc::internal::CallbackUnaryHandler< ::doodle::FileInfo, ::doodle::FileInfo>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::doodle::FileInfo* request, ::doodle::FileInfo* response) { return this->IsFolder(context, request, response); }));}
    void SetMessageAllocatorFor_IsFolder(
        ::grpc::experimental::MessageAllocator< ::doodle::FileInfo, ::doodle::FileInfo>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(4);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(4);
    #endif
      static_cast<::grpc::internal::CallbackUnaryHandler< ::doodle::FileInfo, ::doodle::FileInfo>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_IsFolder() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status IsFolder(::grpc::ServerContext* /*context*/, const ::doodle::FileInfo* /*request*/, ::doodle::FileInfo* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* IsFolder(
      ::grpc::CallbackServerContext* /*context*/, const ::doodle::FileInfo* /*request*/, ::doodle::FileInfo* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* IsFolder(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::doodle::FileInfo* /*request*/, ::doodle::FileInfo* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_GetTimestamp : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_GetTimestamp() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(5,
          new ::grpc::internal::CallbackUnaryHandler< ::doodle::FileInfo, ::doodle::FileInfo>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::doodle::FileInfo* request, ::doodle::FileInfo* response) { return this->GetTimestamp(context, request, response); }));}
    void SetMessageAllocatorFor_GetTimestamp(
        ::grpc::experimental::MessageAllocator< ::doodle::FileInfo, ::doodle::FileInfo>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(5);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(5);
    #endif
      static_cast<::grpc::internal::CallbackUnaryHandler< ::doodle::FileInfo, ::doodle::FileInfo>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_GetTimestamp() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetTimestamp(::grpc::ServerContext* /*context*/, const ::doodle::FileInfo* /*request*/, ::doodle::FileInfo* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* GetTimestamp(
      ::grpc::CallbackServerContext* /*context*/, const ::doodle::FileInfo* /*request*/, ::doodle::FileInfo* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* GetTimestamp(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::doodle::FileInfo* /*request*/, ::doodle::FileInfo* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_GetList : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_GetList() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(6,
          new ::grpc::internal::CallbackServerStreamingHandler< ::doodle::FileInfo, ::doodle::FileInfo>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::doodle::FileInfo* request) { return this->GetList(context, request); }));
    }
    ~ExperimentalWithCallbackMethod_GetList() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetList(::grpc::ServerContext* /*context*/, const ::doodle::FileInfo* /*request*/, ::grpc::ServerWriter< ::doodle::FileInfo>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerWriteReactor< ::doodle::FileInfo>* GetList(
      ::grpc::CallbackServerContext* /*context*/, const ::doodle::FileInfo* /*request*/)
    #else
    virtual ::grpc::experimental::ServerWriteReactor< ::doodle::FileInfo>* GetList(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::doodle::FileInfo* /*request*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_Download : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_Download() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(7,
          new ::grpc::internal::CallbackServerStreamingHandler< ::doodle::FileInfo, ::doodle::FileStream>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::doodle::FileInfo* request) { return this->Download(context, request); }));
    }
    ~ExperimentalWithCallbackMethod_Download() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Download(::grpc::ServerContext* /*context*/, const ::doodle::FileInfo* /*request*/, ::grpc::ServerWriter< ::doodle::FileStream>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerWriteReactor< ::doodle::FileStream>* Download(
      ::grpc::CallbackServerContext* /*context*/, const ::doodle::FileInfo* /*request*/)
    #else
    virtual ::grpc::experimental::ServerWriteReactor< ::doodle::FileStream>* Download(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::doodle::FileInfo* /*request*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_Upload : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_Upload() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(8,
          new ::grpc::internal::CallbackClientStreamingHandler< ::doodle::FileStream, ::doodle::FileInfo>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, ::doodle::FileInfo* response) { return this->Upload(context, response); }));
    }
    ~ExperimentalWithCallbackMethod_Upload() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Upload(::grpc::ServerContext* /*context*/, ::grpc::ServerReader< ::doodle::FileStream>* /*reader*/, ::doodle::FileInfo* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerReadReactor< ::doodle::FileStream>* Upload(
      ::grpc::CallbackServerContext* /*context*/, ::doodle::FileInfo* /*response*/)
    #else
    virtual ::grpc::experimental::ServerReadReactor< ::doodle::FileStream>* Upload(
      ::grpc::experimental::CallbackServerContext* /*context*/, ::doodle::FileInfo* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_Move : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_Move() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(9,
          new ::grpc::internal::CallbackUnaryHandler< ::doodle::FileInfoMove, ::doodle::FileInfo>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::doodle::FileInfoMove* request, ::doodle::FileInfo* response) { return this->Move(context, request, response); }));}
    void SetMessageAllocatorFor_Move(
        ::grpc::experimental::MessageAllocator< ::doodle::FileInfoMove, ::doodle::FileInfo>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(9);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(9);
    #endif
      static_cast<::grpc::internal::CallbackUnaryHandler< ::doodle::FileInfoMove, ::doodle::FileInfo>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_Move() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Move(::grpc::ServerContext* /*context*/, const ::doodle::FileInfoMove* /*request*/, ::doodle::FileInfo* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* Move(
      ::grpc::CallbackServerContext* /*context*/, const ::doodle::FileInfoMove* /*request*/, ::doodle::FileInfo* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* Move(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::doodle::FileInfoMove* /*request*/, ::doodle::FileInfo* /*response*/)
    #endif
      { return nullptr; }
  };
  #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
  typedef ExperimentalWithCallbackMethod_GetInfo<ExperimentalWithCallbackMethod_GetHash<ExperimentalWithCallbackMethod_IsExist<ExperimentalWithCallbackMethod_GetSize<ExperimentalWithCallbackMethod_IsFolder<ExperimentalWithCallbackMethod_GetTimestamp<ExperimentalWithCallbackMethod_GetList<ExperimentalWithCallbackMethod_Download<ExperimentalWithCallbackMethod_Upload<ExperimentalWithCallbackMethod_Move<Service > > > > > > > > > > CallbackService;
  #endif

  typedef ExperimentalWithCallbackMethod_GetInfo<ExperimentalWithCallbackMethod_GetHash<ExperimentalWithCallbackMethod_IsExist<ExperimentalWithCallbackMethod_GetSize<ExperimentalWithCallbackMethod_IsFolder<ExperimentalWithCallbackMethod_GetTimestamp<ExperimentalWithCallbackMethod_GetList<ExperimentalWithCallbackMethod_Download<ExperimentalWithCallbackMethod_Upload<ExperimentalWithCallbackMethod_Move<Service > > > > > > > > > > ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_GetInfo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetInfo() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_GetInfo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetInfo(::grpc::ServerContext* /*context*/, const ::doodle::FileInfo* /*request*/, ::doodle::FileInfo* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetHash : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetHash() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_GetHash() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetHash(::grpc::ServerContext* /*context*/, const ::doodle::FileInfo* /*request*/, ::doodle::FileInfo* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_IsExist : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_IsExist() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_IsExist() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status IsExist(::grpc::ServerContext* /*context*/, const ::doodle::FileInfo* /*request*/, ::doodle::FileInfo* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetSize : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetSize() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_GetSize() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetSize(::grpc::ServerContext* /*context*/, const ::doodle::FileInfo* /*request*/, ::doodle::FileInfo* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_IsFolder : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_IsFolder() {
      ::grpc::Service::MarkMethodGeneric(4);
    }
    ~WithGenericMethod_IsFolder() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status IsFolder(::grpc::ServerContext* /*context*/, const ::doodle::FileInfo* /*request*/, ::doodle::FileInfo* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetTimestamp : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetTimestamp() {
      ::grpc::Service::MarkMethodGeneric(5);
    }
    ~WithGenericMethod_GetTimestamp() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetTimestamp(::grpc::ServerContext* /*context*/, const ::doodle::FileInfo* /*request*/, ::doodle::FileInfo* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetList : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetList() {
      ::grpc::Service::MarkMethodGeneric(6);
    }
    ~WithGenericMethod_GetList() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetList(::grpc::ServerContext* /*context*/, const ::doodle::FileInfo* /*request*/, ::grpc::ServerWriter< ::doodle::FileInfo>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_Download : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_Download() {
      ::grpc::Service::MarkMethodGeneric(7);
    }
    ~WithGenericMethod_Download() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Download(::grpc::ServerContext* /*context*/, const ::doodle::FileInfo* /*request*/, ::grpc::ServerWriter< ::doodle::FileStream>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_Upload : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_Upload() {
      ::grpc::Service::MarkMethodGeneric(8);
    }
    ~WithGenericMethod_Upload() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Upload(::grpc::ServerContext* /*context*/, ::grpc::ServerReader< ::doodle::FileStream>* /*reader*/, ::doodle::FileInfo* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_Move : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_Move() {
      ::grpc::Service::MarkMethodGeneric(9);
    }
    ~WithGenericMethod_Move() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Move(::grpc::ServerContext* /*context*/, const ::doodle::FileInfoMove* /*request*/, ::doodle::FileInfo* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetInfo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetInfo() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_GetInfo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetInfo(::grpc::ServerContext* /*context*/, const ::doodle::FileInfo* /*request*/, ::doodle::FileInfo* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetInfo(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetHash : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetHash() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_GetHash() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetHash(::grpc::ServerContext* /*context*/, const ::doodle::FileInfo* /*request*/, ::doodle::FileInfo* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetHash(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_IsExist : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_IsExist() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_IsExist() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status IsExist(::grpc::ServerContext* /*context*/, const ::doodle::FileInfo* /*request*/, ::doodle::FileInfo* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestIsExist(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetSize : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetSize() {
      ::grpc::Service::MarkMethodRaw(3);
    }
    ~WithRawMethod_GetSize() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetSize(::grpc::ServerContext* /*context*/, const ::doodle::FileInfo* /*request*/, ::doodle::FileInfo* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetSize(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_IsFolder : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_IsFolder() {
      ::grpc::Service::MarkMethodRaw(4);
    }
    ~WithRawMethod_IsFolder() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status IsFolder(::grpc::ServerContext* /*context*/, const ::doodle::FileInfo* /*request*/, ::doodle::FileInfo* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestIsFolder(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetTimestamp : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetTimestamp() {
      ::grpc::Service::MarkMethodRaw(5);
    }
    ~WithRawMethod_GetTimestamp() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetTimestamp(::grpc::ServerContext* /*context*/, const ::doodle::FileInfo* /*request*/, ::doodle::FileInfo* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetTimestamp(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(5, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetList : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetList() {
      ::grpc::Service::MarkMethodRaw(6);
    }
    ~WithRawMethod_GetList() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetList(::grpc::ServerContext* /*context*/, const ::doodle::FileInfo* /*request*/, ::grpc::ServerWriter< ::doodle::FileInfo>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetList(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncWriter< ::grpc::ByteBuffer>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(6, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_Download : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_Download() {
      ::grpc::Service::MarkMethodRaw(7);
    }
    ~WithRawMethod_Download() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Download(::grpc::ServerContext* /*context*/, const ::doodle::FileInfo* /*request*/, ::grpc::ServerWriter< ::doodle::FileStream>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDownload(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncWriter< ::grpc::ByteBuffer>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(7, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_Upload : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_Upload() {
      ::grpc::Service::MarkMethodRaw(8);
    }
    ~WithRawMethod_Upload() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Upload(::grpc::ServerContext* /*context*/, ::grpc::ServerReader< ::doodle::FileStream>* /*reader*/, ::doodle::FileInfo* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestUpload(::grpc::ServerContext* context, ::grpc::ServerAsyncReader< ::grpc::ByteBuffer, ::grpc::ByteBuffer>* reader, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncClientStreaming(8, context, reader, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_Move : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_Move() {
      ::grpc::Service::MarkMethodRaw(9);
    }
    ~WithRawMethod_Move() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Move(::grpc::ServerContext* /*context*/, const ::doodle::FileInfoMove* /*request*/, ::doodle::FileInfo* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestMove(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(9, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_GetInfo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_GetInfo() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetInfo(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_GetInfo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetInfo(::grpc::ServerContext* /*context*/, const ::doodle::FileInfo* /*request*/, ::doodle::FileInfo* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* GetInfo(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* GetInfo(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_GetHash : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_GetHash() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetHash(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_GetHash() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetHash(::grpc::ServerContext* /*context*/, const ::doodle::FileInfo* /*request*/, ::doodle::FileInfo* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* GetHash(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* GetHash(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_IsExist : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_IsExist() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->IsExist(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_IsExist() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status IsExist(::grpc::ServerContext* /*context*/, const ::doodle::FileInfo* /*request*/, ::doodle::FileInfo* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* IsExist(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* IsExist(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_GetSize : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_GetSize() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetSize(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_GetSize() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetSize(::grpc::ServerContext* /*context*/, const ::doodle::FileInfo* /*request*/, ::doodle::FileInfo* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* GetSize(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* GetSize(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_IsFolder : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_IsFolder() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(4,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->IsFolder(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_IsFolder() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status IsFolder(::grpc::ServerContext* /*context*/, const ::doodle::FileInfo* /*request*/, ::doodle::FileInfo* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* IsFolder(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* IsFolder(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_GetTimestamp : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_GetTimestamp() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(5,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetTimestamp(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_GetTimestamp() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetTimestamp(::grpc::ServerContext* /*context*/, const ::doodle::FileInfo* /*request*/, ::doodle::FileInfo* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* GetTimestamp(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* GetTimestamp(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_GetList : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_GetList() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(6,
          new ::grpc::internal::CallbackServerStreamingHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const::grpc::ByteBuffer* request) { return this->GetList(context, request); }));
    }
    ~ExperimentalWithRawCallbackMethod_GetList() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetList(::grpc::ServerContext* /*context*/, const ::doodle::FileInfo* /*request*/, ::grpc::ServerWriter< ::doodle::FileInfo>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerWriteReactor< ::grpc::ByteBuffer>* GetList(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/)
    #else
    virtual ::grpc::experimental::ServerWriteReactor< ::grpc::ByteBuffer>* GetList(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_Download : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_Download() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(7,
          new ::grpc::internal::CallbackServerStreamingHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const::grpc::ByteBuffer* request) { return this->Download(context, request); }));
    }
    ~ExperimentalWithRawCallbackMethod_Download() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Download(::grpc::ServerContext* /*context*/, const ::doodle::FileInfo* /*request*/, ::grpc::ServerWriter< ::doodle::FileStream>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerWriteReactor< ::grpc::ByteBuffer>* Download(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/)
    #else
    virtual ::grpc::experimental::ServerWriteReactor< ::grpc::ByteBuffer>* Download(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_Upload : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_Upload() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(8,
          new ::grpc::internal::CallbackClientStreamingHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, ::grpc::ByteBuffer* response) { return this->Upload(context, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_Upload() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Upload(::grpc::ServerContext* /*context*/, ::grpc::ServerReader< ::doodle::FileStream>* /*reader*/, ::doodle::FileInfo* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerReadReactor< ::grpc::ByteBuffer>* Upload(
      ::grpc::CallbackServerContext* /*context*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerReadReactor< ::grpc::ByteBuffer>* Upload(
      ::grpc::experimental::CallbackServerContext* /*context*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_Move : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_Move() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(9,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->Move(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_Move() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Move(::grpc::ServerContext* /*context*/, const ::doodle::FileInfoMove* /*request*/, ::doodle::FileInfo* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* Move(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* Move(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetInfo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetInfo() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler<
          ::doodle::FileInfo, ::doodle::FileInfo>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::doodle::FileInfo, ::doodle::FileInfo>* streamer) {
                       return this->StreamedGetInfo(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetInfo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetInfo(::grpc::ServerContext* /*context*/, const ::doodle::FileInfo* /*request*/, ::doodle::FileInfo* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetInfo(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::doodle::FileInfo,::doodle::FileInfo>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetHash : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetHash() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler<
          ::doodle::FileInfo, ::doodle::FileInfo>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::doodle::FileInfo, ::doodle::FileInfo>* streamer) {
                       return this->StreamedGetHash(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetHash() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetHash(::grpc::ServerContext* /*context*/, const ::doodle::FileInfo* /*request*/, ::doodle::FileInfo* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetHash(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::doodle::FileInfo,::doodle::FileInfo>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_IsExist : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_IsExist() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler<
          ::doodle::FileInfo, ::doodle::FileInfo>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::doodle::FileInfo, ::doodle::FileInfo>* streamer) {
                       return this->StreamedIsExist(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_IsExist() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status IsExist(::grpc::ServerContext* /*context*/, const ::doodle::FileInfo* /*request*/, ::doodle::FileInfo* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedIsExist(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::doodle::FileInfo,::doodle::FileInfo>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetSize : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetSize() {
      ::grpc::Service::MarkMethodStreamed(3,
        new ::grpc::internal::StreamedUnaryHandler<
          ::doodle::FileInfo, ::doodle::FileInfo>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::doodle::FileInfo, ::doodle::FileInfo>* streamer) {
                       return this->StreamedGetSize(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetSize() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetSize(::grpc::ServerContext* /*context*/, const ::doodle::FileInfo* /*request*/, ::doodle::FileInfo* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetSize(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::doodle::FileInfo,::doodle::FileInfo>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_IsFolder : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_IsFolder() {
      ::grpc::Service::MarkMethodStreamed(4,
        new ::grpc::internal::StreamedUnaryHandler<
          ::doodle::FileInfo, ::doodle::FileInfo>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::doodle::FileInfo, ::doodle::FileInfo>* streamer) {
                       return this->StreamedIsFolder(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_IsFolder() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status IsFolder(::grpc::ServerContext* /*context*/, const ::doodle::FileInfo* /*request*/, ::doodle::FileInfo* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedIsFolder(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::doodle::FileInfo,::doodle::FileInfo>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetTimestamp : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetTimestamp() {
      ::grpc::Service::MarkMethodStreamed(5,
        new ::grpc::internal::StreamedUnaryHandler<
          ::doodle::FileInfo, ::doodle::FileInfo>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::doodle::FileInfo, ::doodle::FileInfo>* streamer) {
                       return this->StreamedGetTimestamp(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetTimestamp() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetTimestamp(::grpc::ServerContext* /*context*/, const ::doodle::FileInfo* /*request*/, ::doodle::FileInfo* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetTimestamp(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::doodle::FileInfo,::doodle::FileInfo>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_Move : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_Move() {
      ::grpc::Service::MarkMethodStreamed(9,
        new ::grpc::internal::StreamedUnaryHandler<
          ::doodle::FileInfoMove, ::doodle::FileInfo>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::doodle::FileInfoMove, ::doodle::FileInfo>* streamer) {
                       return this->StreamedMove(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_Move() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Move(::grpc::ServerContext* /*context*/, const ::doodle::FileInfoMove* /*request*/, ::doodle::FileInfo* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedMove(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::doodle::FileInfoMove,::doodle::FileInfo>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_GetInfo<WithStreamedUnaryMethod_GetHash<WithStreamedUnaryMethod_IsExist<WithStreamedUnaryMethod_GetSize<WithStreamedUnaryMethod_IsFolder<WithStreamedUnaryMethod_GetTimestamp<WithStreamedUnaryMethod_Move<Service > > > > > > > StreamedUnaryService;
  template <class BaseClass>
  class WithSplitStreamingMethod_GetList : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithSplitStreamingMethod_GetList() {
      ::grpc::Service::MarkMethodStreamed(6,
        new ::grpc::internal::SplitServerStreamingHandler<
          ::doodle::FileInfo, ::doodle::FileInfo>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerSplitStreamer<
                     ::doodle::FileInfo, ::doodle::FileInfo>* streamer) {
                       return this->StreamedGetList(context,
                         streamer);
                  }));
    }
    ~WithSplitStreamingMethod_GetList() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetList(::grpc::ServerContext* /*context*/, const ::doodle::FileInfo* /*request*/, ::grpc::ServerWriter< ::doodle::FileInfo>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with split streamed
    virtual ::grpc::Status StreamedGetList(::grpc::ServerContext* context, ::grpc::ServerSplitStreamer< ::doodle::FileInfo,::doodle::FileInfo>* server_split_streamer) = 0;
  };
  template <class BaseClass>
  class WithSplitStreamingMethod_Download : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithSplitStreamingMethod_Download() {
      ::grpc::Service::MarkMethodStreamed(7,
        new ::grpc::internal::SplitServerStreamingHandler<
          ::doodle::FileInfo, ::doodle::FileStream>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerSplitStreamer<
                     ::doodle::FileInfo, ::doodle::FileStream>* streamer) {
                       return this->StreamedDownload(context,
                         streamer);
                  }));
    }
    ~WithSplitStreamingMethod_Download() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Download(::grpc::ServerContext* /*context*/, const ::doodle::FileInfo* /*request*/, ::grpc::ServerWriter< ::doodle::FileStream>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with split streamed
    virtual ::grpc::Status StreamedDownload(::grpc::ServerContext* context, ::grpc::ServerSplitStreamer< ::doodle::FileInfo,::doodle::FileStream>* server_split_streamer) = 0;
  };
  typedef WithSplitStreamingMethod_GetList<WithSplitStreamingMethod_Download<Service > > SplitStreamedService;
  typedef WithStreamedUnaryMethod_GetInfo<WithStreamedUnaryMethod_GetHash<WithStreamedUnaryMethod_IsExist<WithStreamedUnaryMethod_GetSize<WithStreamedUnaryMethod_IsFolder<WithStreamedUnaryMethod_GetTimestamp<WithSplitStreamingMethod_GetList<WithSplitStreamingMethod_Download<WithStreamedUnaryMethod_Move<Service > > > > > > > > > StreamedService;
};

}  // namespace doodle


#endif  // GRPC_FileSystemServer_2eproto__INCLUDED
