// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: metadata_server.proto

#include "metadata_server.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace doodle {
constexpr metadata_database::metadata_database(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : uuid_path_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , parent_(nullptr)
  , update_time_(nullptr)
  , metadata_cereal_(nullptr)
  , m_type_(nullptr)
  , episode_(nullptr)
  , shot_(nullptr)
  , season_(nullptr)
  , assets_(nullptr)
  , id_(uint64_t{0u}){}
struct metadata_databaseDefaultTypeInternal {
  constexpr metadata_databaseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~metadata_databaseDefaultTypeInternal() {}
  union {
    metadata_database _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT metadata_databaseDefaultTypeInternal _metadata_database_default_instance_;
constexpr metadata_database_filter::metadata_database_filter(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : begin_time_(nullptr)
  , end_time_(nullptr)
  , m_type_(nullptr)
  , parent_(nullptr)
  , episode_(nullptr)
  , shot_(nullptr)
  , season_(nullptr)
  , assets_(nullptr)
  , beg_off_id_(nullptr)
  , off_size_(nullptr)
  , id_(uint64_t{0u}){}
struct metadata_database_filterDefaultTypeInternal {
  constexpr metadata_database_filterDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~metadata_database_filterDefaultTypeInternal() {}
  union {
    metadata_database_filter _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT metadata_database_filterDefaultTypeInternal _metadata_database_filter_default_instance_;
}  // namespace doodle
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_metadata_5fserver_2eproto[2];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_metadata_5fserver_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_metadata_5fserver_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_metadata_5fserver_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::doodle::metadata_database, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::doodle::metadata_database, id_),
  PROTOBUF_FIELD_OFFSET(::doodle::metadata_database, uuid_path_),
  PROTOBUF_FIELD_OFFSET(::doodle::metadata_database, parent_),
  PROTOBUF_FIELD_OFFSET(::doodle::metadata_database, update_time_),
  PROTOBUF_FIELD_OFFSET(::doodle::metadata_database, metadata_cereal_),
  PROTOBUF_FIELD_OFFSET(::doodle::metadata_database, m_type_),
  PROTOBUF_FIELD_OFFSET(::doodle::metadata_database, episode_),
  PROTOBUF_FIELD_OFFSET(::doodle::metadata_database, shot_),
  PROTOBUF_FIELD_OFFSET(::doodle::metadata_database, season_),
  PROTOBUF_FIELD_OFFSET(::doodle::metadata_database, assets_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::doodle::metadata_database_filter, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::doodle::metadata_database_filter, id_),
  PROTOBUF_FIELD_OFFSET(::doodle::metadata_database_filter, begin_time_),
  PROTOBUF_FIELD_OFFSET(::doodle::metadata_database_filter, end_time_),
  PROTOBUF_FIELD_OFFSET(::doodle::metadata_database_filter, m_type_),
  PROTOBUF_FIELD_OFFSET(::doodle::metadata_database_filter, parent_),
  PROTOBUF_FIELD_OFFSET(::doodle::metadata_database_filter, episode_),
  PROTOBUF_FIELD_OFFSET(::doodle::metadata_database_filter, shot_),
  PROTOBUF_FIELD_OFFSET(::doodle::metadata_database_filter, season_),
  PROTOBUF_FIELD_OFFSET(::doodle::metadata_database_filter, assets_),
  PROTOBUF_FIELD_OFFSET(::doodle::metadata_database_filter, beg_off_id_),
  PROTOBUF_FIELD_OFFSET(::doodle::metadata_database_filter, off_size_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::doodle::metadata_database)},
  { 16, -1, -1, sizeof(::doodle::metadata_database_filter)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::doodle::_metadata_database_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::doodle::_metadata_database_filter_default_instance_),
};

const char descriptor_table_protodef_metadata_5fserver_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\025metadata_server.proto\022\006doodle\032\037google/"
  "protobuf/timestamp.proto\032\031google/protobu"
  "f/any.proto\032\036google/protobuf/wrappers.pr"
  "oto\032\022user_message.proto\"\245\003\n\021metadata_dat"
  "abase\022\n\n\002id\030\001 \001(\004\022\021\n\tuuid_path\030\002 \001(\t\022,\n\006"
  "parent\030\003 \001(\0132\034.google.protobuf.UInt64Val"
  "ue\022/\n\013update_time\030\004 \001(\0132\032.google.protobu"
  "f.Timestamp\022-\n\017Metadata_cereal\030\005 \001(\0132\024.g"
  "oogle.protobuf.Any\022,\n\006m_type\030\006 \001(\0132\034.goo"
  "gle.protobuf.UInt64Value\022-\n\007episode\030\007 \001("
  "\0132\034.google.protobuf.UInt64Value\022*\n\004shot\030"
  "\010 \001(\0132\034.google.protobuf.UInt64Value\022,\n\006s"
  "eason\030\t \001(\0132\034.google.protobuf.UInt64Valu"
  "e\022,\n\006assets\030\n \001(\0132\034.google.protobuf.Stri"
  "ngValue\"\371\003\n\030metadata_database_filter\022\n\n\002"
  "id\030\001 \001(\004\022.\n\nbegin_time\030\002 \001(\0132\032.google.pr"
  "otobuf.Timestamp\022,\n\010end_time\030\003 \001(\0132\032.goo"
  "gle.protobuf.Timestamp\022,\n\006m_type\030\004 \001(\0132\034"
  ".google.protobuf.UInt64Value\022,\n\006parent\030\005"
  " \001(\0132\034.google.protobuf.UInt64Value\022-\n\007ep"
  "isode\030\006 \001(\0132\034.google.protobuf.UInt64Valu"
  "e\022*\n\004shot\030\007 \001(\0132\034.google.protobuf.UInt64"
  "Value\022,\n\006season\030\010 \001(\0132\034.google.protobuf."
  "UInt64Value\022,\n\006assets\030\t \001(\0132\034.google.pro"
  "tobuf.StringValue\0220\n\nbeg_off_id\030\n \001(\0132\034."
  "google.protobuf.UInt64Value\022.\n\010off_size\030"
  "\013 \001(\0132\034.google.protobuf.UInt64Value2\350\004\n\017"
  "metadata_server\022J\n\020install_metadata\022\031.do"
  "odle.metadata_database\032\031.doodle.metadata"
  "_database\"\000\022I\n\017delete_metadata\022\031.doodle."
  "metadata_database\032\031.doodle.metadata_data"
  "base\"\000\022I\n\017update_metadata\022\031.doodle.metad"
  "ata_database\032\031.doodle.metadata_database\""
  "\000\022R\n\017filter_metadata\022 .doodle.metadata_d"
  "atabase_filter\032\031.doodle.metadata_databas"
  "e\"\0000\001\022C\n\021install_user_date\022\025.doodle.user"
  "_database\032\025.doodle.user_database\"\000\022B\n\020up"
  "date_user_date\022\025.doodle.user_database\032\025."
  "doodle.user_database\"\000\022I\n\020delete_user_da"
  "te\022\034.doodle.user_database_filter\032\025.doodl"
  "e.user_database\"\000\022K\n\020filter_user_date\022\034."
  "doodle.user_database_filter\032\025.doodle.use"
  "r_database\"\0000\001b\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_metadata_5fserver_2eproto_deps[4] = {
  &::descriptor_table_google_2fprotobuf_2fany_2eproto,
  &::descriptor_table_google_2fprotobuf_2ftimestamp_2eproto,
  &::descriptor_table_google_2fprotobuf_2fwrappers_2eproto,
  &::descriptor_table_user_5fmessage_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_metadata_5fserver_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_metadata_5fserver_2eproto = {
  false, false, 1702, descriptor_table_protodef_metadata_5fserver_2eproto, "metadata_server.proto", 
  &descriptor_table_metadata_5fserver_2eproto_once, descriptor_table_metadata_5fserver_2eproto_deps, 4, 2,
  schemas, file_default_instances, TableStruct_metadata_5fserver_2eproto::offsets,
  file_level_metadata_metadata_5fserver_2eproto, file_level_enum_descriptors_metadata_5fserver_2eproto, file_level_service_descriptors_metadata_5fserver_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_metadata_5fserver_2eproto_getter() {
  return &descriptor_table_metadata_5fserver_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_metadata_5fserver_2eproto(&descriptor_table_metadata_5fserver_2eproto);
namespace doodle {

// ===================================================================

class metadata_database::_Internal {
 public:
  static const ::PROTOBUF_NAMESPACE_ID::UInt64Value& parent(const metadata_database* msg);
  static const ::PROTOBUF_NAMESPACE_ID::Timestamp& update_time(const metadata_database* msg);
  static const ::PROTOBUF_NAMESPACE_ID::Any& metadata_cereal(const metadata_database* msg);
  static const ::PROTOBUF_NAMESPACE_ID::UInt64Value& m_type(const metadata_database* msg);
  static const ::PROTOBUF_NAMESPACE_ID::UInt64Value& episode(const metadata_database* msg);
  static const ::PROTOBUF_NAMESPACE_ID::UInt64Value& shot(const metadata_database* msg);
  static const ::PROTOBUF_NAMESPACE_ID::UInt64Value& season(const metadata_database* msg);
  static const ::PROTOBUF_NAMESPACE_ID::StringValue& assets(const metadata_database* msg);
};

const ::PROTOBUF_NAMESPACE_ID::UInt64Value&
metadata_database::_Internal::parent(const metadata_database* msg) {
  return *msg->parent_;
}
const ::PROTOBUF_NAMESPACE_ID::Timestamp&
metadata_database::_Internal::update_time(const metadata_database* msg) {
  return *msg->update_time_;
}
const ::PROTOBUF_NAMESPACE_ID::Any&
metadata_database::_Internal::metadata_cereal(const metadata_database* msg) {
  return *msg->metadata_cereal_;
}
const ::PROTOBUF_NAMESPACE_ID::UInt64Value&
metadata_database::_Internal::m_type(const metadata_database* msg) {
  return *msg->m_type_;
}
const ::PROTOBUF_NAMESPACE_ID::UInt64Value&
metadata_database::_Internal::episode(const metadata_database* msg) {
  return *msg->episode_;
}
const ::PROTOBUF_NAMESPACE_ID::UInt64Value&
metadata_database::_Internal::shot(const metadata_database* msg) {
  return *msg->shot_;
}
const ::PROTOBUF_NAMESPACE_ID::UInt64Value&
metadata_database::_Internal::season(const metadata_database* msg) {
  return *msg->season_;
}
const ::PROTOBUF_NAMESPACE_ID::StringValue&
metadata_database::_Internal::assets(const metadata_database* msg) {
  return *msg->assets_;
}
void metadata_database::clear_parent() {
  if (GetArenaForAllocation() == nullptr && parent_ != nullptr) {
    delete parent_;
  }
  parent_ = nullptr;
}
void metadata_database::clear_update_time() {
  if (GetArenaForAllocation() == nullptr && update_time_ != nullptr) {
    delete update_time_;
  }
  update_time_ = nullptr;
}
void metadata_database::clear_metadata_cereal() {
  if (GetArenaForAllocation() == nullptr && metadata_cereal_ != nullptr) {
    delete metadata_cereal_;
  }
  metadata_cereal_ = nullptr;
}
void metadata_database::clear_m_type() {
  if (GetArenaForAllocation() == nullptr && m_type_ != nullptr) {
    delete m_type_;
  }
  m_type_ = nullptr;
}
void metadata_database::clear_episode() {
  if (GetArenaForAllocation() == nullptr && episode_ != nullptr) {
    delete episode_;
  }
  episode_ = nullptr;
}
void metadata_database::clear_shot() {
  if (GetArenaForAllocation() == nullptr && shot_ != nullptr) {
    delete shot_;
  }
  shot_ = nullptr;
}
void metadata_database::clear_season() {
  if (GetArenaForAllocation() == nullptr && season_ != nullptr) {
    delete season_;
  }
  season_ = nullptr;
}
void metadata_database::clear_assets() {
  if (GetArenaForAllocation() == nullptr && assets_ != nullptr) {
    delete assets_;
  }
  assets_ = nullptr;
}
metadata_database::metadata_database(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:doodle.metadata_database)
}
metadata_database::metadata_database(const metadata_database& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  uuid_path_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_uuid_path().empty()) {
    uuid_path_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_uuid_path(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_parent()) {
    parent_ = new ::PROTOBUF_NAMESPACE_ID::UInt64Value(*from.parent_);
  } else {
    parent_ = nullptr;
  }
  if (from._internal_has_update_time()) {
    update_time_ = new ::PROTOBUF_NAMESPACE_ID::Timestamp(*from.update_time_);
  } else {
    update_time_ = nullptr;
  }
  if (from._internal_has_metadata_cereal()) {
    metadata_cereal_ = new ::PROTOBUF_NAMESPACE_ID::Any(*from.metadata_cereal_);
  } else {
    metadata_cereal_ = nullptr;
  }
  if (from._internal_has_m_type()) {
    m_type_ = new ::PROTOBUF_NAMESPACE_ID::UInt64Value(*from.m_type_);
  } else {
    m_type_ = nullptr;
  }
  if (from._internal_has_episode()) {
    episode_ = new ::PROTOBUF_NAMESPACE_ID::UInt64Value(*from.episode_);
  } else {
    episode_ = nullptr;
  }
  if (from._internal_has_shot()) {
    shot_ = new ::PROTOBUF_NAMESPACE_ID::UInt64Value(*from.shot_);
  } else {
    shot_ = nullptr;
  }
  if (from._internal_has_season()) {
    season_ = new ::PROTOBUF_NAMESPACE_ID::UInt64Value(*from.season_);
  } else {
    season_ = nullptr;
  }
  if (from._internal_has_assets()) {
    assets_ = new ::PROTOBUF_NAMESPACE_ID::StringValue(*from.assets_);
  } else {
    assets_ = nullptr;
  }
  id_ = from.id_;
  // @@protoc_insertion_point(copy_constructor:doodle.metadata_database)
}

void metadata_database::SharedCtor() {
uuid_path_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&parent_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&id_) -
    reinterpret_cast<char*>(&parent_)) + sizeof(id_));
}

metadata_database::~metadata_database() {
  // @@protoc_insertion_point(destructor:doodle.metadata_database)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void metadata_database::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  uuid_path_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete parent_;
  if (this != internal_default_instance()) delete update_time_;
  if (this != internal_default_instance()) delete metadata_cereal_;
  if (this != internal_default_instance()) delete m_type_;
  if (this != internal_default_instance()) delete episode_;
  if (this != internal_default_instance()) delete shot_;
  if (this != internal_default_instance()) delete season_;
  if (this != internal_default_instance()) delete assets_;
}

void metadata_database::ArenaDtor(void* object) {
  metadata_database* _this = reinterpret_cast< metadata_database* >(object);
  (void)_this;
}
void metadata_database::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void metadata_database::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void metadata_database::Clear() {
// @@protoc_insertion_point(message_clear_start:doodle.metadata_database)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  uuid_path_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && parent_ != nullptr) {
    delete parent_;
  }
  parent_ = nullptr;
  if (GetArenaForAllocation() == nullptr && update_time_ != nullptr) {
    delete update_time_;
  }
  update_time_ = nullptr;
  if (GetArenaForAllocation() == nullptr && metadata_cereal_ != nullptr) {
    delete metadata_cereal_;
  }
  metadata_cereal_ = nullptr;
  if (GetArenaForAllocation() == nullptr && m_type_ != nullptr) {
    delete m_type_;
  }
  m_type_ = nullptr;
  if (GetArenaForAllocation() == nullptr && episode_ != nullptr) {
    delete episode_;
  }
  episode_ = nullptr;
  if (GetArenaForAllocation() == nullptr && shot_ != nullptr) {
    delete shot_;
  }
  shot_ = nullptr;
  if (GetArenaForAllocation() == nullptr && season_ != nullptr) {
    delete season_;
  }
  season_ = nullptr;
  if (GetArenaForAllocation() == nullptr && assets_ != nullptr) {
    delete assets_;
  }
  assets_ = nullptr;
  id_ = uint64_t{0u};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* metadata_database::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string uuid_path = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_uuid_path();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "doodle.metadata_database.uuid_path"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.UInt64Value parent = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_parent(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp update_time = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_update_time(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Any Metadata_cereal = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_metadata_cereal(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.UInt64Value m_type = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_m_type(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.UInt64Value episode = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_episode(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.UInt64Value shot = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_shot(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.UInt64Value season = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_season(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.StringValue assets = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_assets(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* metadata_database::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:doodle.metadata_database)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 id = 1;
  if (this->_internal_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_id(), target);
  }

  // string uuid_path = 2;
  if (!this->_internal_uuid_path().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_uuid_path().data(), static_cast<int>(this->_internal_uuid_path().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "doodle.metadata_database.uuid_path");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_uuid_path(), target);
  }

  // .google.protobuf.UInt64Value parent = 3;
  if (this->_internal_has_parent()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::parent(this), target, stream);
  }

  // .google.protobuf.Timestamp update_time = 4;
  if (this->_internal_has_update_time()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::update_time(this), target, stream);
  }

  // .google.protobuf.Any Metadata_cereal = 5;
  if (this->_internal_has_metadata_cereal()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::metadata_cereal(this), target, stream);
  }

  // .google.protobuf.UInt64Value m_type = 6;
  if (this->_internal_has_m_type()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::m_type(this), target, stream);
  }

  // .google.protobuf.UInt64Value episode = 7;
  if (this->_internal_has_episode()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        7, _Internal::episode(this), target, stream);
  }

  // .google.protobuf.UInt64Value shot = 8;
  if (this->_internal_has_shot()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        8, _Internal::shot(this), target, stream);
  }

  // .google.protobuf.UInt64Value season = 9;
  if (this->_internal_has_season()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        9, _Internal::season(this), target, stream);
  }

  // .google.protobuf.StringValue assets = 10;
  if (this->_internal_has_assets()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        10, _Internal::assets(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:doodle.metadata_database)
  return target;
}

size_t metadata_database::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:doodle.metadata_database)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string uuid_path = 2;
  if (!this->_internal_uuid_path().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_uuid_path());
  }

  // .google.protobuf.UInt64Value parent = 3;
  if (this->_internal_has_parent()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *parent_);
  }

  // .google.protobuf.Timestamp update_time = 4;
  if (this->_internal_has_update_time()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *update_time_);
  }

  // .google.protobuf.Any Metadata_cereal = 5;
  if (this->_internal_has_metadata_cereal()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *metadata_cereal_);
  }

  // .google.protobuf.UInt64Value m_type = 6;
  if (this->_internal_has_m_type()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *m_type_);
  }

  // .google.protobuf.UInt64Value episode = 7;
  if (this->_internal_has_episode()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *episode_);
  }

  // .google.protobuf.UInt64Value shot = 8;
  if (this->_internal_has_shot()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *shot_);
  }

  // .google.protobuf.UInt64Value season = 9;
  if (this->_internal_has_season()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *season_);
  }

  // .google.protobuf.StringValue assets = 10;
  if (this->_internal_has_assets()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *assets_);
  }

  // uint64 id = 1;
  if (this->_internal_id() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData metadata_database::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    metadata_database::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*metadata_database::GetClassData() const { return &_class_data_; }

void metadata_database::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<metadata_database *>(to)->MergeFrom(
      static_cast<const metadata_database &>(from));
}


void metadata_database::MergeFrom(const metadata_database& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:doodle.metadata_database)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_uuid_path().empty()) {
    _internal_set_uuid_path(from._internal_uuid_path());
  }
  if (from._internal_has_parent()) {
    _internal_mutable_parent()->::PROTOBUF_NAMESPACE_ID::UInt64Value::MergeFrom(from._internal_parent());
  }
  if (from._internal_has_update_time()) {
    _internal_mutable_update_time()->::PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(from._internal_update_time());
  }
  if (from._internal_has_metadata_cereal()) {
    _internal_mutable_metadata_cereal()->::PROTOBUF_NAMESPACE_ID::Any::MergeFrom(from._internal_metadata_cereal());
  }
  if (from._internal_has_m_type()) {
    _internal_mutable_m_type()->::PROTOBUF_NAMESPACE_ID::UInt64Value::MergeFrom(from._internal_m_type());
  }
  if (from._internal_has_episode()) {
    _internal_mutable_episode()->::PROTOBUF_NAMESPACE_ID::UInt64Value::MergeFrom(from._internal_episode());
  }
  if (from._internal_has_shot()) {
    _internal_mutable_shot()->::PROTOBUF_NAMESPACE_ID::UInt64Value::MergeFrom(from._internal_shot());
  }
  if (from._internal_has_season()) {
    _internal_mutable_season()->::PROTOBUF_NAMESPACE_ID::UInt64Value::MergeFrom(from._internal_season());
  }
  if (from._internal_has_assets()) {
    _internal_mutable_assets()->::PROTOBUF_NAMESPACE_ID::StringValue::MergeFrom(from._internal_assets());
  }
  if (from._internal_id() != 0) {
    _internal_set_id(from._internal_id());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void metadata_database::CopyFrom(const metadata_database& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:doodle.metadata_database)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool metadata_database::IsInitialized() const {
  return true;
}

void metadata_database::InternalSwap(metadata_database* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &uuid_path_, lhs_arena,
      &other->uuid_path_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(metadata_database, id_)
      + sizeof(metadata_database::id_)
      - PROTOBUF_FIELD_OFFSET(metadata_database, parent_)>(
          reinterpret_cast<char*>(&parent_),
          reinterpret_cast<char*>(&other->parent_));
}

::PROTOBUF_NAMESPACE_ID::Metadata metadata_database::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_metadata_5fserver_2eproto_getter, &descriptor_table_metadata_5fserver_2eproto_once,
      file_level_metadata_metadata_5fserver_2eproto[0]);
}

// ===================================================================

class metadata_database_filter::_Internal {
 public:
  static const ::PROTOBUF_NAMESPACE_ID::Timestamp& begin_time(const metadata_database_filter* msg);
  static const ::PROTOBUF_NAMESPACE_ID::Timestamp& end_time(const metadata_database_filter* msg);
  static const ::PROTOBUF_NAMESPACE_ID::UInt64Value& m_type(const metadata_database_filter* msg);
  static const ::PROTOBUF_NAMESPACE_ID::UInt64Value& parent(const metadata_database_filter* msg);
  static const ::PROTOBUF_NAMESPACE_ID::UInt64Value& episode(const metadata_database_filter* msg);
  static const ::PROTOBUF_NAMESPACE_ID::UInt64Value& shot(const metadata_database_filter* msg);
  static const ::PROTOBUF_NAMESPACE_ID::UInt64Value& season(const metadata_database_filter* msg);
  static const ::PROTOBUF_NAMESPACE_ID::StringValue& assets(const metadata_database_filter* msg);
  static const ::PROTOBUF_NAMESPACE_ID::UInt64Value& beg_off_id(const metadata_database_filter* msg);
  static const ::PROTOBUF_NAMESPACE_ID::UInt64Value& off_size(const metadata_database_filter* msg);
};

const ::PROTOBUF_NAMESPACE_ID::Timestamp&
metadata_database_filter::_Internal::begin_time(const metadata_database_filter* msg) {
  return *msg->begin_time_;
}
const ::PROTOBUF_NAMESPACE_ID::Timestamp&
metadata_database_filter::_Internal::end_time(const metadata_database_filter* msg) {
  return *msg->end_time_;
}
const ::PROTOBUF_NAMESPACE_ID::UInt64Value&
metadata_database_filter::_Internal::m_type(const metadata_database_filter* msg) {
  return *msg->m_type_;
}
const ::PROTOBUF_NAMESPACE_ID::UInt64Value&
metadata_database_filter::_Internal::parent(const metadata_database_filter* msg) {
  return *msg->parent_;
}
const ::PROTOBUF_NAMESPACE_ID::UInt64Value&
metadata_database_filter::_Internal::episode(const metadata_database_filter* msg) {
  return *msg->episode_;
}
const ::PROTOBUF_NAMESPACE_ID::UInt64Value&
metadata_database_filter::_Internal::shot(const metadata_database_filter* msg) {
  return *msg->shot_;
}
const ::PROTOBUF_NAMESPACE_ID::UInt64Value&
metadata_database_filter::_Internal::season(const metadata_database_filter* msg) {
  return *msg->season_;
}
const ::PROTOBUF_NAMESPACE_ID::StringValue&
metadata_database_filter::_Internal::assets(const metadata_database_filter* msg) {
  return *msg->assets_;
}
const ::PROTOBUF_NAMESPACE_ID::UInt64Value&
metadata_database_filter::_Internal::beg_off_id(const metadata_database_filter* msg) {
  return *msg->beg_off_id_;
}
const ::PROTOBUF_NAMESPACE_ID::UInt64Value&
metadata_database_filter::_Internal::off_size(const metadata_database_filter* msg) {
  return *msg->off_size_;
}
void metadata_database_filter::clear_begin_time() {
  if (GetArenaForAllocation() == nullptr && begin_time_ != nullptr) {
    delete begin_time_;
  }
  begin_time_ = nullptr;
}
void metadata_database_filter::clear_end_time() {
  if (GetArenaForAllocation() == nullptr && end_time_ != nullptr) {
    delete end_time_;
  }
  end_time_ = nullptr;
}
void metadata_database_filter::clear_m_type() {
  if (GetArenaForAllocation() == nullptr && m_type_ != nullptr) {
    delete m_type_;
  }
  m_type_ = nullptr;
}
void metadata_database_filter::clear_parent() {
  if (GetArenaForAllocation() == nullptr && parent_ != nullptr) {
    delete parent_;
  }
  parent_ = nullptr;
}
void metadata_database_filter::clear_episode() {
  if (GetArenaForAllocation() == nullptr && episode_ != nullptr) {
    delete episode_;
  }
  episode_ = nullptr;
}
void metadata_database_filter::clear_shot() {
  if (GetArenaForAllocation() == nullptr && shot_ != nullptr) {
    delete shot_;
  }
  shot_ = nullptr;
}
void metadata_database_filter::clear_season() {
  if (GetArenaForAllocation() == nullptr && season_ != nullptr) {
    delete season_;
  }
  season_ = nullptr;
}
void metadata_database_filter::clear_assets() {
  if (GetArenaForAllocation() == nullptr && assets_ != nullptr) {
    delete assets_;
  }
  assets_ = nullptr;
}
void metadata_database_filter::clear_beg_off_id() {
  if (GetArenaForAllocation() == nullptr && beg_off_id_ != nullptr) {
    delete beg_off_id_;
  }
  beg_off_id_ = nullptr;
}
void metadata_database_filter::clear_off_size() {
  if (GetArenaForAllocation() == nullptr && off_size_ != nullptr) {
    delete off_size_;
  }
  off_size_ = nullptr;
}
metadata_database_filter::metadata_database_filter(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:doodle.metadata_database_filter)
}
metadata_database_filter::metadata_database_filter(const metadata_database_filter& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_begin_time()) {
    begin_time_ = new ::PROTOBUF_NAMESPACE_ID::Timestamp(*from.begin_time_);
  } else {
    begin_time_ = nullptr;
  }
  if (from._internal_has_end_time()) {
    end_time_ = new ::PROTOBUF_NAMESPACE_ID::Timestamp(*from.end_time_);
  } else {
    end_time_ = nullptr;
  }
  if (from._internal_has_m_type()) {
    m_type_ = new ::PROTOBUF_NAMESPACE_ID::UInt64Value(*from.m_type_);
  } else {
    m_type_ = nullptr;
  }
  if (from._internal_has_parent()) {
    parent_ = new ::PROTOBUF_NAMESPACE_ID::UInt64Value(*from.parent_);
  } else {
    parent_ = nullptr;
  }
  if (from._internal_has_episode()) {
    episode_ = new ::PROTOBUF_NAMESPACE_ID::UInt64Value(*from.episode_);
  } else {
    episode_ = nullptr;
  }
  if (from._internal_has_shot()) {
    shot_ = new ::PROTOBUF_NAMESPACE_ID::UInt64Value(*from.shot_);
  } else {
    shot_ = nullptr;
  }
  if (from._internal_has_season()) {
    season_ = new ::PROTOBUF_NAMESPACE_ID::UInt64Value(*from.season_);
  } else {
    season_ = nullptr;
  }
  if (from._internal_has_assets()) {
    assets_ = new ::PROTOBUF_NAMESPACE_ID::StringValue(*from.assets_);
  } else {
    assets_ = nullptr;
  }
  if (from._internal_has_beg_off_id()) {
    beg_off_id_ = new ::PROTOBUF_NAMESPACE_ID::UInt64Value(*from.beg_off_id_);
  } else {
    beg_off_id_ = nullptr;
  }
  if (from._internal_has_off_size()) {
    off_size_ = new ::PROTOBUF_NAMESPACE_ID::UInt64Value(*from.off_size_);
  } else {
    off_size_ = nullptr;
  }
  id_ = from.id_;
  // @@protoc_insertion_point(copy_constructor:doodle.metadata_database_filter)
}

void metadata_database_filter::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&begin_time_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&id_) -
    reinterpret_cast<char*>(&begin_time_)) + sizeof(id_));
}

metadata_database_filter::~metadata_database_filter() {
  // @@protoc_insertion_point(destructor:doodle.metadata_database_filter)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void metadata_database_filter::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete begin_time_;
  if (this != internal_default_instance()) delete end_time_;
  if (this != internal_default_instance()) delete m_type_;
  if (this != internal_default_instance()) delete parent_;
  if (this != internal_default_instance()) delete episode_;
  if (this != internal_default_instance()) delete shot_;
  if (this != internal_default_instance()) delete season_;
  if (this != internal_default_instance()) delete assets_;
  if (this != internal_default_instance()) delete beg_off_id_;
  if (this != internal_default_instance()) delete off_size_;
}

void metadata_database_filter::ArenaDtor(void* object) {
  metadata_database_filter* _this = reinterpret_cast< metadata_database_filter* >(object);
  (void)_this;
}
void metadata_database_filter::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void metadata_database_filter::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void metadata_database_filter::Clear() {
// @@protoc_insertion_point(message_clear_start:doodle.metadata_database_filter)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && begin_time_ != nullptr) {
    delete begin_time_;
  }
  begin_time_ = nullptr;
  if (GetArenaForAllocation() == nullptr && end_time_ != nullptr) {
    delete end_time_;
  }
  end_time_ = nullptr;
  if (GetArenaForAllocation() == nullptr && m_type_ != nullptr) {
    delete m_type_;
  }
  m_type_ = nullptr;
  if (GetArenaForAllocation() == nullptr && parent_ != nullptr) {
    delete parent_;
  }
  parent_ = nullptr;
  if (GetArenaForAllocation() == nullptr && episode_ != nullptr) {
    delete episode_;
  }
  episode_ = nullptr;
  if (GetArenaForAllocation() == nullptr && shot_ != nullptr) {
    delete shot_;
  }
  shot_ = nullptr;
  if (GetArenaForAllocation() == nullptr && season_ != nullptr) {
    delete season_;
  }
  season_ = nullptr;
  if (GetArenaForAllocation() == nullptr && assets_ != nullptr) {
    delete assets_;
  }
  assets_ = nullptr;
  if (GetArenaForAllocation() == nullptr && beg_off_id_ != nullptr) {
    delete beg_off_id_;
  }
  beg_off_id_ = nullptr;
  if (GetArenaForAllocation() == nullptr && off_size_ != nullptr) {
    delete off_size_;
  }
  off_size_ = nullptr;
  id_ = uint64_t{0u};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* metadata_database_filter::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp begin_time = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_begin_time(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp end_time = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_end_time(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.UInt64Value m_type = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_m_type(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.UInt64Value parent = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_parent(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.UInt64Value episode = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_episode(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.UInt64Value shot = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_shot(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.UInt64Value season = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_season(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.StringValue assets = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_assets(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.UInt64Value beg_off_id = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_beg_off_id(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.UInt64Value off_size = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_off_size(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* metadata_database_filter::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:doodle.metadata_database_filter)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 id = 1;
  if (this->_internal_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_id(), target);
  }

  // .google.protobuf.Timestamp begin_time = 2;
  if (this->_internal_has_begin_time()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::begin_time(this), target, stream);
  }

  // .google.protobuf.Timestamp end_time = 3;
  if (this->_internal_has_end_time()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::end_time(this), target, stream);
  }

  // .google.protobuf.UInt64Value m_type = 4;
  if (this->_internal_has_m_type()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::m_type(this), target, stream);
  }

  // .google.protobuf.UInt64Value parent = 5;
  if (this->_internal_has_parent()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::parent(this), target, stream);
  }

  // .google.protobuf.UInt64Value episode = 6;
  if (this->_internal_has_episode()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::episode(this), target, stream);
  }

  // .google.protobuf.UInt64Value shot = 7;
  if (this->_internal_has_shot()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        7, _Internal::shot(this), target, stream);
  }

  // .google.protobuf.UInt64Value season = 8;
  if (this->_internal_has_season()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        8, _Internal::season(this), target, stream);
  }

  // .google.protobuf.StringValue assets = 9;
  if (this->_internal_has_assets()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        9, _Internal::assets(this), target, stream);
  }

  // .google.protobuf.UInt64Value beg_off_id = 10;
  if (this->_internal_has_beg_off_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        10, _Internal::beg_off_id(this), target, stream);
  }

  // .google.protobuf.UInt64Value off_size = 11;
  if (this->_internal_has_off_size()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        11, _Internal::off_size(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:doodle.metadata_database_filter)
  return target;
}

size_t metadata_database_filter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:doodle.metadata_database_filter)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .google.protobuf.Timestamp begin_time = 2;
  if (this->_internal_has_begin_time()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *begin_time_);
  }

  // .google.protobuf.Timestamp end_time = 3;
  if (this->_internal_has_end_time()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *end_time_);
  }

  // .google.protobuf.UInt64Value m_type = 4;
  if (this->_internal_has_m_type()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *m_type_);
  }

  // .google.protobuf.UInt64Value parent = 5;
  if (this->_internal_has_parent()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *parent_);
  }

  // .google.protobuf.UInt64Value episode = 6;
  if (this->_internal_has_episode()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *episode_);
  }

  // .google.protobuf.UInt64Value shot = 7;
  if (this->_internal_has_shot()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *shot_);
  }

  // .google.protobuf.UInt64Value season = 8;
  if (this->_internal_has_season()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *season_);
  }

  // .google.protobuf.StringValue assets = 9;
  if (this->_internal_has_assets()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *assets_);
  }

  // .google.protobuf.UInt64Value beg_off_id = 10;
  if (this->_internal_has_beg_off_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *beg_off_id_);
  }

  // .google.protobuf.UInt64Value off_size = 11;
  if (this->_internal_has_off_size()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *off_size_);
  }

  // uint64 id = 1;
  if (this->_internal_id() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData metadata_database_filter::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    metadata_database_filter::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*metadata_database_filter::GetClassData() const { return &_class_data_; }

void metadata_database_filter::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<metadata_database_filter *>(to)->MergeFrom(
      static_cast<const metadata_database_filter &>(from));
}


void metadata_database_filter::MergeFrom(const metadata_database_filter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:doodle.metadata_database_filter)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_begin_time()) {
    _internal_mutable_begin_time()->::PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(from._internal_begin_time());
  }
  if (from._internal_has_end_time()) {
    _internal_mutable_end_time()->::PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(from._internal_end_time());
  }
  if (from._internal_has_m_type()) {
    _internal_mutable_m_type()->::PROTOBUF_NAMESPACE_ID::UInt64Value::MergeFrom(from._internal_m_type());
  }
  if (from._internal_has_parent()) {
    _internal_mutable_parent()->::PROTOBUF_NAMESPACE_ID::UInt64Value::MergeFrom(from._internal_parent());
  }
  if (from._internal_has_episode()) {
    _internal_mutable_episode()->::PROTOBUF_NAMESPACE_ID::UInt64Value::MergeFrom(from._internal_episode());
  }
  if (from._internal_has_shot()) {
    _internal_mutable_shot()->::PROTOBUF_NAMESPACE_ID::UInt64Value::MergeFrom(from._internal_shot());
  }
  if (from._internal_has_season()) {
    _internal_mutable_season()->::PROTOBUF_NAMESPACE_ID::UInt64Value::MergeFrom(from._internal_season());
  }
  if (from._internal_has_assets()) {
    _internal_mutable_assets()->::PROTOBUF_NAMESPACE_ID::StringValue::MergeFrom(from._internal_assets());
  }
  if (from._internal_has_beg_off_id()) {
    _internal_mutable_beg_off_id()->::PROTOBUF_NAMESPACE_ID::UInt64Value::MergeFrom(from._internal_beg_off_id());
  }
  if (from._internal_has_off_size()) {
    _internal_mutable_off_size()->::PROTOBUF_NAMESPACE_ID::UInt64Value::MergeFrom(from._internal_off_size());
  }
  if (from._internal_id() != 0) {
    _internal_set_id(from._internal_id());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void metadata_database_filter::CopyFrom(const metadata_database_filter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:doodle.metadata_database_filter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool metadata_database_filter::IsInitialized() const {
  return true;
}

void metadata_database_filter::InternalSwap(metadata_database_filter* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(metadata_database_filter, id_)
      + sizeof(metadata_database_filter::id_)
      - PROTOBUF_FIELD_OFFSET(metadata_database_filter, begin_time_)>(
          reinterpret_cast<char*>(&begin_time_),
          reinterpret_cast<char*>(&other->begin_time_));
}

::PROTOBUF_NAMESPACE_ID::Metadata metadata_database_filter::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_metadata_5fserver_2eproto_getter, &descriptor_table_metadata_5fserver_2eproto_once,
      file_level_metadata_metadata_5fserver_2eproto[1]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace doodle
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::doodle::metadata_database* Arena::CreateMaybeMessage< ::doodle::metadata_database >(Arena* arena) {
  return Arena::CreateMessageInternal< ::doodle::metadata_database >(arena);
}
template<> PROTOBUF_NOINLINE ::doodle::metadata_database_filter* Arena::CreateMaybeMessage< ::doodle::metadata_database_filter >(Arena* arena) {
  return Arena::CreateMessageInternal< ::doodle::metadata_database_filter >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
