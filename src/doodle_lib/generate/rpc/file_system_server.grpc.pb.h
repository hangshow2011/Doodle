// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: file_system_server.proto
#ifndef GRPC_file_5fsystem_5fserver_2eproto__INCLUDED
#define GRPC_file_5fsystem_5fserver_2eproto__INCLUDED

#include "file_system_server.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_generic_service.h>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/client_context.h>
#include <grpcpp/impl/codegen/completion_queue.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/proto_utils.h>
#include <grpcpp/impl/codegen/rpc_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/status.h>
#include <grpcpp/impl/codegen/stub_options.h>
#include <grpcpp/impl/codegen/sync_stream.h>

namespace doodle {

class file_system_server final {
 public:
  static constexpr char const* service_full_name() {
    return "doodle.file_system_server";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    virtual ::grpc::Status get_info(::grpc::ClientContext* context, const ::doodle::file_info_server& request, ::doodle::file_info_server* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::doodle::file_info_server>> Asyncget_info(::grpc::ClientContext* context, const ::doodle::file_info_server& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::doodle::file_info_server>>(Asyncget_infoRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::doodle::file_info_server>> PrepareAsyncget_info(::grpc::ClientContext* context, const ::doodle::file_info_server& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::doodle::file_info_server>>(PrepareAsyncget_infoRaw(context, request, cq));
    }
    virtual ::grpc::Status get_hash(::grpc::ClientContext* context, const ::doodle::file_info_server& request, ::doodle::file_info_server* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::doodle::file_info_server>> Asyncget_hash(::grpc::ClientContext* context, const ::doodle::file_info_server& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::doodle::file_info_server>>(Asyncget_hashRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::doodle::file_info_server>> PrepareAsyncget_hash(::grpc::ClientContext* context, const ::doodle::file_info_server& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::doodle::file_info_server>>(PrepareAsyncget_hashRaw(context, request, cq));
    }
    virtual ::grpc::Status is_exist(::grpc::ClientContext* context, const ::doodle::file_info_server& request, ::doodle::file_info_server* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::doodle::file_info_server>> Asyncis_exist(::grpc::ClientContext* context, const ::doodle::file_info_server& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::doodle::file_info_server>>(Asyncis_existRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::doodle::file_info_server>> PrepareAsyncis_exist(::grpc::ClientContext* context, const ::doodle::file_info_server& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::doodle::file_info_server>>(PrepareAsyncis_existRaw(context, request, cq));
    }
    virtual ::grpc::Status get_size(::grpc::ClientContext* context, const ::doodle::file_info_server& request, ::doodle::file_info_server* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::doodle::file_info_server>> Asyncget_size(::grpc::ClientContext* context, const ::doodle::file_info_server& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::doodle::file_info_server>>(Asyncget_sizeRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::doodle::file_info_server>> PrepareAsyncget_size(::grpc::ClientContext* context, const ::doodle::file_info_server& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::doodle::file_info_server>>(PrepareAsyncget_sizeRaw(context, request, cq));
    }
    virtual ::grpc::Status is_folder(::grpc::ClientContext* context, const ::doodle::file_info_server& request, ::doodle::file_info_server* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::doodle::file_info_server>> Asyncis_folder(::grpc::ClientContext* context, const ::doodle::file_info_server& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::doodle::file_info_server>>(Asyncis_folderRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::doodle::file_info_server>> PrepareAsyncis_folder(::grpc::ClientContext* context, const ::doodle::file_info_server& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::doodle::file_info_server>>(PrepareAsyncis_folderRaw(context, request, cq));
    }
    virtual ::grpc::Status get_timestamp(::grpc::ClientContext* context, const ::doodle::file_info_server& request, ::doodle::file_info_server* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::doodle::file_info_server>> Asyncget_timestamp(::grpc::ClientContext* context, const ::doodle::file_info_server& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::doodle::file_info_server>>(Asyncget_timestampRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::doodle::file_info_server>> PrepareAsyncget_timestamp(::grpc::ClientContext* context, const ::doodle::file_info_server& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::doodle::file_info_server>>(PrepareAsyncget_timestampRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientReaderInterface< ::doodle::file_info_server>> get_list(::grpc::ClientContext* context, const ::doodle::file_info_server& request) {
      return std::unique_ptr< ::grpc::ClientReaderInterface< ::doodle::file_info_server>>(get_listRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::doodle::file_info_server>> Asyncget_list(::grpc::ClientContext* context, const ::doodle::file_info_server& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::doodle::file_info_server>>(Asyncget_listRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::doodle::file_info_server>> PrepareAsyncget_list(::grpc::ClientContext* context, const ::doodle::file_info_server& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::doodle::file_info_server>>(PrepareAsyncget_listRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientReaderInterface< ::doodle::file_stream_server>> download(::grpc::ClientContext* context, const ::doodle::file_info_server& request) {
      return std::unique_ptr< ::grpc::ClientReaderInterface< ::doodle::file_stream_server>>(downloadRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::doodle::file_stream_server>> Asyncdownload(::grpc::ClientContext* context, const ::doodle::file_info_server& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::doodle::file_stream_server>>(AsyncdownloadRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::doodle::file_stream_server>> PrepareAsyncdownload(::grpc::ClientContext* context, const ::doodle::file_info_server& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::doodle::file_stream_server>>(PrepareAsyncdownloadRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientWriterInterface< ::doodle::file_stream_server>> upload(::grpc::ClientContext* context, ::doodle::file_info_server* response) {
      return std::unique_ptr< ::grpc::ClientWriterInterface< ::doodle::file_stream_server>>(uploadRaw(context, response));
    }
    std::unique_ptr< ::grpc::ClientAsyncWriterInterface< ::doodle::file_stream_server>> Asyncupload(::grpc::ClientContext* context, ::doodle::file_info_server* response, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncWriterInterface< ::doodle::file_stream_server>>(AsyncuploadRaw(context, response, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncWriterInterface< ::doodle::file_stream_server>> PrepareAsyncupload(::grpc::ClientContext* context, ::doodle::file_info_server* response, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncWriterInterface< ::doodle::file_stream_server>>(PrepareAsyncuploadRaw(context, response, cq));
    }
    virtual ::grpc::Status move(::grpc::ClientContext* context, const ::doodle::file_info_move_server& request, ::doodle::file_info_server* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::doodle::file_info_server>> Asyncmove(::grpc::ClientContext* context, const ::doodle::file_info_move_server& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::doodle::file_info_server>>(AsyncmoveRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::doodle::file_info_server>> PrepareAsyncmove(::grpc::ClientContext* context, const ::doodle::file_info_move_server& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::doodle::file_info_server>>(PrepareAsyncmoveRaw(context, request, cq));
    }
    class async_interface {
     public:
      virtual ~async_interface() {}
      virtual void get_info(::grpc::ClientContext* context, const ::doodle::file_info_server* request, ::doodle::file_info_server* response, std::function<void(::grpc::Status)>) = 0;
      virtual void get_info(::grpc::ClientContext* context, const ::doodle::file_info_server* request, ::doodle::file_info_server* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void get_hash(::grpc::ClientContext* context, const ::doodle::file_info_server* request, ::doodle::file_info_server* response, std::function<void(::grpc::Status)>) = 0;
      virtual void get_hash(::grpc::ClientContext* context, const ::doodle::file_info_server* request, ::doodle::file_info_server* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void is_exist(::grpc::ClientContext* context, const ::doodle::file_info_server* request, ::doodle::file_info_server* response, std::function<void(::grpc::Status)>) = 0;
      virtual void is_exist(::grpc::ClientContext* context, const ::doodle::file_info_server* request, ::doodle::file_info_server* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void get_size(::grpc::ClientContext* context, const ::doodle::file_info_server* request, ::doodle::file_info_server* response, std::function<void(::grpc::Status)>) = 0;
      virtual void get_size(::grpc::ClientContext* context, const ::doodle::file_info_server* request, ::doodle::file_info_server* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void is_folder(::grpc::ClientContext* context, const ::doodle::file_info_server* request, ::doodle::file_info_server* response, std::function<void(::grpc::Status)>) = 0;
      virtual void is_folder(::grpc::ClientContext* context, const ::doodle::file_info_server* request, ::doodle::file_info_server* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void get_timestamp(::grpc::ClientContext* context, const ::doodle::file_info_server* request, ::doodle::file_info_server* response, std::function<void(::grpc::Status)>) = 0;
      virtual void get_timestamp(::grpc::ClientContext* context, const ::doodle::file_info_server* request, ::doodle::file_info_server* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void get_list(::grpc::ClientContext* context, const ::doodle::file_info_server* request, ::grpc::ClientReadReactor< ::doodle::file_info_server>* reactor) = 0;
      virtual void download(::grpc::ClientContext* context, const ::doodle::file_info_server* request, ::grpc::ClientReadReactor< ::doodle::file_stream_server>* reactor) = 0;
      virtual void upload(::grpc::ClientContext* context, ::doodle::file_info_server* response, ::grpc::ClientWriteReactor< ::doodle::file_stream_server>* reactor) = 0;
      virtual void move(::grpc::ClientContext* context, const ::doodle::file_info_move_server* request, ::doodle::file_info_server* response, std::function<void(::grpc::Status)>) = 0;
      virtual void move(::grpc::ClientContext* context, const ::doodle::file_info_move_server* request, ::doodle::file_info_server* response, ::grpc::ClientUnaryReactor* reactor) = 0;
    };
    typedef class async_interface experimental_async_interface;
    virtual class async_interface* async() { return nullptr; }
    class async_interface* experimental_async() { return async(); }
   private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::doodle::file_info_server>* Asyncget_infoRaw(::grpc::ClientContext* context, const ::doodle::file_info_server& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::doodle::file_info_server>* PrepareAsyncget_infoRaw(::grpc::ClientContext* context, const ::doodle::file_info_server& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::doodle::file_info_server>* Asyncget_hashRaw(::grpc::ClientContext* context, const ::doodle::file_info_server& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::doodle::file_info_server>* PrepareAsyncget_hashRaw(::grpc::ClientContext* context, const ::doodle::file_info_server& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::doodle::file_info_server>* Asyncis_existRaw(::grpc::ClientContext* context, const ::doodle::file_info_server& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::doodle::file_info_server>* PrepareAsyncis_existRaw(::grpc::ClientContext* context, const ::doodle::file_info_server& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::doodle::file_info_server>* Asyncget_sizeRaw(::grpc::ClientContext* context, const ::doodle::file_info_server& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::doodle::file_info_server>* PrepareAsyncget_sizeRaw(::grpc::ClientContext* context, const ::doodle::file_info_server& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::doodle::file_info_server>* Asyncis_folderRaw(::grpc::ClientContext* context, const ::doodle::file_info_server& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::doodle::file_info_server>* PrepareAsyncis_folderRaw(::grpc::ClientContext* context, const ::doodle::file_info_server& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::doodle::file_info_server>* Asyncget_timestampRaw(::grpc::ClientContext* context, const ::doodle::file_info_server& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::doodle::file_info_server>* PrepareAsyncget_timestampRaw(::grpc::ClientContext* context, const ::doodle::file_info_server& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientReaderInterface< ::doodle::file_info_server>* get_listRaw(::grpc::ClientContext* context, const ::doodle::file_info_server& request) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::doodle::file_info_server>* Asyncget_listRaw(::grpc::ClientContext* context, const ::doodle::file_info_server& request, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::doodle::file_info_server>* PrepareAsyncget_listRaw(::grpc::ClientContext* context, const ::doodle::file_info_server& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientReaderInterface< ::doodle::file_stream_server>* downloadRaw(::grpc::ClientContext* context, const ::doodle::file_info_server& request) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::doodle::file_stream_server>* AsyncdownloadRaw(::grpc::ClientContext* context, const ::doodle::file_info_server& request, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::doodle::file_stream_server>* PrepareAsyncdownloadRaw(::grpc::ClientContext* context, const ::doodle::file_info_server& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientWriterInterface< ::doodle::file_stream_server>* uploadRaw(::grpc::ClientContext* context, ::doodle::file_info_server* response) = 0;
    virtual ::grpc::ClientAsyncWriterInterface< ::doodle::file_stream_server>* AsyncuploadRaw(::grpc::ClientContext* context, ::doodle::file_info_server* response, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncWriterInterface< ::doodle::file_stream_server>* PrepareAsyncuploadRaw(::grpc::ClientContext* context, ::doodle::file_info_server* response, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::doodle::file_info_server>* AsyncmoveRaw(::grpc::ClientContext* context, const ::doodle::file_info_move_server& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::doodle::file_info_server>* PrepareAsyncmoveRaw(::grpc::ClientContext* context, const ::doodle::file_info_move_server& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());
    ::grpc::Status get_info(::grpc::ClientContext* context, const ::doodle::file_info_server& request, ::doodle::file_info_server* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::doodle::file_info_server>> Asyncget_info(::grpc::ClientContext* context, const ::doodle::file_info_server& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::doodle::file_info_server>>(Asyncget_infoRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::doodle::file_info_server>> PrepareAsyncget_info(::grpc::ClientContext* context, const ::doodle::file_info_server& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::doodle::file_info_server>>(PrepareAsyncget_infoRaw(context, request, cq));
    }
    ::grpc::Status get_hash(::grpc::ClientContext* context, const ::doodle::file_info_server& request, ::doodle::file_info_server* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::doodle::file_info_server>> Asyncget_hash(::grpc::ClientContext* context, const ::doodle::file_info_server& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::doodle::file_info_server>>(Asyncget_hashRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::doodle::file_info_server>> PrepareAsyncget_hash(::grpc::ClientContext* context, const ::doodle::file_info_server& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::doodle::file_info_server>>(PrepareAsyncget_hashRaw(context, request, cq));
    }
    ::grpc::Status is_exist(::grpc::ClientContext* context, const ::doodle::file_info_server& request, ::doodle::file_info_server* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::doodle::file_info_server>> Asyncis_exist(::grpc::ClientContext* context, const ::doodle::file_info_server& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::doodle::file_info_server>>(Asyncis_existRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::doodle::file_info_server>> PrepareAsyncis_exist(::grpc::ClientContext* context, const ::doodle::file_info_server& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::doodle::file_info_server>>(PrepareAsyncis_existRaw(context, request, cq));
    }
    ::grpc::Status get_size(::grpc::ClientContext* context, const ::doodle::file_info_server& request, ::doodle::file_info_server* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::doodle::file_info_server>> Asyncget_size(::grpc::ClientContext* context, const ::doodle::file_info_server& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::doodle::file_info_server>>(Asyncget_sizeRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::doodle::file_info_server>> PrepareAsyncget_size(::grpc::ClientContext* context, const ::doodle::file_info_server& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::doodle::file_info_server>>(PrepareAsyncget_sizeRaw(context, request, cq));
    }
    ::grpc::Status is_folder(::grpc::ClientContext* context, const ::doodle::file_info_server& request, ::doodle::file_info_server* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::doodle::file_info_server>> Asyncis_folder(::grpc::ClientContext* context, const ::doodle::file_info_server& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::doodle::file_info_server>>(Asyncis_folderRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::doodle::file_info_server>> PrepareAsyncis_folder(::grpc::ClientContext* context, const ::doodle::file_info_server& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::doodle::file_info_server>>(PrepareAsyncis_folderRaw(context, request, cq));
    }
    ::grpc::Status get_timestamp(::grpc::ClientContext* context, const ::doodle::file_info_server& request, ::doodle::file_info_server* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::doodle::file_info_server>> Asyncget_timestamp(::grpc::ClientContext* context, const ::doodle::file_info_server& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::doodle::file_info_server>>(Asyncget_timestampRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::doodle::file_info_server>> PrepareAsyncget_timestamp(::grpc::ClientContext* context, const ::doodle::file_info_server& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::doodle::file_info_server>>(PrepareAsyncget_timestampRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientReader< ::doodle::file_info_server>> get_list(::grpc::ClientContext* context, const ::doodle::file_info_server& request) {
      return std::unique_ptr< ::grpc::ClientReader< ::doodle::file_info_server>>(get_listRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::doodle::file_info_server>> Asyncget_list(::grpc::ClientContext* context, const ::doodle::file_info_server& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::doodle::file_info_server>>(Asyncget_listRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::doodle::file_info_server>> PrepareAsyncget_list(::grpc::ClientContext* context, const ::doodle::file_info_server& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::doodle::file_info_server>>(PrepareAsyncget_listRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientReader< ::doodle::file_stream_server>> download(::grpc::ClientContext* context, const ::doodle::file_info_server& request) {
      return std::unique_ptr< ::grpc::ClientReader< ::doodle::file_stream_server>>(downloadRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::doodle::file_stream_server>> Asyncdownload(::grpc::ClientContext* context, const ::doodle::file_info_server& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::doodle::file_stream_server>>(AsyncdownloadRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::doodle::file_stream_server>> PrepareAsyncdownload(::grpc::ClientContext* context, const ::doodle::file_info_server& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::doodle::file_stream_server>>(PrepareAsyncdownloadRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientWriter< ::doodle::file_stream_server>> upload(::grpc::ClientContext* context, ::doodle::file_info_server* response) {
      return std::unique_ptr< ::grpc::ClientWriter< ::doodle::file_stream_server>>(uploadRaw(context, response));
    }
    std::unique_ptr< ::grpc::ClientAsyncWriter< ::doodle::file_stream_server>> Asyncupload(::grpc::ClientContext* context, ::doodle::file_info_server* response, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncWriter< ::doodle::file_stream_server>>(AsyncuploadRaw(context, response, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncWriter< ::doodle::file_stream_server>> PrepareAsyncupload(::grpc::ClientContext* context, ::doodle::file_info_server* response, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncWriter< ::doodle::file_stream_server>>(PrepareAsyncuploadRaw(context, response, cq));
    }
    ::grpc::Status move(::grpc::ClientContext* context, const ::doodle::file_info_move_server& request, ::doodle::file_info_server* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::doodle::file_info_server>> Asyncmove(::grpc::ClientContext* context, const ::doodle::file_info_move_server& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::doodle::file_info_server>>(AsyncmoveRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::doodle::file_info_server>> PrepareAsyncmove(::grpc::ClientContext* context, const ::doodle::file_info_move_server& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::doodle::file_info_server>>(PrepareAsyncmoveRaw(context, request, cq));
    }
    class async final :
      public StubInterface::async_interface {
     public:
      void get_info(::grpc::ClientContext* context, const ::doodle::file_info_server* request, ::doodle::file_info_server* response, std::function<void(::grpc::Status)>) override;
      void get_info(::grpc::ClientContext* context, const ::doodle::file_info_server* request, ::doodle::file_info_server* response, ::grpc::ClientUnaryReactor* reactor) override;
      void get_hash(::grpc::ClientContext* context, const ::doodle::file_info_server* request, ::doodle::file_info_server* response, std::function<void(::grpc::Status)>) override;
      void get_hash(::grpc::ClientContext* context, const ::doodle::file_info_server* request, ::doodle::file_info_server* response, ::grpc::ClientUnaryReactor* reactor) override;
      void is_exist(::grpc::ClientContext* context, const ::doodle::file_info_server* request, ::doodle::file_info_server* response, std::function<void(::grpc::Status)>) override;
      void is_exist(::grpc::ClientContext* context, const ::doodle::file_info_server* request, ::doodle::file_info_server* response, ::grpc::ClientUnaryReactor* reactor) override;
      void get_size(::grpc::ClientContext* context, const ::doodle::file_info_server* request, ::doodle::file_info_server* response, std::function<void(::grpc::Status)>) override;
      void get_size(::grpc::ClientContext* context, const ::doodle::file_info_server* request, ::doodle::file_info_server* response, ::grpc::ClientUnaryReactor* reactor) override;
      void is_folder(::grpc::ClientContext* context, const ::doodle::file_info_server* request, ::doodle::file_info_server* response, std::function<void(::grpc::Status)>) override;
      void is_folder(::grpc::ClientContext* context, const ::doodle::file_info_server* request, ::doodle::file_info_server* response, ::grpc::ClientUnaryReactor* reactor) override;
      void get_timestamp(::grpc::ClientContext* context, const ::doodle::file_info_server* request, ::doodle::file_info_server* response, std::function<void(::grpc::Status)>) override;
      void get_timestamp(::grpc::ClientContext* context, const ::doodle::file_info_server* request, ::doodle::file_info_server* response, ::grpc::ClientUnaryReactor* reactor) override;
      void get_list(::grpc::ClientContext* context, const ::doodle::file_info_server* request, ::grpc::ClientReadReactor< ::doodle::file_info_server>* reactor) override;
      void download(::grpc::ClientContext* context, const ::doodle::file_info_server* request, ::grpc::ClientReadReactor< ::doodle::file_stream_server>* reactor) override;
      void upload(::grpc::ClientContext* context, ::doodle::file_info_server* response, ::grpc::ClientWriteReactor< ::doodle::file_stream_server>* reactor) override;
      void move(::grpc::ClientContext* context, const ::doodle::file_info_move_server* request, ::doodle::file_info_server* response, std::function<void(::grpc::Status)>) override;
      void move(::grpc::ClientContext* context, const ::doodle::file_info_move_server* request, ::doodle::file_info_server* response, ::grpc::ClientUnaryReactor* reactor) override;
     private:
      friend class Stub;
      explicit async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class async* async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::doodle::file_info_server>* Asyncget_infoRaw(::grpc::ClientContext* context, const ::doodle::file_info_server& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::doodle::file_info_server>* PrepareAsyncget_infoRaw(::grpc::ClientContext* context, const ::doodle::file_info_server& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::doodle::file_info_server>* Asyncget_hashRaw(::grpc::ClientContext* context, const ::doodle::file_info_server& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::doodle::file_info_server>* PrepareAsyncget_hashRaw(::grpc::ClientContext* context, const ::doodle::file_info_server& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::doodle::file_info_server>* Asyncis_existRaw(::grpc::ClientContext* context, const ::doodle::file_info_server& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::doodle::file_info_server>* PrepareAsyncis_existRaw(::grpc::ClientContext* context, const ::doodle::file_info_server& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::doodle::file_info_server>* Asyncget_sizeRaw(::grpc::ClientContext* context, const ::doodle::file_info_server& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::doodle::file_info_server>* PrepareAsyncget_sizeRaw(::grpc::ClientContext* context, const ::doodle::file_info_server& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::doodle::file_info_server>* Asyncis_folderRaw(::grpc::ClientContext* context, const ::doodle::file_info_server& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::doodle::file_info_server>* PrepareAsyncis_folderRaw(::grpc::ClientContext* context, const ::doodle::file_info_server& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::doodle::file_info_server>* Asyncget_timestampRaw(::grpc::ClientContext* context, const ::doodle::file_info_server& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::doodle::file_info_server>* PrepareAsyncget_timestampRaw(::grpc::ClientContext* context, const ::doodle::file_info_server& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientReader< ::doodle::file_info_server>* get_listRaw(::grpc::ClientContext* context, const ::doodle::file_info_server& request) override;
    ::grpc::ClientAsyncReader< ::doodle::file_info_server>* Asyncget_listRaw(::grpc::ClientContext* context, const ::doodle::file_info_server& request, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncReader< ::doodle::file_info_server>* PrepareAsyncget_listRaw(::grpc::ClientContext* context, const ::doodle::file_info_server& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientReader< ::doodle::file_stream_server>* downloadRaw(::grpc::ClientContext* context, const ::doodle::file_info_server& request) override;
    ::grpc::ClientAsyncReader< ::doodle::file_stream_server>* AsyncdownloadRaw(::grpc::ClientContext* context, const ::doodle::file_info_server& request, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncReader< ::doodle::file_stream_server>* PrepareAsyncdownloadRaw(::grpc::ClientContext* context, const ::doodle::file_info_server& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientWriter< ::doodle::file_stream_server>* uploadRaw(::grpc::ClientContext* context, ::doodle::file_info_server* response) override;
    ::grpc::ClientAsyncWriter< ::doodle::file_stream_server>* AsyncuploadRaw(::grpc::ClientContext* context, ::doodle::file_info_server* response, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncWriter< ::doodle::file_stream_server>* PrepareAsyncuploadRaw(::grpc::ClientContext* context, ::doodle::file_info_server* response, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::doodle::file_info_server>* AsyncmoveRaw(::grpc::ClientContext* context, const ::doodle::file_info_move_server& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::doodle::file_info_server>* PrepareAsyncmoveRaw(::grpc::ClientContext* context, const ::doodle::file_info_move_server& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_get_info_;
    const ::grpc::internal::RpcMethod rpcmethod_get_hash_;
    const ::grpc::internal::RpcMethod rpcmethod_is_exist_;
    const ::grpc::internal::RpcMethod rpcmethod_get_size_;
    const ::grpc::internal::RpcMethod rpcmethod_is_folder_;
    const ::grpc::internal::RpcMethod rpcmethod_get_timestamp_;
    const ::grpc::internal::RpcMethod rpcmethod_get_list_;
    const ::grpc::internal::RpcMethod rpcmethod_download_;
    const ::grpc::internal::RpcMethod rpcmethod_upload_;
    const ::grpc::internal::RpcMethod rpcmethod_move_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    virtual ::grpc::Status get_info(::grpc::ServerContext* context, const ::doodle::file_info_server* request, ::doodle::file_info_server* response);
    virtual ::grpc::Status get_hash(::grpc::ServerContext* context, const ::doodle::file_info_server* request, ::doodle::file_info_server* response);
    virtual ::grpc::Status is_exist(::grpc::ServerContext* context, const ::doodle::file_info_server* request, ::doodle::file_info_server* response);
    virtual ::grpc::Status get_size(::grpc::ServerContext* context, const ::doodle::file_info_server* request, ::doodle::file_info_server* response);
    virtual ::grpc::Status is_folder(::grpc::ServerContext* context, const ::doodle::file_info_server* request, ::doodle::file_info_server* response);
    virtual ::grpc::Status get_timestamp(::grpc::ServerContext* context, const ::doodle::file_info_server* request, ::doodle::file_info_server* response);
    virtual ::grpc::Status get_list(::grpc::ServerContext* context, const ::doodle::file_info_server* request, ::grpc::ServerWriter< ::doodle::file_info_server>* writer);
    virtual ::grpc::Status download(::grpc::ServerContext* context, const ::doodle::file_info_server* request, ::grpc::ServerWriter< ::doodle::file_stream_server>* writer);
    virtual ::grpc::Status upload(::grpc::ServerContext* context, ::grpc::ServerReader< ::doodle::file_stream_server>* reader, ::doodle::file_info_server* response);
    virtual ::grpc::Status move(::grpc::ServerContext* context, const ::doodle::file_info_move_server* request, ::doodle::file_info_server* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_get_info : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_get_info() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_get_info() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status get_info(::grpc::ServerContext* /*context*/, const ::doodle::file_info_server* /*request*/, ::doodle::file_info_server* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requestget_info(::grpc::ServerContext* context, ::doodle::file_info_server* request, ::grpc::ServerAsyncResponseWriter< ::doodle::file_info_server>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_get_hash : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_get_hash() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_get_hash() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status get_hash(::grpc::ServerContext* /*context*/, const ::doodle::file_info_server* /*request*/, ::doodle::file_info_server* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requestget_hash(::grpc::ServerContext* context, ::doodle::file_info_server* request, ::grpc::ServerAsyncResponseWriter< ::doodle::file_info_server>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_is_exist : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_is_exist() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_is_exist() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status is_exist(::grpc::ServerContext* /*context*/, const ::doodle::file_info_server* /*request*/, ::doodle::file_info_server* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requestis_exist(::grpc::ServerContext* context, ::doodle::file_info_server* request, ::grpc::ServerAsyncResponseWriter< ::doodle::file_info_server>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_get_size : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_get_size() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_get_size() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status get_size(::grpc::ServerContext* /*context*/, const ::doodle::file_info_server* /*request*/, ::doodle::file_info_server* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requestget_size(::grpc::ServerContext* context, ::doodle::file_info_server* request, ::grpc::ServerAsyncResponseWriter< ::doodle::file_info_server>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_is_folder : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_is_folder() {
      ::grpc::Service::MarkMethodAsync(4);
    }
    ~WithAsyncMethod_is_folder() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status is_folder(::grpc::ServerContext* /*context*/, const ::doodle::file_info_server* /*request*/, ::doodle::file_info_server* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requestis_folder(::grpc::ServerContext* context, ::doodle::file_info_server* request, ::grpc::ServerAsyncResponseWriter< ::doodle::file_info_server>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_get_timestamp : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_get_timestamp() {
      ::grpc::Service::MarkMethodAsync(5);
    }
    ~WithAsyncMethod_get_timestamp() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status get_timestamp(::grpc::ServerContext* /*context*/, const ::doodle::file_info_server* /*request*/, ::doodle::file_info_server* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requestget_timestamp(::grpc::ServerContext* context, ::doodle::file_info_server* request, ::grpc::ServerAsyncResponseWriter< ::doodle::file_info_server>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(5, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_get_list : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_get_list() {
      ::grpc::Service::MarkMethodAsync(6);
    }
    ~WithAsyncMethod_get_list() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status get_list(::grpc::ServerContext* /*context*/, const ::doodle::file_info_server* /*request*/, ::grpc::ServerWriter< ::doodle::file_info_server>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requestget_list(::grpc::ServerContext* context, ::doodle::file_info_server* request, ::grpc::ServerAsyncWriter< ::doodle::file_info_server>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(6, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_download : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_download() {
      ::grpc::Service::MarkMethodAsync(7);
    }
    ~WithAsyncMethod_download() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status download(::grpc::ServerContext* /*context*/, const ::doodle::file_info_server* /*request*/, ::grpc::ServerWriter< ::doodle::file_stream_server>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requestdownload(::grpc::ServerContext* context, ::doodle::file_info_server* request, ::grpc::ServerAsyncWriter< ::doodle::file_stream_server>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(7, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_upload : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_upload() {
      ::grpc::Service::MarkMethodAsync(8);
    }
    ~WithAsyncMethod_upload() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status upload(::grpc::ServerContext* /*context*/, ::grpc::ServerReader< ::doodle::file_stream_server>* /*reader*/, ::doodle::file_info_server* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requestupload(::grpc::ServerContext* context, ::grpc::ServerAsyncReader< ::doodle::file_info_server, ::doodle::file_stream_server>* reader, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncClientStreaming(8, context, reader, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_move : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_move() {
      ::grpc::Service::MarkMethodAsync(9);
    }
    ~WithAsyncMethod_move() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status move(::grpc::ServerContext* /*context*/, const ::doodle::file_info_move_server* /*request*/, ::doodle::file_info_server* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requestmove(::grpc::ServerContext* context, ::doodle::file_info_move_server* request, ::grpc::ServerAsyncResponseWriter< ::doodle::file_info_server>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(9, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_get_info<WithAsyncMethod_get_hash<WithAsyncMethod_is_exist<WithAsyncMethod_get_size<WithAsyncMethod_is_folder<WithAsyncMethod_get_timestamp<WithAsyncMethod_get_list<WithAsyncMethod_download<WithAsyncMethod_upload<WithAsyncMethod_move<Service > > > > > > > > > > AsyncService;
  template <class BaseClass>
  class WithCallbackMethod_get_info : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_get_info() {
      ::grpc::Service::MarkMethodCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::doodle::file_info_server, ::doodle::file_info_server>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::doodle::file_info_server* request, ::doodle::file_info_server* response) { return this->get_info(context, request, response); }));}
    void SetMessageAllocatorFor_get_info(
        ::grpc::MessageAllocator< ::doodle::file_info_server, ::doodle::file_info_server>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::doodle::file_info_server, ::doodle::file_info_server>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_get_info() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status get_info(::grpc::ServerContext* /*context*/, const ::doodle::file_info_server* /*request*/, ::doodle::file_info_server* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* get_info(
      ::grpc::CallbackServerContext* /*context*/, const ::doodle::file_info_server* /*request*/, ::doodle::file_info_server* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_get_hash : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_get_hash() {
      ::grpc::Service::MarkMethodCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::doodle::file_info_server, ::doodle::file_info_server>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::doodle::file_info_server* request, ::doodle::file_info_server* response) { return this->get_hash(context, request, response); }));}
    void SetMessageAllocatorFor_get_hash(
        ::grpc::MessageAllocator< ::doodle::file_info_server, ::doodle::file_info_server>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(1);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::doodle::file_info_server, ::doodle::file_info_server>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_get_hash() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status get_hash(::grpc::ServerContext* /*context*/, const ::doodle::file_info_server* /*request*/, ::doodle::file_info_server* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* get_hash(
      ::grpc::CallbackServerContext* /*context*/, const ::doodle::file_info_server* /*request*/, ::doodle::file_info_server* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_is_exist : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_is_exist() {
      ::grpc::Service::MarkMethodCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::doodle::file_info_server, ::doodle::file_info_server>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::doodle::file_info_server* request, ::doodle::file_info_server* response) { return this->is_exist(context, request, response); }));}
    void SetMessageAllocatorFor_is_exist(
        ::grpc::MessageAllocator< ::doodle::file_info_server, ::doodle::file_info_server>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(2);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::doodle::file_info_server, ::doodle::file_info_server>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_is_exist() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status is_exist(::grpc::ServerContext* /*context*/, const ::doodle::file_info_server* /*request*/, ::doodle::file_info_server* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* is_exist(
      ::grpc::CallbackServerContext* /*context*/, const ::doodle::file_info_server* /*request*/, ::doodle::file_info_server* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_get_size : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_get_size() {
      ::grpc::Service::MarkMethodCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::doodle::file_info_server, ::doodle::file_info_server>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::doodle::file_info_server* request, ::doodle::file_info_server* response) { return this->get_size(context, request, response); }));}
    void SetMessageAllocatorFor_get_size(
        ::grpc::MessageAllocator< ::doodle::file_info_server, ::doodle::file_info_server>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(3);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::doodle::file_info_server, ::doodle::file_info_server>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_get_size() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status get_size(::grpc::ServerContext* /*context*/, const ::doodle::file_info_server* /*request*/, ::doodle::file_info_server* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* get_size(
      ::grpc::CallbackServerContext* /*context*/, const ::doodle::file_info_server* /*request*/, ::doodle::file_info_server* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_is_folder : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_is_folder() {
      ::grpc::Service::MarkMethodCallback(4,
          new ::grpc::internal::CallbackUnaryHandler< ::doodle::file_info_server, ::doodle::file_info_server>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::doodle::file_info_server* request, ::doodle::file_info_server* response) { return this->is_folder(context, request, response); }));}
    void SetMessageAllocatorFor_is_folder(
        ::grpc::MessageAllocator< ::doodle::file_info_server, ::doodle::file_info_server>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(4);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::doodle::file_info_server, ::doodle::file_info_server>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_is_folder() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status is_folder(::grpc::ServerContext* /*context*/, const ::doodle::file_info_server* /*request*/, ::doodle::file_info_server* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* is_folder(
      ::grpc::CallbackServerContext* /*context*/, const ::doodle::file_info_server* /*request*/, ::doodle::file_info_server* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_get_timestamp : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_get_timestamp() {
      ::grpc::Service::MarkMethodCallback(5,
          new ::grpc::internal::CallbackUnaryHandler< ::doodle::file_info_server, ::doodle::file_info_server>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::doodle::file_info_server* request, ::doodle::file_info_server* response) { return this->get_timestamp(context, request, response); }));}
    void SetMessageAllocatorFor_get_timestamp(
        ::grpc::MessageAllocator< ::doodle::file_info_server, ::doodle::file_info_server>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(5);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::doodle::file_info_server, ::doodle::file_info_server>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_get_timestamp() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status get_timestamp(::grpc::ServerContext* /*context*/, const ::doodle::file_info_server* /*request*/, ::doodle::file_info_server* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* get_timestamp(
      ::grpc::CallbackServerContext* /*context*/, const ::doodle::file_info_server* /*request*/, ::doodle::file_info_server* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_get_list : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_get_list() {
      ::grpc::Service::MarkMethodCallback(6,
          new ::grpc::internal::CallbackServerStreamingHandler< ::doodle::file_info_server, ::doodle::file_info_server>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::doodle::file_info_server* request) { return this->get_list(context, request); }));
    }
    ~WithCallbackMethod_get_list() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status get_list(::grpc::ServerContext* /*context*/, const ::doodle::file_info_server* /*request*/, ::grpc::ServerWriter< ::doodle::file_info_server>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerWriteReactor< ::doodle::file_info_server>* get_list(
      ::grpc::CallbackServerContext* /*context*/, const ::doodle::file_info_server* /*request*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_download : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_download() {
      ::grpc::Service::MarkMethodCallback(7,
          new ::grpc::internal::CallbackServerStreamingHandler< ::doodle::file_info_server, ::doodle::file_stream_server>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::doodle::file_info_server* request) { return this->download(context, request); }));
    }
    ~WithCallbackMethod_download() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status download(::grpc::ServerContext* /*context*/, const ::doodle::file_info_server* /*request*/, ::grpc::ServerWriter< ::doodle::file_stream_server>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerWriteReactor< ::doodle::file_stream_server>* download(
      ::grpc::CallbackServerContext* /*context*/, const ::doodle::file_info_server* /*request*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_upload : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_upload() {
      ::grpc::Service::MarkMethodCallback(8,
          new ::grpc::internal::CallbackClientStreamingHandler< ::doodle::file_stream_server, ::doodle::file_info_server>(
            [this](
                   ::grpc::CallbackServerContext* context, ::doodle::file_info_server* response) { return this->upload(context, response); }));
    }
    ~WithCallbackMethod_upload() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status upload(::grpc::ServerContext* /*context*/, ::grpc::ServerReader< ::doodle::file_stream_server>* /*reader*/, ::doodle::file_info_server* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerReadReactor< ::doodle::file_stream_server>* upload(
      ::grpc::CallbackServerContext* /*context*/, ::doodle::file_info_server* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_move : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_move() {
      ::grpc::Service::MarkMethodCallback(9,
          new ::grpc::internal::CallbackUnaryHandler< ::doodle::file_info_move_server, ::doodle::file_info_server>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::doodle::file_info_move_server* request, ::doodle::file_info_server* response) { return this->move(context, request, response); }));}
    void SetMessageAllocatorFor_move(
        ::grpc::MessageAllocator< ::doodle::file_info_move_server, ::doodle::file_info_server>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(9);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::doodle::file_info_move_server, ::doodle::file_info_server>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_move() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status move(::grpc::ServerContext* /*context*/, const ::doodle::file_info_move_server* /*request*/, ::doodle::file_info_server* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* move(
      ::grpc::CallbackServerContext* /*context*/, const ::doodle::file_info_move_server* /*request*/, ::doodle::file_info_server* /*response*/)  { return nullptr; }
  };
  typedef WithCallbackMethod_get_info<WithCallbackMethod_get_hash<WithCallbackMethod_is_exist<WithCallbackMethod_get_size<WithCallbackMethod_is_folder<WithCallbackMethod_get_timestamp<WithCallbackMethod_get_list<WithCallbackMethod_download<WithCallbackMethod_upload<WithCallbackMethod_move<Service > > > > > > > > > > CallbackService;
  typedef CallbackService ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_get_info : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_get_info() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_get_info() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status get_info(::grpc::ServerContext* /*context*/, const ::doodle::file_info_server* /*request*/, ::doodle::file_info_server* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_get_hash : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_get_hash() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_get_hash() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status get_hash(::grpc::ServerContext* /*context*/, const ::doodle::file_info_server* /*request*/, ::doodle::file_info_server* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_is_exist : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_is_exist() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_is_exist() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status is_exist(::grpc::ServerContext* /*context*/, const ::doodle::file_info_server* /*request*/, ::doodle::file_info_server* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_get_size : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_get_size() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_get_size() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status get_size(::grpc::ServerContext* /*context*/, const ::doodle::file_info_server* /*request*/, ::doodle::file_info_server* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_is_folder : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_is_folder() {
      ::grpc::Service::MarkMethodGeneric(4);
    }
    ~WithGenericMethod_is_folder() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status is_folder(::grpc::ServerContext* /*context*/, const ::doodle::file_info_server* /*request*/, ::doodle::file_info_server* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_get_timestamp : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_get_timestamp() {
      ::grpc::Service::MarkMethodGeneric(5);
    }
    ~WithGenericMethod_get_timestamp() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status get_timestamp(::grpc::ServerContext* /*context*/, const ::doodle::file_info_server* /*request*/, ::doodle::file_info_server* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_get_list : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_get_list() {
      ::grpc::Service::MarkMethodGeneric(6);
    }
    ~WithGenericMethod_get_list() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status get_list(::grpc::ServerContext* /*context*/, const ::doodle::file_info_server* /*request*/, ::grpc::ServerWriter< ::doodle::file_info_server>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_download : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_download() {
      ::grpc::Service::MarkMethodGeneric(7);
    }
    ~WithGenericMethod_download() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status download(::grpc::ServerContext* /*context*/, const ::doodle::file_info_server* /*request*/, ::grpc::ServerWriter< ::doodle::file_stream_server>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_upload : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_upload() {
      ::grpc::Service::MarkMethodGeneric(8);
    }
    ~WithGenericMethod_upload() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status upload(::grpc::ServerContext* /*context*/, ::grpc::ServerReader< ::doodle::file_stream_server>* /*reader*/, ::doodle::file_info_server* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_move : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_move() {
      ::grpc::Service::MarkMethodGeneric(9);
    }
    ~WithGenericMethod_move() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status move(::grpc::ServerContext* /*context*/, const ::doodle::file_info_move_server* /*request*/, ::doodle::file_info_server* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_get_info : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_get_info() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_get_info() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status get_info(::grpc::ServerContext* /*context*/, const ::doodle::file_info_server* /*request*/, ::doodle::file_info_server* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requestget_info(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_get_hash : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_get_hash() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_get_hash() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status get_hash(::grpc::ServerContext* /*context*/, const ::doodle::file_info_server* /*request*/, ::doodle::file_info_server* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requestget_hash(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_is_exist : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_is_exist() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_is_exist() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status is_exist(::grpc::ServerContext* /*context*/, const ::doodle::file_info_server* /*request*/, ::doodle::file_info_server* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requestis_exist(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_get_size : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_get_size() {
      ::grpc::Service::MarkMethodRaw(3);
    }
    ~WithRawMethod_get_size() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status get_size(::grpc::ServerContext* /*context*/, const ::doodle::file_info_server* /*request*/, ::doodle::file_info_server* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requestget_size(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_is_folder : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_is_folder() {
      ::grpc::Service::MarkMethodRaw(4);
    }
    ~WithRawMethod_is_folder() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status is_folder(::grpc::ServerContext* /*context*/, const ::doodle::file_info_server* /*request*/, ::doodle::file_info_server* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requestis_folder(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_get_timestamp : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_get_timestamp() {
      ::grpc::Service::MarkMethodRaw(5);
    }
    ~WithRawMethod_get_timestamp() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status get_timestamp(::grpc::ServerContext* /*context*/, const ::doodle::file_info_server* /*request*/, ::doodle::file_info_server* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requestget_timestamp(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(5, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_get_list : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_get_list() {
      ::grpc::Service::MarkMethodRaw(6);
    }
    ~WithRawMethod_get_list() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status get_list(::grpc::ServerContext* /*context*/, const ::doodle::file_info_server* /*request*/, ::grpc::ServerWriter< ::doodle::file_info_server>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requestget_list(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncWriter< ::grpc::ByteBuffer>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(6, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_download : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_download() {
      ::grpc::Service::MarkMethodRaw(7);
    }
    ~WithRawMethod_download() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status download(::grpc::ServerContext* /*context*/, const ::doodle::file_info_server* /*request*/, ::grpc::ServerWriter< ::doodle::file_stream_server>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requestdownload(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncWriter< ::grpc::ByteBuffer>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(7, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_upload : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_upload() {
      ::grpc::Service::MarkMethodRaw(8);
    }
    ~WithRawMethod_upload() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status upload(::grpc::ServerContext* /*context*/, ::grpc::ServerReader< ::doodle::file_stream_server>* /*reader*/, ::doodle::file_info_server* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requestupload(::grpc::ServerContext* context, ::grpc::ServerAsyncReader< ::grpc::ByteBuffer, ::grpc::ByteBuffer>* reader, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncClientStreaming(8, context, reader, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_move : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_move() {
      ::grpc::Service::MarkMethodRaw(9);
    }
    ~WithRawMethod_move() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status move(::grpc::ServerContext* /*context*/, const ::doodle::file_info_move_server* /*request*/, ::doodle::file_info_server* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requestmove(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(9, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_get_info : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_get_info() {
      ::grpc::Service::MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->get_info(context, request, response); }));
    }
    ~WithRawCallbackMethod_get_info() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status get_info(::grpc::ServerContext* /*context*/, const ::doodle::file_info_server* /*request*/, ::doodle::file_info_server* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* get_info(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_get_hash : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_get_hash() {
      ::grpc::Service::MarkMethodRawCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->get_hash(context, request, response); }));
    }
    ~WithRawCallbackMethod_get_hash() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status get_hash(::grpc::ServerContext* /*context*/, const ::doodle::file_info_server* /*request*/, ::doodle::file_info_server* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* get_hash(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_is_exist : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_is_exist() {
      ::grpc::Service::MarkMethodRawCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->is_exist(context, request, response); }));
    }
    ~WithRawCallbackMethod_is_exist() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status is_exist(::grpc::ServerContext* /*context*/, const ::doodle::file_info_server* /*request*/, ::doodle::file_info_server* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* is_exist(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_get_size : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_get_size() {
      ::grpc::Service::MarkMethodRawCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->get_size(context, request, response); }));
    }
    ~WithRawCallbackMethod_get_size() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status get_size(::grpc::ServerContext* /*context*/, const ::doodle::file_info_server* /*request*/, ::doodle::file_info_server* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* get_size(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_is_folder : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_is_folder() {
      ::grpc::Service::MarkMethodRawCallback(4,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->is_folder(context, request, response); }));
    }
    ~WithRawCallbackMethod_is_folder() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status is_folder(::grpc::ServerContext* /*context*/, const ::doodle::file_info_server* /*request*/, ::doodle::file_info_server* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* is_folder(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_get_timestamp : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_get_timestamp() {
      ::grpc::Service::MarkMethodRawCallback(5,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->get_timestamp(context, request, response); }));
    }
    ~WithRawCallbackMethod_get_timestamp() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status get_timestamp(::grpc::ServerContext* /*context*/, const ::doodle::file_info_server* /*request*/, ::doodle::file_info_server* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* get_timestamp(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_get_list : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_get_list() {
      ::grpc::Service::MarkMethodRawCallback(6,
          new ::grpc::internal::CallbackServerStreamingHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const::grpc::ByteBuffer* request) { return this->get_list(context, request); }));
    }
    ~WithRawCallbackMethod_get_list() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status get_list(::grpc::ServerContext* /*context*/, const ::doodle::file_info_server* /*request*/, ::grpc::ServerWriter< ::doodle::file_info_server>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerWriteReactor< ::grpc::ByteBuffer>* get_list(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_download : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_download() {
      ::grpc::Service::MarkMethodRawCallback(7,
          new ::grpc::internal::CallbackServerStreamingHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const::grpc::ByteBuffer* request) { return this->download(context, request); }));
    }
    ~WithRawCallbackMethod_download() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status download(::grpc::ServerContext* /*context*/, const ::doodle::file_info_server* /*request*/, ::grpc::ServerWriter< ::doodle::file_stream_server>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerWriteReactor< ::grpc::ByteBuffer>* download(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_upload : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_upload() {
      ::grpc::Service::MarkMethodRawCallback(8,
          new ::grpc::internal::CallbackClientStreamingHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, ::grpc::ByteBuffer* response) { return this->upload(context, response); }));
    }
    ~WithRawCallbackMethod_upload() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status upload(::grpc::ServerContext* /*context*/, ::grpc::ServerReader< ::doodle::file_stream_server>* /*reader*/, ::doodle::file_info_server* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerReadReactor< ::grpc::ByteBuffer>* upload(
      ::grpc::CallbackServerContext* /*context*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_move : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_move() {
      ::grpc::Service::MarkMethodRawCallback(9,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->move(context, request, response); }));
    }
    ~WithRawCallbackMethod_move() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status move(::grpc::ServerContext* /*context*/, const ::doodle::file_info_move_server* /*request*/, ::doodle::file_info_server* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* move(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_get_info : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_get_info() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler<
          ::doodle::file_info_server, ::doodle::file_info_server>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::doodle::file_info_server, ::doodle::file_info_server>* streamer) {
                       return this->Streamedget_info(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_get_info() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status get_info(::grpc::ServerContext* /*context*/, const ::doodle::file_info_server* /*request*/, ::doodle::file_info_server* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status Streamedget_info(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::doodle::file_info_server,::doodle::file_info_server>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_get_hash : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_get_hash() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler<
          ::doodle::file_info_server, ::doodle::file_info_server>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::doodle::file_info_server, ::doodle::file_info_server>* streamer) {
                       return this->Streamedget_hash(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_get_hash() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status get_hash(::grpc::ServerContext* /*context*/, const ::doodle::file_info_server* /*request*/, ::doodle::file_info_server* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status Streamedget_hash(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::doodle::file_info_server,::doodle::file_info_server>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_is_exist : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_is_exist() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler<
          ::doodle::file_info_server, ::doodle::file_info_server>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::doodle::file_info_server, ::doodle::file_info_server>* streamer) {
                       return this->Streamedis_exist(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_is_exist() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status is_exist(::grpc::ServerContext* /*context*/, const ::doodle::file_info_server* /*request*/, ::doodle::file_info_server* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status Streamedis_exist(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::doodle::file_info_server,::doodle::file_info_server>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_get_size : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_get_size() {
      ::grpc::Service::MarkMethodStreamed(3,
        new ::grpc::internal::StreamedUnaryHandler<
          ::doodle::file_info_server, ::doodle::file_info_server>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::doodle::file_info_server, ::doodle::file_info_server>* streamer) {
                       return this->Streamedget_size(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_get_size() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status get_size(::grpc::ServerContext* /*context*/, const ::doodle::file_info_server* /*request*/, ::doodle::file_info_server* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status Streamedget_size(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::doodle::file_info_server,::doodle::file_info_server>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_is_folder : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_is_folder() {
      ::grpc::Service::MarkMethodStreamed(4,
        new ::grpc::internal::StreamedUnaryHandler<
          ::doodle::file_info_server, ::doodle::file_info_server>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::doodle::file_info_server, ::doodle::file_info_server>* streamer) {
                       return this->Streamedis_folder(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_is_folder() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status is_folder(::grpc::ServerContext* /*context*/, const ::doodle::file_info_server* /*request*/, ::doodle::file_info_server* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status Streamedis_folder(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::doodle::file_info_server,::doodle::file_info_server>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_get_timestamp : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_get_timestamp() {
      ::grpc::Service::MarkMethodStreamed(5,
        new ::grpc::internal::StreamedUnaryHandler<
          ::doodle::file_info_server, ::doodle::file_info_server>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::doodle::file_info_server, ::doodle::file_info_server>* streamer) {
                       return this->Streamedget_timestamp(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_get_timestamp() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status get_timestamp(::grpc::ServerContext* /*context*/, const ::doodle::file_info_server* /*request*/, ::doodle::file_info_server* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status Streamedget_timestamp(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::doodle::file_info_server,::doodle::file_info_server>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_move : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_move() {
      ::grpc::Service::MarkMethodStreamed(9,
        new ::grpc::internal::StreamedUnaryHandler<
          ::doodle::file_info_move_server, ::doodle::file_info_server>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::doodle::file_info_move_server, ::doodle::file_info_server>* streamer) {
                       return this->Streamedmove(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_move() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status move(::grpc::ServerContext* /*context*/, const ::doodle::file_info_move_server* /*request*/, ::doodle::file_info_server* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status Streamedmove(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::doodle::file_info_move_server,::doodle::file_info_server>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_get_info<WithStreamedUnaryMethod_get_hash<WithStreamedUnaryMethod_is_exist<WithStreamedUnaryMethod_get_size<WithStreamedUnaryMethod_is_folder<WithStreamedUnaryMethod_get_timestamp<WithStreamedUnaryMethod_move<Service > > > > > > > StreamedUnaryService;
  template <class BaseClass>
  class WithSplitStreamingMethod_get_list : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithSplitStreamingMethod_get_list() {
      ::grpc::Service::MarkMethodStreamed(6,
        new ::grpc::internal::SplitServerStreamingHandler<
          ::doodle::file_info_server, ::doodle::file_info_server>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerSplitStreamer<
                     ::doodle::file_info_server, ::doodle::file_info_server>* streamer) {
                       return this->Streamedget_list(context,
                         streamer);
                  }));
    }
    ~WithSplitStreamingMethod_get_list() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status get_list(::grpc::ServerContext* /*context*/, const ::doodle::file_info_server* /*request*/, ::grpc::ServerWriter< ::doodle::file_info_server>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with split streamed
    virtual ::grpc::Status Streamedget_list(::grpc::ServerContext* context, ::grpc::ServerSplitStreamer< ::doodle::file_info_server,::doodle::file_info_server>* server_split_streamer) = 0;
  };
  template <class BaseClass>
  class WithSplitStreamingMethod_download : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithSplitStreamingMethod_download() {
      ::grpc::Service::MarkMethodStreamed(7,
        new ::grpc::internal::SplitServerStreamingHandler<
          ::doodle::file_info_server, ::doodle::file_stream_server>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerSplitStreamer<
                     ::doodle::file_info_server, ::doodle::file_stream_server>* streamer) {
                       return this->Streameddownload(context,
                         streamer);
                  }));
    }
    ~WithSplitStreamingMethod_download() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status download(::grpc::ServerContext* /*context*/, const ::doodle::file_info_server* /*request*/, ::grpc::ServerWriter< ::doodle::file_stream_server>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with split streamed
    virtual ::grpc::Status Streameddownload(::grpc::ServerContext* context, ::grpc::ServerSplitStreamer< ::doodle::file_info_server,::doodle::file_stream_server>* server_split_streamer) = 0;
  };
  typedef WithSplitStreamingMethod_get_list<WithSplitStreamingMethod_download<Service > > SplitStreamedService;
  typedef WithStreamedUnaryMethod_get_info<WithStreamedUnaryMethod_get_hash<WithStreamedUnaryMethod_is_exist<WithStreamedUnaryMethod_get_size<WithStreamedUnaryMethod_is_folder<WithStreamedUnaryMethod_get_timestamp<WithSplitStreamingMethod_get_list<WithSplitStreamingMethod_download<WithStreamedUnaryMethod_move<Service > > > > > > > > > StreamedService;
};

}  // namespace doodle


#endif  // GRPC_file_5fsystem_5fserver_2eproto__INCLUDED
