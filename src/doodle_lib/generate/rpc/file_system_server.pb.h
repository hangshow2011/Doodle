// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: file_system_server.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_file_5fsystem_5fserver_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_file_5fsystem_5fserver_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3018000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3018000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include <google/protobuf/timestamp.pb.h>
#include <google/protobuf/any.pb.h>
#include <google/protobuf/wrappers.pb.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_file_5fsystem_5fserver_2eproto DOODLELIB_API
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct DOODLELIB_API TableStruct_file_5fsystem_5fserver_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[3]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
DOODLELIB_API extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_file_5fsystem_5fserver_2eproto;
namespace doodle {
class file_info_move_server;
struct file_info_move_serverDefaultTypeInternal;
DOODLELIB_API extern file_info_move_serverDefaultTypeInternal _file_info_move_server_default_instance_;
class file_info_server;
struct file_info_serverDefaultTypeInternal;
DOODLELIB_API extern file_info_serverDefaultTypeInternal _file_info_server_default_instance_;
class file_stream_server;
struct file_stream_serverDefaultTypeInternal;
DOODLELIB_API extern file_stream_serverDefaultTypeInternal _file_stream_server_default_instance_;
}  // namespace doodle
PROTOBUF_NAMESPACE_OPEN
template<> DOODLELIB_API ::doodle::file_info_move_server* Arena::CreateMaybeMessage<::doodle::file_info_move_server>(Arena*);
template<> DOODLELIB_API ::doodle::file_info_server* Arena::CreateMaybeMessage<::doodle::file_info_server>(Arena*);
template<> DOODLELIB_API ::doodle::file_stream_server* Arena::CreateMaybeMessage<::doodle::file_stream_server>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace doodle {

// ===================================================================

class DOODLELIB_API file_info_server final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:doodle.file_info_server) */ {
 public:
  inline file_info_server() : file_info_server(nullptr) {}
  ~file_info_server() override;
  explicit constexpr file_info_server(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  file_info_server(const file_info_server& from);
  file_info_server(file_info_server&& from) noexcept
    : file_info_server() {
    *this = ::std::move(from);
  }

  inline file_info_server& operator=(const file_info_server& from) {
    CopyFrom(from);
    return *this;
  }
  inline file_info_server& operator=(file_info_server&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const file_info_server& default_instance() {
    return *internal_default_instance();
  }
  static inline const file_info_server* internal_default_instance() {
    return reinterpret_cast<const file_info_server*>(
               &_file_info_server_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(file_info_server& a, file_info_server& b) {
    a.Swap(&b);
  }
  inline void Swap(file_info_server* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(file_info_server* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline file_info_server* New() const final {
    return new file_info_server();
  }

  file_info_server* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<file_info_server>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const file_info_server& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const file_info_server& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(file_info_server* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "doodle.file_info_server";
  }
  protected:
  explicit file_info_server(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPathFieldNumber = 1,
    kUpdateTimeFieldNumber = 4,
    kHashFieldNumber = 6,
    kSizeFieldNumber = 5,
    kIsFolderFieldNumber = 2,
    kExistFieldNumber = 3,
  };
  // string path = 1;
  void clear_path();
  const std::string& path() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_path(ArgT0&& arg0, ArgT... args);
  std::string* mutable_path();
  PROTOBUF_MUST_USE_RESULT std::string* release_path();
  void set_allocated_path(std::string* path);
  private:
  const std::string& _internal_path() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_path(const std::string& value);
  std::string* _internal_mutable_path();
  public:

  // .google.protobuf.Timestamp update_time = 4;
  bool has_update_time() const;
  private:
  bool _internal_has_update_time() const;
  public:
  void clear_update_time();
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& update_time() const;
  PROTOBUF_MUST_USE_RESULT ::PROTOBUF_NAMESPACE_ID::Timestamp* release_update_time();
  ::PROTOBUF_NAMESPACE_ID::Timestamp* mutable_update_time();
  void set_allocated_update_time(::PROTOBUF_NAMESPACE_ID::Timestamp* update_time);
  private:
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& _internal_update_time() const;
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_update_time();
  public:
  void unsafe_arena_set_allocated_update_time(
      ::PROTOBUF_NAMESPACE_ID::Timestamp* update_time);
  ::PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_update_time();

  // .google.protobuf.StringValue hash = 6;
  bool has_hash() const;
  private:
  bool _internal_has_hash() const;
  public:
  void clear_hash();
  const ::PROTOBUF_NAMESPACE_ID::StringValue& hash() const;
  PROTOBUF_MUST_USE_RESULT ::PROTOBUF_NAMESPACE_ID::StringValue* release_hash();
  ::PROTOBUF_NAMESPACE_ID::StringValue* mutable_hash();
  void set_allocated_hash(::PROTOBUF_NAMESPACE_ID::StringValue* hash);
  private:
  const ::PROTOBUF_NAMESPACE_ID::StringValue& _internal_hash() const;
  ::PROTOBUF_NAMESPACE_ID::StringValue* _internal_mutable_hash();
  public:
  void unsafe_arena_set_allocated_hash(
      ::PROTOBUF_NAMESPACE_ID::StringValue* hash);
  ::PROTOBUF_NAMESPACE_ID::StringValue* unsafe_arena_release_hash();

  // uint64 size = 5;
  void clear_size();
  ::PROTOBUF_NAMESPACE_ID::uint64 size() const;
  void set_size(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_size() const;
  void _internal_set_size(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // bool is_folder = 2;
  void clear_is_folder();
  bool is_folder() const;
  void set_is_folder(bool value);
  private:
  bool _internal_is_folder() const;
  void _internal_set_is_folder(bool value);
  public:

  // bool exist = 3;
  void clear_exist();
  bool exist() const;
  void set_exist(bool value);
  private:
  bool _internal_exist() const;
  void _internal_set_exist(bool value);
  public:

  // @@protoc_insertion_point(class_scope:doodle.file_info_server)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr path_;
  ::PROTOBUF_NAMESPACE_ID::Timestamp* update_time_;
  ::PROTOBUF_NAMESPACE_ID::StringValue* hash_;
  ::PROTOBUF_NAMESPACE_ID::uint64 size_;
  bool is_folder_;
  bool exist_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_file_5fsystem_5fserver_2eproto;
};
// -------------------------------------------------------------------

class DOODLELIB_API file_stream_server final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:doodle.file_stream_server) */ {
 public:
  inline file_stream_server() : file_stream_server(nullptr) {}
  ~file_stream_server() override;
  explicit constexpr file_stream_server(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  file_stream_server(const file_stream_server& from);
  file_stream_server(file_stream_server&& from) noexcept
    : file_stream_server() {
    *this = ::std::move(from);
  }

  inline file_stream_server& operator=(const file_stream_server& from) {
    CopyFrom(from);
    return *this;
  }
  inline file_stream_server& operator=(file_stream_server&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const file_stream_server& default_instance() {
    return *internal_default_instance();
  }
  static inline const file_stream_server* internal_default_instance() {
    return reinterpret_cast<const file_stream_server*>(
               &_file_stream_server_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(file_stream_server& a, file_stream_server& b) {
    a.Swap(&b);
  }
  inline void Swap(file_stream_server* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(file_stream_server* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline file_stream_server* New() const final {
    return new file_stream_server();
  }

  file_stream_server* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<file_stream_server>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const file_stream_server& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const file_stream_server& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(file_stream_server* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "doodle.file_stream_server";
  }
  protected:
  explicit file_stream_server(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kInfoFieldNumber = 1,
    kDataFieldNumber = 2,
  };
  // .doodle.file_info_server info = 1;
  bool has_info() const;
  private:
  bool _internal_has_info() const;
  public:
  void clear_info();
  const ::doodle::file_info_server& info() const;
  PROTOBUF_MUST_USE_RESULT ::doodle::file_info_server* release_info();
  ::doodle::file_info_server* mutable_info();
  void set_allocated_info(::doodle::file_info_server* info);
  private:
  const ::doodle::file_info_server& _internal_info() const;
  ::doodle::file_info_server* _internal_mutable_info();
  public:
  void unsafe_arena_set_allocated_info(
      ::doodle::file_info_server* info);
  ::doodle::file_info_server* unsafe_arena_release_info();

  // .google.protobuf.Any data = 2;
  bool has_data() const;
  private:
  bool _internal_has_data() const;
  public:
  void clear_data();
  const ::PROTOBUF_NAMESPACE_ID::Any& data() const;
  PROTOBUF_MUST_USE_RESULT ::PROTOBUF_NAMESPACE_ID::Any* release_data();
  ::PROTOBUF_NAMESPACE_ID::Any* mutable_data();
  void set_allocated_data(::PROTOBUF_NAMESPACE_ID::Any* data);
  private:
  const ::PROTOBUF_NAMESPACE_ID::Any& _internal_data() const;
  ::PROTOBUF_NAMESPACE_ID::Any* _internal_mutable_data();
  public:
  void unsafe_arena_set_allocated_data(
      ::PROTOBUF_NAMESPACE_ID::Any* data);
  ::PROTOBUF_NAMESPACE_ID::Any* unsafe_arena_release_data();

  // @@protoc_insertion_point(class_scope:doodle.file_stream_server)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::doodle::file_info_server* info_;
  ::PROTOBUF_NAMESPACE_ID::Any* data_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_file_5fsystem_5fserver_2eproto;
};
// -------------------------------------------------------------------

class DOODLELIB_API file_info_move_server final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:doodle.file_info_move_server) */ {
 public:
  inline file_info_move_server() : file_info_move_server(nullptr) {}
  ~file_info_move_server() override;
  explicit constexpr file_info_move_server(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  file_info_move_server(const file_info_move_server& from);
  file_info_move_server(file_info_move_server&& from) noexcept
    : file_info_move_server() {
    *this = ::std::move(from);
  }

  inline file_info_move_server& operator=(const file_info_move_server& from) {
    CopyFrom(from);
    return *this;
  }
  inline file_info_move_server& operator=(file_info_move_server&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const file_info_move_server& default_instance() {
    return *internal_default_instance();
  }
  static inline const file_info_move_server* internal_default_instance() {
    return reinterpret_cast<const file_info_move_server*>(
               &_file_info_move_server_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(file_info_move_server& a, file_info_move_server& b) {
    a.Swap(&b);
  }
  inline void Swap(file_info_move_server* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(file_info_move_server* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline file_info_move_server* New() const final {
    return new file_info_move_server();
  }

  file_info_move_server* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<file_info_move_server>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const file_info_move_server& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const file_info_move_server& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(file_info_move_server* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "doodle.file_info_move_server";
  }
  protected:
  explicit file_info_move_server(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSourceFieldNumber = 1,
    kTargetFieldNumber = 2,
  };
  // .doodle.file_info_server source = 1;
  bool has_source() const;
  private:
  bool _internal_has_source() const;
  public:
  void clear_source();
  const ::doodle::file_info_server& source() const;
  PROTOBUF_MUST_USE_RESULT ::doodle::file_info_server* release_source();
  ::doodle::file_info_server* mutable_source();
  void set_allocated_source(::doodle::file_info_server* source);
  private:
  const ::doodle::file_info_server& _internal_source() const;
  ::doodle::file_info_server* _internal_mutable_source();
  public:
  void unsafe_arena_set_allocated_source(
      ::doodle::file_info_server* source);
  ::doodle::file_info_server* unsafe_arena_release_source();

  // .doodle.file_info_server target = 2;
  bool has_target() const;
  private:
  bool _internal_has_target() const;
  public:
  void clear_target();
  const ::doodle::file_info_server& target() const;
  PROTOBUF_MUST_USE_RESULT ::doodle::file_info_server* release_target();
  ::doodle::file_info_server* mutable_target();
  void set_allocated_target(::doodle::file_info_server* target);
  private:
  const ::doodle::file_info_server& _internal_target() const;
  ::doodle::file_info_server* _internal_mutable_target();
  public:
  void unsafe_arena_set_allocated_target(
      ::doodle::file_info_server* target);
  ::doodle::file_info_server* unsafe_arena_release_target();

  // @@protoc_insertion_point(class_scope:doodle.file_info_move_server)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::doodle::file_info_server* source_;
  ::doodle::file_info_server* target_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_file_5fsystem_5fserver_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// file_info_server

// string path = 1;
inline void file_info_server::clear_path() {
  path_.ClearToEmpty();
}
inline const std::string& file_info_server::path() const {
  // @@protoc_insertion_point(field_get:doodle.file_info_server.path)
  return _internal_path();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void file_info_server::set_path(ArgT0&& arg0, ArgT... args) {
 
 path_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:doodle.file_info_server.path)
}
inline std::string* file_info_server::mutable_path() {
  std::string* _s = _internal_mutable_path();
  // @@protoc_insertion_point(field_mutable:doodle.file_info_server.path)
  return _s;
}
inline const std::string& file_info_server::_internal_path() const {
  return path_.Get();
}
inline void file_info_server::_internal_set_path(const std::string& value) {
  
  path_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* file_info_server::_internal_mutable_path() {
  
  return path_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* file_info_server::release_path() {
  // @@protoc_insertion_point(field_release:doodle.file_info_server.path)
  return path_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void file_info_server::set_allocated_path(std::string* path) {
  if (path != nullptr) {
    
  } else {
    
  }
  path_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), path,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:doodle.file_info_server.path)
}

// bool is_folder = 2;
inline void file_info_server::clear_is_folder() {
  is_folder_ = false;
}
inline bool file_info_server::_internal_is_folder() const {
  return is_folder_;
}
inline bool file_info_server::is_folder() const {
  // @@protoc_insertion_point(field_get:doodle.file_info_server.is_folder)
  return _internal_is_folder();
}
inline void file_info_server::_internal_set_is_folder(bool value) {
  
  is_folder_ = value;
}
inline void file_info_server::set_is_folder(bool value) {
  _internal_set_is_folder(value);
  // @@protoc_insertion_point(field_set:doodle.file_info_server.is_folder)
}

// bool exist = 3;
inline void file_info_server::clear_exist() {
  exist_ = false;
}
inline bool file_info_server::_internal_exist() const {
  return exist_;
}
inline bool file_info_server::exist() const {
  // @@protoc_insertion_point(field_get:doodle.file_info_server.exist)
  return _internal_exist();
}
inline void file_info_server::_internal_set_exist(bool value) {
  
  exist_ = value;
}
inline void file_info_server::set_exist(bool value) {
  _internal_set_exist(value);
  // @@protoc_insertion_point(field_set:doodle.file_info_server.exist)
}

// .google.protobuf.Timestamp update_time = 4;
inline bool file_info_server::_internal_has_update_time() const {
  return this != internal_default_instance() && update_time_ != nullptr;
}
inline bool file_info_server::has_update_time() const {
  return _internal_has_update_time();
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& file_info_server::_internal_update_time() const {
  const ::PROTOBUF_NAMESPACE_ID::Timestamp* p = update_time_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Timestamp&>(
      ::PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& file_info_server::update_time() const {
  // @@protoc_insertion_point(field_get:doodle.file_info_server.update_time)
  return _internal_update_time();
}
inline void file_info_server::unsafe_arena_set_allocated_update_time(
    ::PROTOBUF_NAMESPACE_ID::Timestamp* update_time) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(update_time_);
  }
  update_time_ = update_time;
  if (update_time) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:doodle.file_info_server.update_time)
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* file_info_server::release_update_time() {
  
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = update_time_;
  update_time_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* file_info_server::unsafe_arena_release_update_time() {
  // @@protoc_insertion_point(field_release:doodle.file_info_server.update_time)
  
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = update_time_;
  update_time_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* file_info_server::_internal_mutable_update_time() {
  
  if (update_time_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::Timestamp>(GetArenaForAllocation());
    update_time_ = p;
  }
  return update_time_;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* file_info_server::mutable_update_time() {
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _msg = _internal_mutable_update_time();
  // @@protoc_insertion_point(field_mutable:doodle.file_info_server.update_time)
  return _msg;
}
inline void file_info_server::set_allocated_update_time(::PROTOBUF_NAMESPACE_ID::Timestamp* update_time) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(update_time_);
  }
  if (update_time) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(update_time));
    if (message_arena != submessage_arena) {
      update_time = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, update_time, submessage_arena);
    }
    
  } else {
    
  }
  update_time_ = update_time;
  // @@protoc_insertion_point(field_set_allocated:doodle.file_info_server.update_time)
}

// uint64 size = 5;
inline void file_info_server::clear_size() {
  size_ = uint64_t{0u};
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 file_info_server::_internal_size() const {
  return size_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 file_info_server::size() const {
  // @@protoc_insertion_point(field_get:doodle.file_info_server.size)
  return _internal_size();
}
inline void file_info_server::_internal_set_size(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  size_ = value;
}
inline void file_info_server::set_size(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_size(value);
  // @@protoc_insertion_point(field_set:doodle.file_info_server.size)
}

// .google.protobuf.StringValue hash = 6;
inline bool file_info_server::_internal_has_hash() const {
  return this != internal_default_instance() && hash_ != nullptr;
}
inline bool file_info_server::has_hash() const {
  return _internal_has_hash();
}
inline const ::PROTOBUF_NAMESPACE_ID::StringValue& file_info_server::_internal_hash() const {
  const ::PROTOBUF_NAMESPACE_ID::StringValue* p = hash_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::StringValue&>(
      ::PROTOBUF_NAMESPACE_ID::_StringValue_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::StringValue& file_info_server::hash() const {
  // @@protoc_insertion_point(field_get:doodle.file_info_server.hash)
  return _internal_hash();
}
inline void file_info_server::unsafe_arena_set_allocated_hash(
    ::PROTOBUF_NAMESPACE_ID::StringValue* hash) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(hash_);
  }
  hash_ = hash;
  if (hash) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:doodle.file_info_server.hash)
}
inline ::PROTOBUF_NAMESPACE_ID::StringValue* file_info_server::release_hash() {
  
  ::PROTOBUF_NAMESPACE_ID::StringValue* temp = hash_;
  hash_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::StringValue* file_info_server::unsafe_arena_release_hash() {
  // @@protoc_insertion_point(field_release:doodle.file_info_server.hash)
  
  ::PROTOBUF_NAMESPACE_ID::StringValue* temp = hash_;
  hash_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::StringValue* file_info_server::_internal_mutable_hash() {
  
  if (hash_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::StringValue>(GetArenaForAllocation());
    hash_ = p;
  }
  return hash_;
}
inline ::PROTOBUF_NAMESPACE_ID::StringValue* file_info_server::mutable_hash() {
  ::PROTOBUF_NAMESPACE_ID::StringValue* _msg = _internal_mutable_hash();
  // @@protoc_insertion_point(field_mutable:doodle.file_info_server.hash)
  return _msg;
}
inline void file_info_server::set_allocated_hash(::PROTOBUF_NAMESPACE_ID::StringValue* hash) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(hash_);
  }
  if (hash) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(hash));
    if (message_arena != submessage_arena) {
      hash = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, hash, submessage_arena);
    }
    
  } else {
    
  }
  hash_ = hash;
  // @@protoc_insertion_point(field_set_allocated:doodle.file_info_server.hash)
}

// -------------------------------------------------------------------

// file_stream_server

// .doodle.file_info_server info = 1;
inline bool file_stream_server::_internal_has_info() const {
  return this != internal_default_instance() && info_ != nullptr;
}
inline bool file_stream_server::has_info() const {
  return _internal_has_info();
}
inline void file_stream_server::clear_info() {
  if (GetArenaForAllocation() == nullptr && info_ != nullptr) {
    delete info_;
  }
  info_ = nullptr;
}
inline const ::doodle::file_info_server& file_stream_server::_internal_info() const {
  const ::doodle::file_info_server* p = info_;
  return p != nullptr ? *p : reinterpret_cast<const ::doodle::file_info_server&>(
      ::doodle::_file_info_server_default_instance_);
}
inline const ::doodle::file_info_server& file_stream_server::info() const {
  // @@protoc_insertion_point(field_get:doodle.file_stream_server.info)
  return _internal_info();
}
inline void file_stream_server::unsafe_arena_set_allocated_info(
    ::doodle::file_info_server* info) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(info_);
  }
  info_ = info;
  if (info) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:doodle.file_stream_server.info)
}
inline ::doodle::file_info_server* file_stream_server::release_info() {
  
  ::doodle::file_info_server* temp = info_;
  info_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::doodle::file_info_server* file_stream_server::unsafe_arena_release_info() {
  // @@protoc_insertion_point(field_release:doodle.file_stream_server.info)
  
  ::doodle::file_info_server* temp = info_;
  info_ = nullptr;
  return temp;
}
inline ::doodle::file_info_server* file_stream_server::_internal_mutable_info() {
  
  if (info_ == nullptr) {
    auto* p = CreateMaybeMessage<::doodle::file_info_server>(GetArenaForAllocation());
    info_ = p;
  }
  return info_;
}
inline ::doodle::file_info_server* file_stream_server::mutable_info() {
  ::doodle::file_info_server* _msg = _internal_mutable_info();
  // @@protoc_insertion_point(field_mutable:doodle.file_stream_server.info)
  return _msg;
}
inline void file_stream_server::set_allocated_info(::doodle::file_info_server* info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete info_;
  }
  if (info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::doodle::file_info_server>::GetOwningArena(info);
    if (message_arena != submessage_arena) {
      info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, info, submessage_arena);
    }
    
  } else {
    
  }
  info_ = info;
  // @@protoc_insertion_point(field_set_allocated:doodle.file_stream_server.info)
}

// .google.protobuf.Any data = 2;
inline bool file_stream_server::_internal_has_data() const {
  return this != internal_default_instance() && data_ != nullptr;
}
inline bool file_stream_server::has_data() const {
  return _internal_has_data();
}
inline const ::PROTOBUF_NAMESPACE_ID::Any& file_stream_server::_internal_data() const {
  const ::PROTOBUF_NAMESPACE_ID::Any* p = data_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Any&>(
      ::PROTOBUF_NAMESPACE_ID::_Any_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::Any& file_stream_server::data() const {
  // @@protoc_insertion_point(field_get:doodle.file_stream_server.data)
  return _internal_data();
}
inline void file_stream_server::unsafe_arena_set_allocated_data(
    ::PROTOBUF_NAMESPACE_ID::Any* data) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(data_);
  }
  data_ = data;
  if (data) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:doodle.file_stream_server.data)
}
inline ::PROTOBUF_NAMESPACE_ID::Any* file_stream_server::release_data() {
  
  ::PROTOBUF_NAMESPACE_ID::Any* temp = data_;
  data_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Any* file_stream_server::unsafe_arena_release_data() {
  // @@protoc_insertion_point(field_release:doodle.file_stream_server.data)
  
  ::PROTOBUF_NAMESPACE_ID::Any* temp = data_;
  data_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Any* file_stream_server::_internal_mutable_data() {
  
  if (data_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::Any>(GetArenaForAllocation());
    data_ = p;
  }
  return data_;
}
inline ::PROTOBUF_NAMESPACE_ID::Any* file_stream_server::mutable_data() {
  ::PROTOBUF_NAMESPACE_ID::Any* _msg = _internal_mutable_data();
  // @@protoc_insertion_point(field_mutable:doodle.file_stream_server.data)
  return _msg;
}
inline void file_stream_server::set_allocated_data(::PROTOBUF_NAMESPACE_ID::Any* data) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(data_);
  }
  if (data) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(data));
    if (message_arena != submessage_arena) {
      data = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, data, submessage_arena);
    }
    
  } else {
    
  }
  data_ = data;
  // @@protoc_insertion_point(field_set_allocated:doodle.file_stream_server.data)
}

// -------------------------------------------------------------------

// file_info_move_server

// .doodle.file_info_server source = 1;
inline bool file_info_move_server::_internal_has_source() const {
  return this != internal_default_instance() && source_ != nullptr;
}
inline bool file_info_move_server::has_source() const {
  return _internal_has_source();
}
inline void file_info_move_server::clear_source() {
  if (GetArenaForAllocation() == nullptr && source_ != nullptr) {
    delete source_;
  }
  source_ = nullptr;
}
inline const ::doodle::file_info_server& file_info_move_server::_internal_source() const {
  const ::doodle::file_info_server* p = source_;
  return p != nullptr ? *p : reinterpret_cast<const ::doodle::file_info_server&>(
      ::doodle::_file_info_server_default_instance_);
}
inline const ::doodle::file_info_server& file_info_move_server::source() const {
  // @@protoc_insertion_point(field_get:doodle.file_info_move_server.source)
  return _internal_source();
}
inline void file_info_move_server::unsafe_arena_set_allocated_source(
    ::doodle::file_info_server* source) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(source_);
  }
  source_ = source;
  if (source) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:doodle.file_info_move_server.source)
}
inline ::doodle::file_info_server* file_info_move_server::release_source() {
  
  ::doodle::file_info_server* temp = source_;
  source_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::doodle::file_info_server* file_info_move_server::unsafe_arena_release_source() {
  // @@protoc_insertion_point(field_release:doodle.file_info_move_server.source)
  
  ::doodle::file_info_server* temp = source_;
  source_ = nullptr;
  return temp;
}
inline ::doodle::file_info_server* file_info_move_server::_internal_mutable_source() {
  
  if (source_ == nullptr) {
    auto* p = CreateMaybeMessage<::doodle::file_info_server>(GetArenaForAllocation());
    source_ = p;
  }
  return source_;
}
inline ::doodle::file_info_server* file_info_move_server::mutable_source() {
  ::doodle::file_info_server* _msg = _internal_mutable_source();
  // @@protoc_insertion_point(field_mutable:doodle.file_info_move_server.source)
  return _msg;
}
inline void file_info_move_server::set_allocated_source(::doodle::file_info_server* source) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete source_;
  }
  if (source) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::doodle::file_info_server>::GetOwningArena(source);
    if (message_arena != submessage_arena) {
      source = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, source, submessage_arena);
    }
    
  } else {
    
  }
  source_ = source;
  // @@protoc_insertion_point(field_set_allocated:doodle.file_info_move_server.source)
}

// .doodle.file_info_server target = 2;
inline bool file_info_move_server::_internal_has_target() const {
  return this != internal_default_instance() && target_ != nullptr;
}
inline bool file_info_move_server::has_target() const {
  return _internal_has_target();
}
inline void file_info_move_server::clear_target() {
  if (GetArenaForAllocation() == nullptr && target_ != nullptr) {
    delete target_;
  }
  target_ = nullptr;
}
inline const ::doodle::file_info_server& file_info_move_server::_internal_target() const {
  const ::doodle::file_info_server* p = target_;
  return p != nullptr ? *p : reinterpret_cast<const ::doodle::file_info_server&>(
      ::doodle::_file_info_server_default_instance_);
}
inline const ::doodle::file_info_server& file_info_move_server::target() const {
  // @@protoc_insertion_point(field_get:doodle.file_info_move_server.target)
  return _internal_target();
}
inline void file_info_move_server::unsafe_arena_set_allocated_target(
    ::doodle::file_info_server* target) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(target_);
  }
  target_ = target;
  if (target) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:doodle.file_info_move_server.target)
}
inline ::doodle::file_info_server* file_info_move_server::release_target() {
  
  ::doodle::file_info_server* temp = target_;
  target_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::doodle::file_info_server* file_info_move_server::unsafe_arena_release_target() {
  // @@protoc_insertion_point(field_release:doodle.file_info_move_server.target)
  
  ::doodle::file_info_server* temp = target_;
  target_ = nullptr;
  return temp;
}
inline ::doodle::file_info_server* file_info_move_server::_internal_mutable_target() {
  
  if (target_ == nullptr) {
    auto* p = CreateMaybeMessage<::doodle::file_info_server>(GetArenaForAllocation());
    target_ = p;
  }
  return target_;
}
inline ::doodle::file_info_server* file_info_move_server::mutable_target() {
  ::doodle::file_info_server* _msg = _internal_mutable_target();
  // @@protoc_insertion_point(field_mutable:doodle.file_info_move_server.target)
  return _msg;
}
inline void file_info_move_server::set_allocated_target(::doodle::file_info_server* target) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete target_;
  }
  if (target) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::doodle::file_info_server>::GetOwningArena(target);
    if (message_arena != submessage_arena) {
      target = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, target, submessage_arena);
    }
    
  } else {
    
  }
  target_ = target;
  // @@protoc_insertion_point(field_set_allocated:doodle.file_info_move_server.target)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace doodle

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_file_5fsystem_5fserver_2eproto
