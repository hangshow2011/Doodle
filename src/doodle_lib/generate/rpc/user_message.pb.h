// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: user_message.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_user_5fmessage_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_user_5fmessage_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3018000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3018000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include <google/protobuf/any.pb.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_user_5fmessage_2eproto DOODLELIB_API
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct DOODLELIB_API TableStruct_user_5fmessage_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[2]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
DOODLELIB_API extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_user_5fmessage_2eproto;
namespace doodle {
class user_database;
struct user_databaseDefaultTypeInternal;
DOODLELIB_API extern user_databaseDefaultTypeInternal _user_database_default_instance_;
class user_database_filter;
struct user_database_filterDefaultTypeInternal;
DOODLELIB_API extern user_database_filterDefaultTypeInternal _user_database_filter_default_instance_;
}  // namespace doodle
PROTOBUF_NAMESPACE_OPEN
template<> DOODLELIB_API ::doodle::user_database* Arena::CreateMaybeMessage<::doodle::user_database>(Arena*);
template<> DOODLELIB_API ::doodle::user_database_filter* Arena::CreateMaybeMessage<::doodle::user_database_filter>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace doodle {

// ===================================================================

class DOODLELIB_API user_database final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:doodle.user_database) */ {
 public:
  inline user_database() : user_database(nullptr) {}
  ~user_database() override;
  explicit constexpr user_database(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  user_database(const user_database& from);
  user_database(user_database&& from) noexcept
    : user_database() {
    *this = ::std::move(from);
  }

  inline user_database& operator=(const user_database& from) {
    CopyFrom(from);
    return *this;
  }
  inline user_database& operator=(user_database&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const user_database& default_instance() {
    return *internal_default_instance();
  }
  static inline const user_database* internal_default_instance() {
    return reinterpret_cast<const user_database*>(
               &_user_database_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(user_database& a, user_database& b) {
    a.Swap(&b);
  }
  inline void Swap(user_database* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(user_database* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline user_database* New() const final {
    return new user_database();
  }

  user_database* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<user_database>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const user_database& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const user_database& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(user_database* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "doodle.user_database";
  }
  protected:
  explicit user_database(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUuidPathFieldNumber = 2,
    kUserNameFieldNumber = 3,
    kUserdataCerealFieldNumber = 4,
    kIdFieldNumber = 1,
    kPermissionGroupFieldNumber = 5,
  };
  // string uuidPath = 2;
  void clear_uuidpath();
  const std::string& uuidpath() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_uuidpath(ArgT0&& arg0, ArgT... args);
  std::string* mutable_uuidpath();
  PROTOBUF_MUST_USE_RESULT std::string* release_uuidpath();
  void set_allocated_uuidpath(std::string* uuidpath);
  private:
  const std::string& _internal_uuidpath() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_uuidpath(const std::string& value);
  std::string* _internal_mutable_uuidpath();
  public:

  // string user_name = 3;
  void clear_user_name();
  const std::string& user_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_user_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_user_name();
  PROTOBUF_MUST_USE_RESULT std::string* release_user_name();
  void set_allocated_user_name(std::string* user_name);
  private:
  const std::string& _internal_user_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_user_name(const std::string& value);
  std::string* _internal_mutable_user_name();
  public:

  // .google.protobuf.Any userdata_cereal = 4;
  bool has_userdata_cereal() const;
  private:
  bool _internal_has_userdata_cereal() const;
  public:
  void clear_userdata_cereal();
  const ::PROTOBUF_NAMESPACE_ID::Any& userdata_cereal() const;
  PROTOBUF_MUST_USE_RESULT ::PROTOBUF_NAMESPACE_ID::Any* release_userdata_cereal();
  ::PROTOBUF_NAMESPACE_ID::Any* mutable_userdata_cereal();
  void set_allocated_userdata_cereal(::PROTOBUF_NAMESPACE_ID::Any* userdata_cereal);
  private:
  const ::PROTOBUF_NAMESPACE_ID::Any& _internal_userdata_cereal() const;
  ::PROTOBUF_NAMESPACE_ID::Any* _internal_mutable_userdata_cereal();
  public:
  void unsafe_arena_set_allocated_userdata_cereal(
      ::PROTOBUF_NAMESPACE_ID::Any* userdata_cereal);
  ::PROTOBUF_NAMESPACE_ID::Any* unsafe_arena_release_userdata_cereal();

  // uint64 id = 1;
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 permission_group = 5;
  void clear_permission_group();
  ::PROTOBUF_NAMESPACE_ID::uint64 permission_group() const;
  void set_permission_group(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_permission_group() const;
  void _internal_set_permission_group(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:doodle.user_database)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr uuidpath_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr user_name_;
  ::PROTOBUF_NAMESPACE_ID::Any* userdata_cereal_;
  ::PROTOBUF_NAMESPACE_ID::uint64 id_;
  ::PROTOBUF_NAMESPACE_ID::uint64 permission_group_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_user_5fmessage_2eproto;
};
// -------------------------------------------------------------------

class DOODLELIB_API user_database_filter final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:doodle.user_database_filter) */ {
 public:
  inline user_database_filter() : user_database_filter(nullptr) {}
  ~user_database_filter() override;
  explicit constexpr user_database_filter(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  user_database_filter(const user_database_filter& from);
  user_database_filter(user_database_filter&& from) noexcept
    : user_database_filter() {
    *this = ::std::move(from);
  }

  inline user_database_filter& operator=(const user_database_filter& from) {
    CopyFrom(from);
    return *this;
  }
  inline user_database_filter& operator=(user_database_filter&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const user_database_filter& default_instance() {
    return *internal_default_instance();
  }
  static inline const user_database_filter* internal_default_instance() {
    return reinterpret_cast<const user_database_filter*>(
               &_user_database_filter_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(user_database_filter& a, user_database_filter& b) {
    a.Swap(&b);
  }
  inline void Swap(user_database_filter* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(user_database_filter* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline user_database_filter* New() const final {
    return new user_database_filter();
  }

  user_database_filter* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<user_database_filter>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const user_database_filter& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const user_database_filter& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(user_database_filter* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "doodle.user_database_filter";
  }
  protected:
  explicit user_database_filter(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUuidPathFieldNumber = 2,
    kUserNameFieldNumber = 3,
    kIdFieldNumber = 1,
    kPermissionGroupFieldNumber = 5,
  };
  // string uuidPath = 2;
  void clear_uuidpath();
  const std::string& uuidpath() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_uuidpath(ArgT0&& arg0, ArgT... args);
  std::string* mutable_uuidpath();
  PROTOBUF_MUST_USE_RESULT std::string* release_uuidpath();
  void set_allocated_uuidpath(std::string* uuidpath);
  private:
  const std::string& _internal_uuidpath() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_uuidpath(const std::string& value);
  std::string* _internal_mutable_uuidpath();
  public:

  // string user_name = 3;
  void clear_user_name();
  const std::string& user_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_user_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_user_name();
  PROTOBUF_MUST_USE_RESULT std::string* release_user_name();
  void set_allocated_user_name(std::string* user_name);
  private:
  const std::string& _internal_user_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_user_name(const std::string& value);
  std::string* _internal_mutable_user_name();
  public:

  // uint64 id = 1;
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 permission_group = 5;
  void clear_permission_group();
  ::PROTOBUF_NAMESPACE_ID::uint64 permission_group() const;
  void set_permission_group(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_permission_group() const;
  void _internal_set_permission_group(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:doodle.user_database_filter)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr uuidpath_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr user_name_;
  ::PROTOBUF_NAMESPACE_ID::uint64 id_;
  ::PROTOBUF_NAMESPACE_ID::uint64 permission_group_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_user_5fmessage_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// user_database

// uint64 id = 1;
inline void user_database::clear_id() {
  id_ = uint64_t{0u};
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 user_database::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 user_database::id() const {
  // @@protoc_insertion_point(field_get:doodle.user_database.id)
  return _internal_id();
}
inline void user_database::_internal_set_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  id_ = value;
}
inline void user_database::set_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:doodle.user_database.id)
}

// string uuidPath = 2;
inline void user_database::clear_uuidpath() {
  uuidpath_.ClearToEmpty();
}
inline const std::string& user_database::uuidpath() const {
  // @@protoc_insertion_point(field_get:doodle.user_database.uuidPath)
  return _internal_uuidpath();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void user_database::set_uuidpath(ArgT0&& arg0, ArgT... args) {
 
 uuidpath_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:doodle.user_database.uuidPath)
}
inline std::string* user_database::mutable_uuidpath() {
  std::string* _s = _internal_mutable_uuidpath();
  // @@protoc_insertion_point(field_mutable:doodle.user_database.uuidPath)
  return _s;
}
inline const std::string& user_database::_internal_uuidpath() const {
  return uuidpath_.Get();
}
inline void user_database::_internal_set_uuidpath(const std::string& value) {
  
  uuidpath_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* user_database::_internal_mutable_uuidpath() {
  
  return uuidpath_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* user_database::release_uuidpath() {
  // @@protoc_insertion_point(field_release:doodle.user_database.uuidPath)
  return uuidpath_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void user_database::set_allocated_uuidpath(std::string* uuidpath) {
  if (uuidpath != nullptr) {
    
  } else {
    
  }
  uuidpath_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), uuidpath,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:doodle.user_database.uuidPath)
}

// string user_name = 3;
inline void user_database::clear_user_name() {
  user_name_.ClearToEmpty();
}
inline const std::string& user_database::user_name() const {
  // @@protoc_insertion_point(field_get:doodle.user_database.user_name)
  return _internal_user_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void user_database::set_user_name(ArgT0&& arg0, ArgT... args) {
 
 user_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:doodle.user_database.user_name)
}
inline std::string* user_database::mutable_user_name() {
  std::string* _s = _internal_mutable_user_name();
  // @@protoc_insertion_point(field_mutable:doodle.user_database.user_name)
  return _s;
}
inline const std::string& user_database::_internal_user_name() const {
  return user_name_.Get();
}
inline void user_database::_internal_set_user_name(const std::string& value) {
  
  user_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* user_database::_internal_mutable_user_name() {
  
  return user_name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* user_database::release_user_name() {
  // @@protoc_insertion_point(field_release:doodle.user_database.user_name)
  return user_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void user_database::set_allocated_user_name(std::string* user_name) {
  if (user_name != nullptr) {
    
  } else {
    
  }
  user_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), user_name,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:doodle.user_database.user_name)
}

// .google.protobuf.Any userdata_cereal = 4;
inline bool user_database::_internal_has_userdata_cereal() const {
  return this != internal_default_instance() && userdata_cereal_ != nullptr;
}
inline bool user_database::has_userdata_cereal() const {
  return _internal_has_userdata_cereal();
}
inline const ::PROTOBUF_NAMESPACE_ID::Any& user_database::_internal_userdata_cereal() const {
  const ::PROTOBUF_NAMESPACE_ID::Any* p = userdata_cereal_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Any&>(
      ::PROTOBUF_NAMESPACE_ID::_Any_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::Any& user_database::userdata_cereal() const {
  // @@protoc_insertion_point(field_get:doodle.user_database.userdata_cereal)
  return _internal_userdata_cereal();
}
inline void user_database::unsafe_arena_set_allocated_userdata_cereal(
    ::PROTOBUF_NAMESPACE_ID::Any* userdata_cereal) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(userdata_cereal_);
  }
  userdata_cereal_ = userdata_cereal;
  if (userdata_cereal) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:doodle.user_database.userdata_cereal)
}
inline ::PROTOBUF_NAMESPACE_ID::Any* user_database::release_userdata_cereal() {
  
  ::PROTOBUF_NAMESPACE_ID::Any* temp = userdata_cereal_;
  userdata_cereal_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Any* user_database::unsafe_arena_release_userdata_cereal() {
  // @@protoc_insertion_point(field_release:doodle.user_database.userdata_cereal)
  
  ::PROTOBUF_NAMESPACE_ID::Any* temp = userdata_cereal_;
  userdata_cereal_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Any* user_database::_internal_mutable_userdata_cereal() {
  
  if (userdata_cereal_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::Any>(GetArenaForAllocation());
    userdata_cereal_ = p;
  }
  return userdata_cereal_;
}
inline ::PROTOBUF_NAMESPACE_ID::Any* user_database::mutable_userdata_cereal() {
  ::PROTOBUF_NAMESPACE_ID::Any* _msg = _internal_mutable_userdata_cereal();
  // @@protoc_insertion_point(field_mutable:doodle.user_database.userdata_cereal)
  return _msg;
}
inline void user_database::set_allocated_userdata_cereal(::PROTOBUF_NAMESPACE_ID::Any* userdata_cereal) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(userdata_cereal_);
  }
  if (userdata_cereal) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(userdata_cereal));
    if (message_arena != submessage_arena) {
      userdata_cereal = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, userdata_cereal, submessage_arena);
    }
    
  } else {
    
  }
  userdata_cereal_ = userdata_cereal;
  // @@protoc_insertion_point(field_set_allocated:doodle.user_database.userdata_cereal)
}

// uint64 permission_group = 5;
inline void user_database::clear_permission_group() {
  permission_group_ = uint64_t{0u};
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 user_database::_internal_permission_group() const {
  return permission_group_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 user_database::permission_group() const {
  // @@protoc_insertion_point(field_get:doodle.user_database.permission_group)
  return _internal_permission_group();
}
inline void user_database::_internal_set_permission_group(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  permission_group_ = value;
}
inline void user_database::set_permission_group(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_permission_group(value);
  // @@protoc_insertion_point(field_set:doodle.user_database.permission_group)
}

// -------------------------------------------------------------------

// user_database_filter

// uint64 id = 1;
inline void user_database_filter::clear_id() {
  id_ = uint64_t{0u};
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 user_database_filter::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 user_database_filter::id() const {
  // @@protoc_insertion_point(field_get:doodle.user_database_filter.id)
  return _internal_id();
}
inline void user_database_filter::_internal_set_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  id_ = value;
}
inline void user_database_filter::set_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:doodle.user_database_filter.id)
}

// string uuidPath = 2;
inline void user_database_filter::clear_uuidpath() {
  uuidpath_.ClearToEmpty();
}
inline const std::string& user_database_filter::uuidpath() const {
  // @@protoc_insertion_point(field_get:doodle.user_database_filter.uuidPath)
  return _internal_uuidpath();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void user_database_filter::set_uuidpath(ArgT0&& arg0, ArgT... args) {
 
 uuidpath_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:doodle.user_database_filter.uuidPath)
}
inline std::string* user_database_filter::mutable_uuidpath() {
  std::string* _s = _internal_mutable_uuidpath();
  // @@protoc_insertion_point(field_mutable:doodle.user_database_filter.uuidPath)
  return _s;
}
inline const std::string& user_database_filter::_internal_uuidpath() const {
  return uuidpath_.Get();
}
inline void user_database_filter::_internal_set_uuidpath(const std::string& value) {
  
  uuidpath_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* user_database_filter::_internal_mutable_uuidpath() {
  
  return uuidpath_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* user_database_filter::release_uuidpath() {
  // @@protoc_insertion_point(field_release:doodle.user_database_filter.uuidPath)
  return uuidpath_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void user_database_filter::set_allocated_uuidpath(std::string* uuidpath) {
  if (uuidpath != nullptr) {
    
  } else {
    
  }
  uuidpath_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), uuidpath,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:doodle.user_database_filter.uuidPath)
}

// string user_name = 3;
inline void user_database_filter::clear_user_name() {
  user_name_.ClearToEmpty();
}
inline const std::string& user_database_filter::user_name() const {
  // @@protoc_insertion_point(field_get:doodle.user_database_filter.user_name)
  return _internal_user_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void user_database_filter::set_user_name(ArgT0&& arg0, ArgT... args) {
 
 user_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:doodle.user_database_filter.user_name)
}
inline std::string* user_database_filter::mutable_user_name() {
  std::string* _s = _internal_mutable_user_name();
  // @@protoc_insertion_point(field_mutable:doodle.user_database_filter.user_name)
  return _s;
}
inline const std::string& user_database_filter::_internal_user_name() const {
  return user_name_.Get();
}
inline void user_database_filter::_internal_set_user_name(const std::string& value) {
  
  user_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* user_database_filter::_internal_mutable_user_name() {
  
  return user_name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* user_database_filter::release_user_name() {
  // @@protoc_insertion_point(field_release:doodle.user_database_filter.user_name)
  return user_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void user_database_filter::set_allocated_user_name(std::string* user_name) {
  if (user_name != nullptr) {
    
  } else {
    
  }
  user_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), user_name,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:doodle.user_database_filter.user_name)
}

// uint64 permission_group = 5;
inline void user_database_filter::clear_permission_group() {
  permission_group_ = uint64_t{0u};
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 user_database_filter::_internal_permission_group() const {
  return permission_group_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 user_database_filter::permission_group() const {
  // @@protoc_insertion_point(field_get:doodle.user_database_filter.permission_group)
  return _internal_permission_group();
}
inline void user_database_filter::_internal_set_permission_group(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  permission_group_ = value;
}
inline void user_database_filter::set_permission_group(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_permission_group(value);
  // @@protoc_insertion_point(field_set:doodle.user_database_filter.permission_group)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace doodle

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_user_5fmessage_2eproto
