// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: file_system_server.proto

#include "file_system_server.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace doodle {
constexpr file_info_server::file_info_server(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : path_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , update_time_(nullptr)
  , hash_(nullptr)
  , size_(uint64_t{0u})
  , is_folder_(false)
  , exist_(false){}
struct file_info_serverDefaultTypeInternal {
  constexpr file_info_serverDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~file_info_serverDefaultTypeInternal() {}
  union {
    file_info_server _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT file_info_serverDefaultTypeInternal _file_info_server_default_instance_;
constexpr file_stream_server::file_stream_server(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : info_(nullptr)
  , data_(nullptr){}
struct file_stream_serverDefaultTypeInternal {
  constexpr file_stream_serverDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~file_stream_serverDefaultTypeInternal() {}
  union {
    file_stream_server _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT file_stream_serverDefaultTypeInternal _file_stream_server_default_instance_;
constexpr file_info_move_server::file_info_move_server(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : source_(nullptr)
  , target_(nullptr){}
struct file_info_move_serverDefaultTypeInternal {
  constexpr file_info_move_serverDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~file_info_move_serverDefaultTypeInternal() {}
  union {
    file_info_move_server _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT file_info_move_serverDefaultTypeInternal _file_info_move_server_default_instance_;
}  // namespace doodle
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_file_5fsystem_5fserver_2eproto[3];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_file_5fsystem_5fserver_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_file_5fsystem_5fserver_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_file_5fsystem_5fserver_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::doodle::file_info_server, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::doodle::file_info_server, path_),
  PROTOBUF_FIELD_OFFSET(::doodle::file_info_server, is_folder_),
  PROTOBUF_FIELD_OFFSET(::doodle::file_info_server, exist_),
  PROTOBUF_FIELD_OFFSET(::doodle::file_info_server, update_time_),
  PROTOBUF_FIELD_OFFSET(::doodle::file_info_server, size_),
  PROTOBUF_FIELD_OFFSET(::doodle::file_info_server, hash_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::doodle::file_stream_server, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::doodle::file_stream_server, info_),
  PROTOBUF_FIELD_OFFSET(::doodle::file_stream_server, data_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::doodle::file_info_move_server, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::doodle::file_info_move_server, source_),
  PROTOBUF_FIELD_OFFSET(::doodle::file_info_move_server, target_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::doodle::file_info_server)},
  { 12, -1, -1, sizeof(::doodle::file_stream_server)},
  { 20, -1, -1, sizeof(::doodle::file_info_move_server)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::doodle::_file_info_server_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::doodle::_file_stream_server_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::doodle::_file_info_move_server_default_instance_),
};

const char descriptor_table_protodef_file_5fsystem_5fserver_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\030file_system_server.proto\022\006doodle\032\037goog"
  "le/protobuf/timestamp.proto\032\031google/prot"
  "obuf/any.proto\032\036google/protobuf/wrappers"
  ".proto\"\255\001\n\020file_info_server\022\014\n\004path\030\001 \001("
  "\t\022\021\n\tis_folder\030\002 \001(\010\022\r\n\005exist\030\003 \001(\010\022/\n\013u"
  "pdate_time\030\004 \001(\0132\032.google.protobuf.Times"
  "tamp\022\014\n\004size\030\005 \001(\004\022*\n\004hash\030\006 \001(\0132\034.googl"
  "e.protobuf.StringValue\"`\n\022file_stream_se"
  "rver\022&\n\004info\030\001 \001(\0132\030.doodle.file_info_se"
  "rver\022\"\n\004data\030\002 \001(\0132\024.google.protobuf.Any"
  "\"k\n\025file_info_move_server\022(\n\006source\030\001 \001("
  "\0132\030.doodle.file_info_server\022(\n\006target\030\002 "
  "\001(\0132\030.doodle.file_info_server2\267\005\n\022file_s"
  "ystem_server\022@\n\010get_info\022\030.doodle.file_i"
  "nfo_server\032\030.doodle.file_info_server\"\000\022@"
  "\n\010get_hash\022\030.doodle.file_info_server\032\030.d"
  "oodle.file_info_server\"\000\022@\n\010is_exist\022\030.d"
  "oodle.file_info_server\032\030.doodle.file_inf"
  "o_server\"\000\022@\n\010get_size\022\030.doodle.file_inf"
  "o_server\032\030.doodle.file_info_server\"\000\022A\n\t"
  "is_folder\022\030.doodle.file_info_server\032\030.do"
  "odle.file_info_server\"\000\022E\n\rget_timestamp"
  "\022\030.doodle.file_info_server\032\030.doodle.file"
  "_info_server\"\000\022B\n\010get_list\022\030.doodle.file"
  "_info_server\032\030.doodle.file_info_server\"\000"
  "0\001\022D\n\010download\022\030.doodle.file_info_server"
  "\032\032.doodle.file_stream_server\"\0000\001\022B\n\006uplo"
  "ad\022\032.doodle.file_stream_server\032\030.doodle."
  "file_info_server\"\000(\001\022A\n\004move\022\035.doodle.fi"
  "le_info_move_server\032\030.doodle.file_info_s"
  "erver\"\000b\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_file_5fsystem_5fserver_2eproto_deps[3] = {
  &::descriptor_table_google_2fprotobuf_2fany_2eproto,
  &::descriptor_table_google_2fprotobuf_2ftimestamp_2eproto,
  &::descriptor_table_google_2fprotobuf_2fwrappers_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_file_5fsystem_5fserver_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_file_5fsystem_5fserver_2eproto = {
  false, false, 1215, descriptor_table_protodef_file_5fsystem_5fserver_2eproto, "file_system_server.proto", 
  &descriptor_table_file_5fsystem_5fserver_2eproto_once, descriptor_table_file_5fsystem_5fserver_2eproto_deps, 3, 3,
  schemas, file_default_instances, TableStruct_file_5fsystem_5fserver_2eproto::offsets,
  file_level_metadata_file_5fsystem_5fserver_2eproto, file_level_enum_descriptors_file_5fsystem_5fserver_2eproto, file_level_service_descriptors_file_5fsystem_5fserver_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_file_5fsystem_5fserver_2eproto_getter() {
  return &descriptor_table_file_5fsystem_5fserver_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_file_5fsystem_5fserver_2eproto(&descriptor_table_file_5fsystem_5fserver_2eproto);
namespace doodle {

// ===================================================================

class file_info_server::_Internal {
 public:
  static const ::PROTOBUF_NAMESPACE_ID::Timestamp& update_time(const file_info_server* msg);
  static const ::PROTOBUF_NAMESPACE_ID::StringValue& hash(const file_info_server* msg);
};

const ::PROTOBUF_NAMESPACE_ID::Timestamp&
file_info_server::_Internal::update_time(const file_info_server* msg) {
  return *msg->update_time_;
}
const ::PROTOBUF_NAMESPACE_ID::StringValue&
file_info_server::_Internal::hash(const file_info_server* msg) {
  return *msg->hash_;
}
void file_info_server::clear_update_time() {
  if (GetArenaForAllocation() == nullptr && update_time_ != nullptr) {
    delete update_time_;
  }
  update_time_ = nullptr;
}
void file_info_server::clear_hash() {
  if (GetArenaForAllocation() == nullptr && hash_ != nullptr) {
    delete hash_;
  }
  hash_ = nullptr;
}
file_info_server::file_info_server(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:doodle.file_info_server)
}
file_info_server::file_info_server(const file_info_server& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  path_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_path().empty()) {
    path_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_path(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_update_time()) {
    update_time_ = new ::PROTOBUF_NAMESPACE_ID::Timestamp(*from.update_time_);
  } else {
    update_time_ = nullptr;
  }
  if (from._internal_has_hash()) {
    hash_ = new ::PROTOBUF_NAMESPACE_ID::StringValue(*from.hash_);
  } else {
    hash_ = nullptr;
  }
  ::memcpy(&size_, &from.size_,
    static_cast<size_t>(reinterpret_cast<char*>(&exist_) -
    reinterpret_cast<char*>(&size_)) + sizeof(exist_));
  // @@protoc_insertion_point(copy_constructor:doodle.file_info_server)
}

void file_info_server::SharedCtor() {
path_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&update_time_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&exist_) -
    reinterpret_cast<char*>(&update_time_)) + sizeof(exist_));
}

file_info_server::~file_info_server() {
  // @@protoc_insertion_point(destructor:doodle.file_info_server)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void file_info_server::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  path_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete update_time_;
  if (this != internal_default_instance()) delete hash_;
}

void file_info_server::ArenaDtor(void* object) {
  file_info_server* _this = reinterpret_cast< file_info_server* >(object);
  (void)_this;
}
void file_info_server::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void file_info_server::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void file_info_server::Clear() {
// @@protoc_insertion_point(message_clear_start:doodle.file_info_server)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  path_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && update_time_ != nullptr) {
    delete update_time_;
  }
  update_time_ = nullptr;
  if (GetArenaForAllocation() == nullptr && hash_ != nullptr) {
    delete hash_;
  }
  hash_ = nullptr;
  ::memset(&size_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&exist_) -
      reinterpret_cast<char*>(&size_)) + sizeof(exist_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* file_info_server::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string path = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_path();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "doodle.file_info_server.path"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool is_folder = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          is_folder_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool exist = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          exist_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp update_time = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_update_time(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 size = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.StringValue hash = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_hash(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* file_info_server::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:doodle.file_info_server)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string path = 1;
  if (!this->_internal_path().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_path().data(), static_cast<int>(this->_internal_path().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "doodle.file_info_server.path");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_path(), target);
  }

  // bool is_folder = 2;
  if (this->_internal_is_folder() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_is_folder(), target);
  }

  // bool exist = 3;
  if (this->_internal_exist() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_exist(), target);
  }

  // .google.protobuf.Timestamp update_time = 4;
  if (this->_internal_has_update_time()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::update_time(this), target, stream);
  }

  // uint64 size = 5;
  if (this->_internal_size() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(5, this->_internal_size(), target);
  }

  // .google.protobuf.StringValue hash = 6;
  if (this->_internal_has_hash()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::hash(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:doodle.file_info_server)
  return target;
}

size_t file_info_server::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:doodle.file_info_server)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string path = 1;
  if (!this->_internal_path().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_path());
  }

  // .google.protobuf.Timestamp update_time = 4;
  if (this->_internal_has_update_time()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *update_time_);
  }

  // .google.protobuf.StringValue hash = 6;
  if (this->_internal_has_hash()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *hash_);
  }

  // uint64 size = 5;
  if (this->_internal_size() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_size());
  }

  // bool is_folder = 2;
  if (this->_internal_is_folder() != 0) {
    total_size += 1 + 1;
  }

  // bool exist = 3;
  if (this->_internal_exist() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData file_info_server::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    file_info_server::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*file_info_server::GetClassData() const { return &_class_data_; }

void file_info_server::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<file_info_server *>(to)->MergeFrom(
      static_cast<const file_info_server &>(from));
}


void file_info_server::MergeFrom(const file_info_server& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:doodle.file_info_server)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_path().empty()) {
    _internal_set_path(from._internal_path());
  }
  if (from._internal_has_update_time()) {
    _internal_mutable_update_time()->::PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(from._internal_update_time());
  }
  if (from._internal_has_hash()) {
    _internal_mutable_hash()->::PROTOBUF_NAMESPACE_ID::StringValue::MergeFrom(from._internal_hash());
  }
  if (from._internal_size() != 0) {
    _internal_set_size(from._internal_size());
  }
  if (from._internal_is_folder() != 0) {
    _internal_set_is_folder(from._internal_is_folder());
  }
  if (from._internal_exist() != 0) {
    _internal_set_exist(from._internal_exist());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void file_info_server::CopyFrom(const file_info_server& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:doodle.file_info_server)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool file_info_server::IsInitialized() const {
  return true;
}

void file_info_server::InternalSwap(file_info_server* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &path_, lhs_arena,
      &other->path_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(file_info_server, exist_)
      + sizeof(file_info_server::exist_)
      - PROTOBUF_FIELD_OFFSET(file_info_server, update_time_)>(
          reinterpret_cast<char*>(&update_time_),
          reinterpret_cast<char*>(&other->update_time_));
}

::PROTOBUF_NAMESPACE_ID::Metadata file_info_server::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_file_5fsystem_5fserver_2eproto_getter, &descriptor_table_file_5fsystem_5fserver_2eproto_once,
      file_level_metadata_file_5fsystem_5fserver_2eproto[0]);
}

// ===================================================================

class file_stream_server::_Internal {
 public:
  static const ::doodle::file_info_server& info(const file_stream_server* msg);
  static const ::PROTOBUF_NAMESPACE_ID::Any& data(const file_stream_server* msg);
};

const ::doodle::file_info_server&
file_stream_server::_Internal::info(const file_stream_server* msg) {
  return *msg->info_;
}
const ::PROTOBUF_NAMESPACE_ID::Any&
file_stream_server::_Internal::data(const file_stream_server* msg) {
  return *msg->data_;
}
void file_stream_server::clear_data() {
  if (GetArenaForAllocation() == nullptr && data_ != nullptr) {
    delete data_;
  }
  data_ = nullptr;
}
file_stream_server::file_stream_server(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:doodle.file_stream_server)
}
file_stream_server::file_stream_server(const file_stream_server& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_info()) {
    info_ = new ::doodle::file_info_server(*from.info_);
  } else {
    info_ = nullptr;
  }
  if (from._internal_has_data()) {
    data_ = new ::PROTOBUF_NAMESPACE_ID::Any(*from.data_);
  } else {
    data_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:doodle.file_stream_server)
}

void file_stream_server::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&info_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&data_) -
    reinterpret_cast<char*>(&info_)) + sizeof(data_));
}

file_stream_server::~file_stream_server() {
  // @@protoc_insertion_point(destructor:doodle.file_stream_server)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void file_stream_server::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete info_;
  if (this != internal_default_instance()) delete data_;
}

void file_stream_server::ArenaDtor(void* object) {
  file_stream_server* _this = reinterpret_cast< file_stream_server* >(object);
  (void)_this;
}
void file_stream_server::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void file_stream_server::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void file_stream_server::Clear() {
// @@protoc_insertion_point(message_clear_start:doodle.file_stream_server)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && info_ != nullptr) {
    delete info_;
  }
  info_ = nullptr;
  if (GetArenaForAllocation() == nullptr && data_ != nullptr) {
    delete data_;
  }
  data_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* file_stream_server::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .doodle.file_info_server info = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_info(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Any data = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_data(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* file_stream_server::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:doodle.file_stream_server)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .doodle.file_info_server info = 1;
  if (this->_internal_has_info()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::info(this), target, stream);
  }

  // .google.protobuf.Any data = 2;
  if (this->_internal_has_data()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::data(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:doodle.file_stream_server)
  return target;
}

size_t file_stream_server::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:doodle.file_stream_server)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .doodle.file_info_server info = 1;
  if (this->_internal_has_info()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *info_);
  }

  // .google.protobuf.Any data = 2;
  if (this->_internal_has_data()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *data_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData file_stream_server::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    file_stream_server::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*file_stream_server::GetClassData() const { return &_class_data_; }

void file_stream_server::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<file_stream_server *>(to)->MergeFrom(
      static_cast<const file_stream_server &>(from));
}


void file_stream_server::MergeFrom(const file_stream_server& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:doodle.file_stream_server)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_info()) {
    _internal_mutable_info()->::doodle::file_info_server::MergeFrom(from._internal_info());
  }
  if (from._internal_has_data()) {
    _internal_mutable_data()->::PROTOBUF_NAMESPACE_ID::Any::MergeFrom(from._internal_data());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void file_stream_server::CopyFrom(const file_stream_server& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:doodle.file_stream_server)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool file_stream_server::IsInitialized() const {
  return true;
}

void file_stream_server::InternalSwap(file_stream_server* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(file_stream_server, data_)
      + sizeof(file_stream_server::data_)
      - PROTOBUF_FIELD_OFFSET(file_stream_server, info_)>(
          reinterpret_cast<char*>(&info_),
          reinterpret_cast<char*>(&other->info_));
}

::PROTOBUF_NAMESPACE_ID::Metadata file_stream_server::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_file_5fsystem_5fserver_2eproto_getter, &descriptor_table_file_5fsystem_5fserver_2eproto_once,
      file_level_metadata_file_5fsystem_5fserver_2eproto[1]);
}

// ===================================================================

class file_info_move_server::_Internal {
 public:
  static const ::doodle::file_info_server& source(const file_info_move_server* msg);
  static const ::doodle::file_info_server& target(const file_info_move_server* msg);
};

const ::doodle::file_info_server&
file_info_move_server::_Internal::source(const file_info_move_server* msg) {
  return *msg->source_;
}
const ::doodle::file_info_server&
file_info_move_server::_Internal::target(const file_info_move_server* msg) {
  return *msg->target_;
}
file_info_move_server::file_info_move_server(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:doodle.file_info_move_server)
}
file_info_move_server::file_info_move_server(const file_info_move_server& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_source()) {
    source_ = new ::doodle::file_info_server(*from.source_);
  } else {
    source_ = nullptr;
  }
  if (from._internal_has_target()) {
    target_ = new ::doodle::file_info_server(*from.target_);
  } else {
    target_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:doodle.file_info_move_server)
}

void file_info_move_server::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&source_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&target_) -
    reinterpret_cast<char*>(&source_)) + sizeof(target_));
}

file_info_move_server::~file_info_move_server() {
  // @@protoc_insertion_point(destructor:doodle.file_info_move_server)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void file_info_move_server::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete source_;
  if (this != internal_default_instance()) delete target_;
}

void file_info_move_server::ArenaDtor(void* object) {
  file_info_move_server* _this = reinterpret_cast< file_info_move_server* >(object);
  (void)_this;
}
void file_info_move_server::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void file_info_move_server::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void file_info_move_server::Clear() {
// @@protoc_insertion_point(message_clear_start:doodle.file_info_move_server)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && source_ != nullptr) {
    delete source_;
  }
  source_ = nullptr;
  if (GetArenaForAllocation() == nullptr && target_ != nullptr) {
    delete target_;
  }
  target_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* file_info_move_server::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .doodle.file_info_server source = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_source(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .doodle.file_info_server target = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_target(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* file_info_move_server::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:doodle.file_info_move_server)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .doodle.file_info_server source = 1;
  if (this->_internal_has_source()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::source(this), target, stream);
  }

  // .doodle.file_info_server target = 2;
  if (this->_internal_has_target()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::target(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:doodle.file_info_move_server)
  return target;
}

size_t file_info_move_server::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:doodle.file_info_move_server)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .doodle.file_info_server source = 1;
  if (this->_internal_has_source()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *source_);
  }

  // .doodle.file_info_server target = 2;
  if (this->_internal_has_target()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *target_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData file_info_move_server::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    file_info_move_server::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*file_info_move_server::GetClassData() const { return &_class_data_; }

void file_info_move_server::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<file_info_move_server *>(to)->MergeFrom(
      static_cast<const file_info_move_server &>(from));
}


void file_info_move_server::MergeFrom(const file_info_move_server& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:doodle.file_info_move_server)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_source()) {
    _internal_mutable_source()->::doodle::file_info_server::MergeFrom(from._internal_source());
  }
  if (from._internal_has_target()) {
    _internal_mutable_target()->::doodle::file_info_server::MergeFrom(from._internal_target());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void file_info_move_server::CopyFrom(const file_info_move_server& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:doodle.file_info_move_server)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool file_info_move_server::IsInitialized() const {
  return true;
}

void file_info_move_server::InternalSwap(file_info_move_server* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(file_info_move_server, target_)
      + sizeof(file_info_move_server::target_)
      - PROTOBUF_FIELD_OFFSET(file_info_move_server, source_)>(
          reinterpret_cast<char*>(&source_),
          reinterpret_cast<char*>(&other->source_));
}

::PROTOBUF_NAMESPACE_ID::Metadata file_info_move_server::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_file_5fsystem_5fserver_2eproto_getter, &descriptor_table_file_5fsystem_5fserver_2eproto_once,
      file_level_metadata_file_5fsystem_5fserver_2eproto[2]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace doodle
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::doodle::file_info_server* Arena::CreateMaybeMessage< ::doodle::file_info_server >(Arena* arena) {
  return Arena::CreateMessageInternal< ::doodle::file_info_server >(arena);
}
template<> PROTOBUF_NOINLINE ::doodle::file_stream_server* Arena::CreateMaybeMessage< ::doodle::file_stream_server >(Arena* arena) {
  return Arena::CreateMessageInternal< ::doodle::file_stream_server >(arena);
}
template<> PROTOBUF_NOINLINE ::doodle::file_info_move_server* Arena::CreateMaybeMessage< ::doodle::file_info_move_server >(Arena* arena) {
  return Arena::CreateMessageInternal< ::doodle::file_info_move_server >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
