// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: file_system_server.proto

#include "file_system_server.pb.h"
#include "file_system_server.grpc.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace doodle {

static const char* file_system_server_method_names[] = {
  "/doodle.file_system_server/get_info",
  "/doodle.file_system_server/get_hash",
  "/doodle.file_system_server/is_exist",
  "/doodle.file_system_server/get_size",
  "/doodle.file_system_server/is_folder",
  "/doodle.file_system_server/get_timestamp",
  "/doodle.file_system_server/get_list",
  "/doodle.file_system_server/download",
  "/doodle.file_system_server/upload",
  "/doodle.file_system_server/move",
};

std::unique_ptr< file_system_server::Stub> file_system_server::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< file_system_server::Stub> stub(new file_system_server::Stub(channel, options));
  return stub;
}

file_system_server::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_get_info_(file_system_server_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_get_hash_(file_system_server_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_is_exist_(file_system_server_method_names[2], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_get_size_(file_system_server_method_names[3], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_is_folder_(file_system_server_method_names[4], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_get_timestamp_(file_system_server_method_names[5], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_get_list_(file_system_server_method_names[6], options.suffix_for_stats(),::grpc::internal::RpcMethod::SERVER_STREAMING, channel)
  , rpcmethod_download_(file_system_server_method_names[7], options.suffix_for_stats(),::grpc::internal::RpcMethod::SERVER_STREAMING, channel)
  , rpcmethod_upload_(file_system_server_method_names[8], options.suffix_for_stats(),::grpc::internal::RpcMethod::CLIENT_STREAMING, channel)
  , rpcmethod_move_(file_system_server_method_names[9], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status file_system_server::Stub::get_info(::grpc::ClientContext* context, const ::doodle::file_info_server& request, ::doodle::file_info_server* response) {
  return ::grpc::internal::BlockingUnaryCall< ::doodle::file_info_server, ::doodle::file_info_server, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_get_info_, context, request, response);
}

void file_system_server::Stub::async::get_info(::grpc::ClientContext* context, const ::doodle::file_info_server* request, ::doodle::file_info_server* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::doodle::file_info_server, ::doodle::file_info_server, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_get_info_, context, request, response, std::move(f));
}

void file_system_server::Stub::async::get_info(::grpc::ClientContext* context, const ::doodle::file_info_server* request, ::doodle::file_info_server* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_get_info_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::doodle::file_info_server>* file_system_server::Stub::PrepareAsyncget_infoRaw(::grpc::ClientContext* context, const ::doodle::file_info_server& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::doodle::file_info_server, ::doodle::file_info_server, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_get_info_, context, request);
}

::grpc::ClientAsyncResponseReader< ::doodle::file_info_server>* file_system_server::Stub::Asyncget_infoRaw(::grpc::ClientContext* context, const ::doodle::file_info_server& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncget_infoRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status file_system_server::Stub::get_hash(::grpc::ClientContext* context, const ::doodle::file_info_server& request, ::doodle::file_info_server* response) {
  return ::grpc::internal::BlockingUnaryCall< ::doodle::file_info_server, ::doodle::file_info_server, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_get_hash_, context, request, response);
}

void file_system_server::Stub::async::get_hash(::grpc::ClientContext* context, const ::doodle::file_info_server* request, ::doodle::file_info_server* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::doodle::file_info_server, ::doodle::file_info_server, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_get_hash_, context, request, response, std::move(f));
}

void file_system_server::Stub::async::get_hash(::grpc::ClientContext* context, const ::doodle::file_info_server* request, ::doodle::file_info_server* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_get_hash_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::doodle::file_info_server>* file_system_server::Stub::PrepareAsyncget_hashRaw(::grpc::ClientContext* context, const ::doodle::file_info_server& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::doodle::file_info_server, ::doodle::file_info_server, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_get_hash_, context, request);
}

::grpc::ClientAsyncResponseReader< ::doodle::file_info_server>* file_system_server::Stub::Asyncget_hashRaw(::grpc::ClientContext* context, const ::doodle::file_info_server& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncget_hashRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status file_system_server::Stub::is_exist(::grpc::ClientContext* context, const ::doodle::file_info_server& request, ::doodle::file_info_server* response) {
  return ::grpc::internal::BlockingUnaryCall< ::doodle::file_info_server, ::doodle::file_info_server, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_is_exist_, context, request, response);
}

void file_system_server::Stub::async::is_exist(::grpc::ClientContext* context, const ::doodle::file_info_server* request, ::doodle::file_info_server* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::doodle::file_info_server, ::doodle::file_info_server, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_is_exist_, context, request, response, std::move(f));
}

void file_system_server::Stub::async::is_exist(::grpc::ClientContext* context, const ::doodle::file_info_server* request, ::doodle::file_info_server* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_is_exist_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::doodle::file_info_server>* file_system_server::Stub::PrepareAsyncis_existRaw(::grpc::ClientContext* context, const ::doodle::file_info_server& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::doodle::file_info_server, ::doodle::file_info_server, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_is_exist_, context, request);
}

::grpc::ClientAsyncResponseReader< ::doodle::file_info_server>* file_system_server::Stub::Asyncis_existRaw(::grpc::ClientContext* context, const ::doodle::file_info_server& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncis_existRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status file_system_server::Stub::get_size(::grpc::ClientContext* context, const ::doodle::file_info_server& request, ::doodle::file_info_server* response) {
  return ::grpc::internal::BlockingUnaryCall< ::doodle::file_info_server, ::doodle::file_info_server, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_get_size_, context, request, response);
}

void file_system_server::Stub::async::get_size(::grpc::ClientContext* context, const ::doodle::file_info_server* request, ::doodle::file_info_server* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::doodle::file_info_server, ::doodle::file_info_server, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_get_size_, context, request, response, std::move(f));
}

void file_system_server::Stub::async::get_size(::grpc::ClientContext* context, const ::doodle::file_info_server* request, ::doodle::file_info_server* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_get_size_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::doodle::file_info_server>* file_system_server::Stub::PrepareAsyncget_sizeRaw(::grpc::ClientContext* context, const ::doodle::file_info_server& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::doodle::file_info_server, ::doodle::file_info_server, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_get_size_, context, request);
}

::grpc::ClientAsyncResponseReader< ::doodle::file_info_server>* file_system_server::Stub::Asyncget_sizeRaw(::grpc::ClientContext* context, const ::doodle::file_info_server& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncget_sizeRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status file_system_server::Stub::is_folder(::grpc::ClientContext* context, const ::doodle::file_info_server& request, ::doodle::file_info_server* response) {
  return ::grpc::internal::BlockingUnaryCall< ::doodle::file_info_server, ::doodle::file_info_server, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_is_folder_, context, request, response);
}

void file_system_server::Stub::async::is_folder(::grpc::ClientContext* context, const ::doodle::file_info_server* request, ::doodle::file_info_server* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::doodle::file_info_server, ::doodle::file_info_server, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_is_folder_, context, request, response, std::move(f));
}

void file_system_server::Stub::async::is_folder(::grpc::ClientContext* context, const ::doodle::file_info_server* request, ::doodle::file_info_server* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_is_folder_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::doodle::file_info_server>* file_system_server::Stub::PrepareAsyncis_folderRaw(::grpc::ClientContext* context, const ::doodle::file_info_server& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::doodle::file_info_server, ::doodle::file_info_server, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_is_folder_, context, request);
}

::grpc::ClientAsyncResponseReader< ::doodle::file_info_server>* file_system_server::Stub::Asyncis_folderRaw(::grpc::ClientContext* context, const ::doodle::file_info_server& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncis_folderRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status file_system_server::Stub::get_timestamp(::grpc::ClientContext* context, const ::doodle::file_info_server& request, ::doodle::file_info_server* response) {
  return ::grpc::internal::BlockingUnaryCall< ::doodle::file_info_server, ::doodle::file_info_server, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_get_timestamp_, context, request, response);
}

void file_system_server::Stub::async::get_timestamp(::grpc::ClientContext* context, const ::doodle::file_info_server* request, ::doodle::file_info_server* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::doodle::file_info_server, ::doodle::file_info_server, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_get_timestamp_, context, request, response, std::move(f));
}

void file_system_server::Stub::async::get_timestamp(::grpc::ClientContext* context, const ::doodle::file_info_server* request, ::doodle::file_info_server* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_get_timestamp_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::doodle::file_info_server>* file_system_server::Stub::PrepareAsyncget_timestampRaw(::grpc::ClientContext* context, const ::doodle::file_info_server& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::doodle::file_info_server, ::doodle::file_info_server, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_get_timestamp_, context, request);
}

::grpc::ClientAsyncResponseReader< ::doodle::file_info_server>* file_system_server::Stub::Asyncget_timestampRaw(::grpc::ClientContext* context, const ::doodle::file_info_server& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncget_timestampRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::ClientReader< ::doodle::file_info_server>* file_system_server::Stub::get_listRaw(::grpc::ClientContext* context, const ::doodle::file_info_server& request) {
  return ::grpc::internal::ClientReaderFactory< ::doodle::file_info_server>::Create(channel_.get(), rpcmethod_get_list_, context, request);
}

void file_system_server::Stub::async::get_list(::grpc::ClientContext* context, const ::doodle::file_info_server* request, ::grpc::ClientReadReactor< ::doodle::file_info_server>* reactor) {
  ::grpc::internal::ClientCallbackReaderFactory< ::doodle::file_info_server>::Create(stub_->channel_.get(), stub_->rpcmethod_get_list_, context, request, reactor);
}

::grpc::ClientAsyncReader< ::doodle::file_info_server>* file_system_server::Stub::Asyncget_listRaw(::grpc::ClientContext* context, const ::doodle::file_info_server& request, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::doodle::file_info_server>::Create(channel_.get(), cq, rpcmethod_get_list_, context, request, true, tag);
}

::grpc::ClientAsyncReader< ::doodle::file_info_server>* file_system_server::Stub::PrepareAsyncget_listRaw(::grpc::ClientContext* context, const ::doodle::file_info_server& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::doodle::file_info_server>::Create(channel_.get(), cq, rpcmethod_get_list_, context, request, false, nullptr);
}

::grpc::ClientReader< ::doodle::file_stream_server>* file_system_server::Stub::downloadRaw(::grpc::ClientContext* context, const ::doodle::file_info_server& request) {
  return ::grpc::internal::ClientReaderFactory< ::doodle::file_stream_server>::Create(channel_.get(), rpcmethod_download_, context, request);
}

void file_system_server::Stub::async::download(::grpc::ClientContext* context, const ::doodle::file_info_server* request, ::grpc::ClientReadReactor< ::doodle::file_stream_server>* reactor) {
  ::grpc::internal::ClientCallbackReaderFactory< ::doodle::file_stream_server>::Create(stub_->channel_.get(), stub_->rpcmethod_download_, context, request, reactor);
}

::grpc::ClientAsyncReader< ::doodle::file_stream_server>* file_system_server::Stub::AsyncdownloadRaw(::grpc::ClientContext* context, const ::doodle::file_info_server& request, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::doodle::file_stream_server>::Create(channel_.get(), cq, rpcmethod_download_, context, request, true, tag);
}

::grpc::ClientAsyncReader< ::doodle::file_stream_server>* file_system_server::Stub::PrepareAsyncdownloadRaw(::grpc::ClientContext* context, const ::doodle::file_info_server& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::doodle::file_stream_server>::Create(channel_.get(), cq, rpcmethod_download_, context, request, false, nullptr);
}

::grpc::ClientWriter< ::doodle::file_stream_server>* file_system_server::Stub::uploadRaw(::grpc::ClientContext* context, ::doodle::file_info_server* response) {
  return ::grpc::internal::ClientWriterFactory< ::doodle::file_stream_server>::Create(channel_.get(), rpcmethod_upload_, context, response);
}

void file_system_server::Stub::async::upload(::grpc::ClientContext* context, ::doodle::file_info_server* response, ::grpc::ClientWriteReactor< ::doodle::file_stream_server>* reactor) {
  ::grpc::internal::ClientCallbackWriterFactory< ::doodle::file_stream_server>::Create(stub_->channel_.get(), stub_->rpcmethod_upload_, context, response, reactor);
}

::grpc::ClientAsyncWriter< ::doodle::file_stream_server>* file_system_server::Stub::AsyncuploadRaw(::grpc::ClientContext* context, ::doodle::file_info_server* response, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncWriterFactory< ::doodle::file_stream_server>::Create(channel_.get(), cq, rpcmethod_upload_, context, response, true, tag);
}

::grpc::ClientAsyncWriter< ::doodle::file_stream_server>* file_system_server::Stub::PrepareAsyncuploadRaw(::grpc::ClientContext* context, ::doodle::file_info_server* response, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncWriterFactory< ::doodle::file_stream_server>::Create(channel_.get(), cq, rpcmethod_upload_, context, response, false, nullptr);
}

::grpc::Status file_system_server::Stub::move(::grpc::ClientContext* context, const ::doodle::file_info_move_server& request, ::doodle::file_info_server* response) {
  return ::grpc::internal::BlockingUnaryCall< ::doodle::file_info_move_server, ::doodle::file_info_server, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_move_, context, request, response);
}

void file_system_server::Stub::async::move(::grpc::ClientContext* context, const ::doodle::file_info_move_server* request, ::doodle::file_info_server* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::doodle::file_info_move_server, ::doodle::file_info_server, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_move_, context, request, response, std::move(f));
}

void file_system_server::Stub::async::move(::grpc::ClientContext* context, const ::doodle::file_info_move_server* request, ::doodle::file_info_server* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_move_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::doodle::file_info_server>* file_system_server::Stub::PrepareAsyncmoveRaw(::grpc::ClientContext* context, const ::doodle::file_info_move_server& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::doodle::file_info_server, ::doodle::file_info_move_server, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_move_, context, request);
}

::grpc::ClientAsyncResponseReader< ::doodle::file_info_server>* file_system_server::Stub::AsyncmoveRaw(::grpc::ClientContext* context, const ::doodle::file_info_move_server& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncmoveRaw(context, request, cq);
  result->StartCall();
  return result;
}

file_system_server::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      file_system_server_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< file_system_server::Service, ::doodle::file_info_server, ::doodle::file_info_server, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](file_system_server::Service* service,
             ::grpc::ServerContext* ctx,
             const ::doodle::file_info_server* req,
             ::doodle::file_info_server* resp) {
               return service->get_info(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      file_system_server_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< file_system_server::Service, ::doodle::file_info_server, ::doodle::file_info_server, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](file_system_server::Service* service,
             ::grpc::ServerContext* ctx,
             const ::doodle::file_info_server* req,
             ::doodle::file_info_server* resp) {
               return service->get_hash(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      file_system_server_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< file_system_server::Service, ::doodle::file_info_server, ::doodle::file_info_server, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](file_system_server::Service* service,
             ::grpc::ServerContext* ctx,
             const ::doodle::file_info_server* req,
             ::doodle::file_info_server* resp) {
               return service->is_exist(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      file_system_server_method_names[3],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< file_system_server::Service, ::doodle::file_info_server, ::doodle::file_info_server, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](file_system_server::Service* service,
             ::grpc::ServerContext* ctx,
             const ::doodle::file_info_server* req,
             ::doodle::file_info_server* resp) {
               return service->get_size(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      file_system_server_method_names[4],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< file_system_server::Service, ::doodle::file_info_server, ::doodle::file_info_server, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](file_system_server::Service* service,
             ::grpc::ServerContext* ctx,
             const ::doodle::file_info_server* req,
             ::doodle::file_info_server* resp) {
               return service->is_folder(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      file_system_server_method_names[5],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< file_system_server::Service, ::doodle::file_info_server, ::doodle::file_info_server, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](file_system_server::Service* service,
             ::grpc::ServerContext* ctx,
             const ::doodle::file_info_server* req,
             ::doodle::file_info_server* resp) {
               return service->get_timestamp(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      file_system_server_method_names[6],
      ::grpc::internal::RpcMethod::SERVER_STREAMING,
      new ::grpc::internal::ServerStreamingHandler< file_system_server::Service, ::doodle::file_info_server, ::doodle::file_info_server>(
          [](file_system_server::Service* service,
             ::grpc::ServerContext* ctx,
             const ::doodle::file_info_server* req,
             ::grpc::ServerWriter<::doodle::file_info_server>* writer) {
               return service->get_list(ctx, req, writer);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      file_system_server_method_names[7],
      ::grpc::internal::RpcMethod::SERVER_STREAMING,
      new ::grpc::internal::ServerStreamingHandler< file_system_server::Service, ::doodle::file_info_server, ::doodle::file_stream_server>(
          [](file_system_server::Service* service,
             ::grpc::ServerContext* ctx,
             const ::doodle::file_info_server* req,
             ::grpc::ServerWriter<::doodle::file_stream_server>* writer) {
               return service->download(ctx, req, writer);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      file_system_server_method_names[8],
      ::grpc::internal::RpcMethod::CLIENT_STREAMING,
      new ::grpc::internal::ClientStreamingHandler< file_system_server::Service, ::doodle::file_stream_server, ::doodle::file_info_server>(
          [](file_system_server::Service* service,
             ::grpc::ServerContext* ctx,
             ::grpc::ServerReader<::doodle::file_stream_server>* reader,
             ::doodle::file_info_server* resp) {
               return service->upload(ctx, reader, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      file_system_server_method_names[9],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< file_system_server::Service, ::doodle::file_info_move_server, ::doodle::file_info_server, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](file_system_server::Service* service,
             ::grpc::ServerContext* ctx,
             const ::doodle::file_info_move_server* req,
             ::doodle::file_info_server* resp) {
               return service->move(ctx, req, resp);
             }, this)));
}

file_system_server::Service::~Service() {
}

::grpc::Status file_system_server::Service::get_info(::grpc::ServerContext* context, const ::doodle::file_info_server* request, ::doodle::file_info_server* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status file_system_server::Service::get_hash(::grpc::ServerContext* context, const ::doodle::file_info_server* request, ::doodle::file_info_server* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status file_system_server::Service::is_exist(::grpc::ServerContext* context, const ::doodle::file_info_server* request, ::doodle::file_info_server* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status file_system_server::Service::get_size(::grpc::ServerContext* context, const ::doodle::file_info_server* request, ::doodle::file_info_server* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status file_system_server::Service::is_folder(::grpc::ServerContext* context, const ::doodle::file_info_server* request, ::doodle::file_info_server* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status file_system_server::Service::get_timestamp(::grpc::ServerContext* context, const ::doodle::file_info_server* request, ::doodle::file_info_server* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status file_system_server::Service::get_list(::grpc::ServerContext* context, const ::doodle::file_info_server* request, ::grpc::ServerWriter< ::doodle::file_info_server>* writer) {
  (void) context;
  (void) request;
  (void) writer;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status file_system_server::Service::download(::grpc::ServerContext* context, const ::doodle::file_info_server* request, ::grpc::ServerWriter< ::doodle::file_stream_server>* writer) {
  (void) context;
  (void) request;
  (void) writer;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status file_system_server::Service::upload(::grpc::ServerContext* context, ::grpc::ServerReader< ::doodle::file_stream_server>* reader, ::doodle::file_info_server* response) {
  (void) context;
  (void) reader;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status file_system_server::Service::move(::grpc::ServerContext* context, const ::doodle::file_info_move_server* request, ::doodle::file_info_server* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace doodle

